name: Publish to Maven Central

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version (e.g., 1.0.4)'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Configure GPG
      env:
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
        gpg-connect-agent reloadagent /bye
        echo "GPG configured successfully"
        gpg --list-secret-keys

    - name: Set version
      run: |
        mvn versions:set -DnewVersion=${{ inputs.release-version }}
        mvn versions:commit

    - name: Build and publish to Maven Central
      run: mvn clean deploy -P release -DskipTests -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }}
      env:
        MAVEN_USERNAME: ${{ secrets.CENTRAL_TOKEN_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.CENTRAL_TOKEN_PASSWORD }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    - name: Create and push tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add pom.xml
        git commit -m "Release version ${{ inputs.release-version }}"
        git tag v${{ inputs.release-version }}
        git push origin main
        git push origin v${{ inputs.release-version }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ inputs.release-version }}
        name: AutoHeal Locator v${{ inputs.release-version }}
        body: |
          ## AutoHeal Locator v${{ inputs.release-version }}

          ### Installation from Maven Central
          ```xml
          <dependency>
              <groupId>io.github.sanjaypg</groupId>
              <artifactId>autoheal-locator</artifactId>
              <version>${{ inputs.release-version }}</version>
          </dependency>
          ```

          ### Features
          - AI-powered element healing with multiple provider support
          - Dual-layer caching system (Memory + Persistent)
          - Comprehensive reporting and metrics
          - Selenium WebDriver integration

          ### Quick Start
          ```java
          AutoHealLocator autoHeal = AutoHealManager.createMinimalAutoHeal(driver);
          WebElement element = autoHeal.findElement("css-selector", "description");
          ```

          ðŸ“¦ Available on [Maven Central](https://central.sonatype.com/artifact/io.github.sanjaypg/autoheal-locator)
        draft: false
        prerelease: false
