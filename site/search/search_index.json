{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AutoHeal Locator","text":"<p>Enterprise-grade AI-powered element locator with auto-healing capabilities for Selenium WebDriver.</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>\ud83e\udd16 AI-Powered Element Location: Uses advanced AI models to intelligently locate elements when selectors break</li> <li>\ud83d\udd04 Multiple Healing Strategies: DOM analysis, visual analysis, and hybrid approaches</li> <li>\u26a1 Intelligent Caching: High-performance caching with contextual keys and success rate tracking</li> <li>\ud83d\udee1\ufe0f Circuit Breaker Pattern: Resilient AI service integration with fallback mechanisms</li> <li>\ud83d\udcca Comprehensive Metrics: Real-time monitoring and performance analytics</li> <li>\ud83d\ude80 Spring Boot Integration: Auto-configuration and properties support</li> <li>\u2699\ufe0f Async Operations: Non-blocking element location with CompletableFuture</li> <li>\ud83c\udfe2 Enterprise Ready: Production-grade monitoring, configuration, and error handling</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#maven-dependency","title":"Maven Dependency","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.autoheal&lt;/groupId&gt;\n    &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n    &lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>AutoHealLocator locator = new AutoHealLocator.Builder()\n    .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n    .withConfiguration(AutoHealConfiguration.builder()\n        .aiConfig(AIConfig.builder()\n            .apiKey(\"your-openai-key\")\n            .build())\n        .build())\n    .build();\n\nWebElement element = locator.findElement(\"#submit-btn\", \"Submit button\");\n</code></pre>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<ul> <li>Getting Started - Installation and setup</li> <li>User Guide - Comprehensive usage documentation</li> <li>Examples - Real-world examples</li> <li>Advanced - Performance optimization and configuration</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"#why-autoheal-locator","title":"\ud83d\udca1 Why AutoHeal Locator?","text":"<p>Traditional test automation breaks when UI changes. AutoHeal Locator solves this by:</p> <ol> <li>Intelligent Fallback: When selectors fail, AI-powered analysis finds the correct elements</li> <li>Cost Optimization: Smart strategies minimize AI API costs while maintaining reliability</li> <li>Zero Maintenance: Self-healing tests that adapt to UI changes automatically</li> <li>Enterprise Grade: Built for production with monitoring, metrics, and reliability features</li> </ol>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! See our Development Guide for details.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"advanced/architecture/","title":"Architecture Overview","text":"<p>Understanding the internal architecture of AutoHeal Locator.</p>"},{"location":"advanced/architecture/#core-components","title":"Core Components","text":"<pre><code>graph TD\n    A[AutoHealLocator] --&gt; B[ElementLocator]\n    A --&gt; C[AIService]\n    A --&gt; D[SelectorCache]\n    A --&gt; E[WebAutomationAdapter]\n\n    B --&gt; F[DOMElementLocator]\n    B --&gt; G[VisualElementLocator]\n    B --&gt; H[HybridElementLocator]\n\n    C --&gt; I[OpenAIService]\n    C --&gt; J[Circuit Breaker]\n\n    D --&gt; K[CaffeineCache]\n\n    E --&gt; L[SeleniumAdapter]\n    E --&gt; M[PlaywrightAdapter]\n</code></pre>"},{"location":"advanced/architecture/#component-details","title":"Component Details","text":""},{"location":"advanced/architecture/#autoheallocator-main-interface","title":"AutoHealLocator (Main Interface)","text":"<p>The primary entry point that orchestrates all operations:</p> <ul> <li>Responsibility: Coordinate element location attempts</li> <li>Key Methods: <code>findElement()</code>, <code>findElements()</code></li> <li>Dependencies: All core components</li> </ul> <pre><code>public class AutoHealLocator {\n    private final ElementLocator elementLocator;\n    private final AIService aiService;\n    private final SelectorCache cache;\n    private final WebAutomationAdapter adapter;\n\n    public WebElement findElement(String description, String fallbackSelector) {\n        // 1. Check cache first\n        // 2. Try fallback selector\n        // 3. Delegate to ElementLocator\n        // 4. Cache successful results\n    }\n}\n</code></pre>"},{"location":"advanced/architecture/#elementlocator-strategy-pattern","title":"ElementLocator (Strategy Pattern)","text":"<p>Different strategies for element location:</p>"},{"location":"advanced/architecture/#domelementlocator","title":"DOMElementLocator","text":"<ul> <li>Purpose: Fast, cost-effective DOM analysis</li> <li>Use Case: Simple pages with stable structure</li> <li>Cost: $0.01-0.02 per request</li> </ul>"},{"location":"advanced/architecture/#visualelementlocator","title":"VisualElementLocator","text":"<ul> <li>Purpose: Visual analysis using screenshots</li> <li>Use Case: Complex visual layouts</li> <li>Cost: $0.08-0.12 per request</li> </ul>"},{"location":"advanced/architecture/#hybridelementlocator","title":"HybridElementLocator","text":"<ul> <li>Purpose: Combines DOM and visual analysis</li> <li>Use Case: Balanced accuracy and cost</li> <li>Cost: $0.02-0.08 per request</li> </ul>"},{"location":"advanced/architecture/#aiservice-external-integration","title":"AIService (External Integration)","text":"<p>Handles AI provider communication:</p> <pre><code>public interface AIService {\n    CompletableFuture&lt;LocatorResult&gt; analyzeElement(LocatorRequest request);\n    HealthStatus getHealthStatus();\n}\n</code></pre> <p>Features: - Circuit breaker pattern for resilience - Retry logic with exponential backoff - Rate limiting compliance - Multiple AI provider support</p>"},{"location":"advanced/architecture/#selectorcache-performance-optimization","title":"SelectorCache (Performance Optimization)","text":"<p>Intelligent caching system:</p> <pre><code>public interface SelectorCache {\n    Optional&lt;CachedSelector&gt; get(String key);\n    void put(String key, CachedSelector selector, double successRate);\n    void invalidate(String key);\n}\n</code></pre> <p>Cache Key Strategy: <pre><code>page_url + element_description + viewport_size + browser_type\n</code></pre></p> <p>Eviction Policy: - LRU (Least Recently Used) - Success rate threshold (removes selectors with &lt;70% success) - Time-based expiration</p>"},{"location":"advanced/architecture/#execution-strategies","title":"Execution Strategies","text":""},{"location":"advanced/architecture/#smart_sequential-recommended","title":"SMART_SEQUENTIAL (Recommended)","text":"<pre><code>public LocatorResult locate(LocatorRequest request) {\n    // 1. Try cache\n    if (cached != null &amp;&amp; cached.getSuccessRate() &gt; 0.8) {\n        return trySelector(cached.getSelector());\n    }\n\n    // 2. Try DOM analysis (fast &amp; cheap)\n    LocatorResult domResult = domLocator.locate(request);\n    if (domResult.isSuccess()) {\n        return domResult;\n    }\n\n    // 3. Try visual analysis (slower but more accurate)\n    return visualLocator.locate(request);\n}\n</code></pre>"},{"location":"advanced/architecture/#cost-analysis-by-strategy","title":"Cost Analysis by Strategy","text":"Strategy Avg Cost Avg Time Success Rate DOM_ONLY $0.01 200ms 75% SMART_SEQUENTIAL $0.03 800ms 92% VISUAL_FIRST $0.10 1200ms 95% SEQUENTIAL $0.06 1400ms 95%"},{"location":"advanced/architecture/#error-handling","title":"Error Handling","text":""},{"location":"advanced/architecture/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<pre><code>public class ResilientAIService implements AIService {\n    private final CircuitBreaker circuitBreaker;\n\n    public CompletableFuture&lt;LocatorResult&gt; analyzeElement(LocatorRequest request) {\n        return circuitBreaker.executeSupplier(() -&gt; {\n            return aiProvider.analyze(request);\n        });\n    }\n}\n</code></pre> <p>States: - CLOSED: Normal operation - OPEN: Failing fast, using fallbacks - HALF_OPEN: Testing if service recovered</p>"},{"location":"advanced/architecture/#fallback-hierarchy","title":"Fallback Hierarchy","text":"<ol> <li>Cache Hit \u2192 Return cached selector</li> <li>Fallback Selector \u2192 Try provided CSS/XPath</li> <li>DOM Analysis \u2192 Parse DOM structure</li> <li>Visual Analysis \u2192 Screenshot analysis</li> <li>Exception \u2192 Throw <code>ElementNotFoundException</code></li> </ol>"},{"location":"advanced/architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"advanced/architecture/#memory-usage","title":"Memory Usage","text":"<ul> <li>Cache Size: Configurable (default: 1000 entries)</li> <li>Screenshot Storage: Temporary, auto-cleanup</li> <li>AI Response Caching: In-memory with TTL</li> </ul>"},{"location":"advanced/architecture/#threading-model","title":"Threading Model","text":"<ul> <li>Synchronous: Main thread for DOM operations</li> <li>Asynchronous: AI API calls use CompletableFuture</li> <li>Parallel: Multiple element searches can run concurrently</li> </ul>"},{"location":"advanced/architecture/#optimization-techniques","title":"Optimization Techniques","text":"<ol> <li>Lazy Initialization: Components created on-demand</li> <li>Connection Pooling: Reuse HTTP connections to AI APIs</li> <li>Batch Processing: Group multiple requests when possible</li> <li>Smart Caching: Context-aware cache keys</li> </ol>"},{"location":"advanced/architecture/#integration-points","title":"Integration Points","text":""},{"location":"advanced/architecture/#selenium-integration","title":"Selenium Integration","text":"<pre><code>public class SeleniumWebAutomationAdapter implements WebAutomationAdapter {\n    public byte[] takeScreenshot() {\n        return ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);\n    }\n\n    public String getPageSource() {\n        return driver.getPageSource();\n    }\n}\n</code></pre>"},{"location":"advanced/architecture/#spring-boot-integration","title":"Spring Boot Integration","text":"<p>Auto-configuration provides: - Bean registration - Property binding - Health checks - Metrics collection</p> <pre><code>@Configuration\n@EnableConfigurationProperties(AutoHealProperties.class)\npublic class AutoHealAutoConfiguration {\n\n    @Bean\n    @ConditionalOnMissingBean\n    public AutoHealLocator autoHealLocator(AutoHealProperties properties) {\n        return new AutoHealLocator.Builder()\n            .fromProperties(properties)\n            .build();\n    }\n}\n</code></pre>"},{"location":"advanced/architecture/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"advanced/architecture/#metrics-collection","title":"Metrics Collection","text":"<pre><code>public class LocatorMetrics {\n    private final Counter totalRequests;\n    private final Timer responseTime;\n    private final Gauge cacheHitRate;\n    private final Counter aiApiCalls;\n}\n</code></pre>"},{"location":"advanced/architecture/#health-checks","title":"Health Checks","text":"<ul> <li>AI Service connectivity</li> <li>Cache performance</li> <li>Error rates</li> <li>Response times</li> </ul> <p>This architecture ensures scalability, reliability, and cost-effectiveness while maintaining high accuracy in element location.</p>"},{"location":"advanced/configuration-reference/","title":"AutoHeal AI Configuration Examples","text":"<p>The AutoHeal framework now supports comprehensive properties file configuration with multiple AI providers, smart defaults, and environment variable support.</p>"},{"location":"advanced/configuration-reference/#default-configuration-autoheal-defaultproperties","title":"Default Configuration (autoheal-default.properties)","text":"<pre><code># AI Service Configuration\nautoheal.ai.provider=OPENAI\nautoheal.ai.model=${AI_MODEL:}\nautoheal.ai.api-key=${OPENAI_API_KEY:}\nautoheal.ai.api-url=${AI_API_URL:}\nautoheal.ai.timeout=30s\nautoheal.ai.max-retries=3\nautoheal.ai.visual-analysis-enabled=true\n\n# AI Token Configuration\nautoheal.ai.max-tokens-dom=500\nautoheal.ai.max-tokens-visual=1000\nautoheal.ai.temperature-dom=0.1\nautoheal.ai.temperature-visual=0.0\n</code></pre>"},{"location":"advanced/configuration-reference/#configuration-examples-for-different-ai-providers","title":"Configuration Examples for Different AI Providers","text":""},{"location":"advanced/configuration-reference/#openai-configuration","title":"OpenAI Configuration","text":"<pre><code>autoheal.ai.provider=OPENAI\n# Optional: Override default model (gpt-4o-mini)\nautoheal.ai.model=gpt-4o-mini\n# API key from environment variable\nautoheal.ai.api-key=${OPENAI_API_KEY}\n</code></pre>"},{"location":"advanced/configuration-reference/#google-gemini-configuration","title":"Google Gemini Configuration","text":"<pre><code>autoheal.ai.provider=GOOGLE_GEMINI\n# Optional: Override default model (gemini-2.0-flash)\nautoheal.ai.model=gemini-1.5-pro\n# API key from environment variable\nautoheal.ai.api-key=${GEMINI_API_KEY}\n</code></pre>"},{"location":"advanced/configuration-reference/#anthropic-claude-configuration","title":"Anthropic Claude Configuration","text":"<pre><code>autoheal.ai.provider=ANTHROPIC_CLAUDE\n# Optional: Override default model (claude-3-sonnet)\nautoheal.ai.model=claude-3-5-sonnet-20241022\n# API key from environment variable\nautoheal.ai.api-key=${ANTHROPIC_API_KEY}\n# Note: Claude doesn't support visual analysis, only text\nautoheal.ai.visual-analysis-enabled=false\n</code></pre>"},{"location":"advanced/configuration-reference/#deepseek-configuration","title":"DeepSeek Configuration","text":"<pre><code>autoheal.ai.provider=DEEPSEEK\n# Optional: Override default model (deepseek-chat)\nautoheal.ai.model=deepseek-chat\n# API key from environment variable\nautoheal.ai.api-key=${DEEPSEEK_API_KEY}\n# DeepSeek only supports text analysis\nautoheal.ai.visual-analysis-enabled=false\n</code></pre>"},{"location":"advanced/configuration-reference/#grok-configuration","title":"Grok Configuration","text":"<pre><code>autoheal.ai.provider=GROK\n# Optional: Override default model (grok-beta)\nautoheal.ai.model=grok-beta\n# API key from environment variable\nautoheal.ai.api-key=${GROK_API_KEY}\n# Grok only supports text analysis\nautoheal.ai.visual-analysis-enabled=false\n</code></pre>"},{"location":"advanced/configuration-reference/#local-model-configuration","title":"Local Model Configuration","text":"<pre><code>autoheal.ai.provider=LOCAL_MODEL\n# Custom model name for your local deployment\nautoheal.ai.model=llama-3.1-8b\n# Custom API endpoint for your local server\nautoheal.ai.api-url=http://localhost:11434/v1/chat/completions\n# No API key required for local models\nautoheal.ai.visual-analysis-enabled=false\n</code></pre>"},{"location":"advanced/configuration-reference/#environment-variables","title":"Environment Variables","text":"<p>Set these environment variables for API keys: - <code>OPENAI_API_KEY</code> - OpenAI API key - <code>GEMINI_API_KEY</code> - Google Gemini API key - <code>ANTHROPIC_API_KEY</code> - Anthropic Claude API key - <code>DEEPSEEK_API_KEY</code> - DeepSeek API key - <code>GROK_API_KEY</code> - Grok API key</p>"},{"location":"advanced/configuration-reference/#smart-defaults","title":"Smart Defaults","text":"<p>The system provides smart defaults: 1. Provider: If not specified or invalid, defaults to OPENAI 2. Model: If not specified, uses the provider's default model 3. API URL: If not specified, uses the provider's default endpoint 4. API Key: Automatically selects the correct environment variable based on provider 5. Configuration Validation: Ensures valid provider/model combinations with helpful error messages</p>"},{"location":"advanced/configuration-reference/#visual-analysis-support","title":"Visual Analysis Support","text":"<p>Only these providers support visual analysis: - OpenAI (GPT-4o models with vision) - Google Gemini (models with vision) - Mock (for testing)</p> <p>The system automatically detects provider capabilities and gracefully handles unsupported visual analysis requests.</p>"},{"location":"advanced/cost-optimization/","title":"AutoHeal Cost Optimization Examples","text":""},{"location":"advanced/cost-optimization/#execution-strategy-comparison","title":"\ud83c\udfaf Execution Strategy Comparison","text":"Strategy Cost Speed Use Case <code>DOM_ONLY</code> $0.02/request Fast Budget-conscious, DOM-heavy sites <code>SMART_SEQUENTIAL</code> $0.02-0.12/request Medium Recommended default <code>SEQUENTIAL</code> $0.02-0.12/request Slow Predictable costs <code>VISUAL_FIRST</code> $0.10-0.12/request Medium Visual-heavy sites <code>PARALLEL</code> $0.12/request Fastest Performance-critical, cost no object"},{"location":"advanced/cost-optimization/#cost-savings-examples","title":"\ud83d\udcb0 Cost Savings Examples","text":""},{"location":"advanced/cost-optimization/#example-1-budget-conscious-setup","title":"Example 1: Budget-Conscious Setup","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .performance(PerformanceConfig.builder()\n        .executionStrategy(ExecutionStrategy.DOM_ONLY)  // 83% cost savings!\n        .build())\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .visualAnalysisEnabled(false)  // Disable visual entirely\n        .build())\n    .build();\n\n// Cost: $0.02 per healing attempt (vs $0.12 parallel)\n// Savings: $0.10 per attempt (83% reduction)\n</code></pre>"},{"location":"advanced/cost-optimization/#example-2-sequential-default","title":"Example 2: Sequential (Default)","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .performance(PerformanceConfig.builder()\n        .executionStrategy(ExecutionStrategy.SEQUENTIAL)  // Default\n        .build())\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .visualAnalysisEnabled(true)\n        .build())\n    .build();\n\n// Cost: $0.02 if DOM succeeds, $0.12 if visual needed\n// Average cost: ~$0.04-0.06 per healing attempt\n// Savings: ~50% vs parallel execution\n</code></pre>"},{"location":"advanced/cost-optimization/#example-3-performance-critical-setup","title":"Example 3: Performance-Critical Setup","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .performance(PerformanceConfig.builder()\n        .executionStrategy(ExecutionStrategy.PARALLEL)  // Fastest\n        .build())\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .visualAnalysisEnabled(true)\n        .build())\n    .build();\n\n// Cost: $0.12 per healing attempt (both DOM + Visual)\n// Speed: Fastest possible\n// Use case: Critical production systems\n</code></pre>"},{"location":"advanced/cost-optimization/#cost-monitoring","title":"\ud83d\udcca Cost Monitoring","text":"<pre><code>// Get cost metrics\nResilientAIService aiService = (ResilientAIService) autoHeal.getAIService();\nCostMetrics costs = aiService.getCostMetrics();\n\nSystem.out.println(\"Total AI cost: $\" + costs.getTotalCost());\nSystem.out.println(\"DOM requests: \" + costs.getDomRequests() + \" ($\" + costs.getDomCost() + \")\");\nSystem.out.println(\"Visual requests: \" + costs.getVisualRequests() + \" ($\" + costs.getVisualCost() + \")\");\nSystem.out.println(\"Cost savings vs parallel: $\" + costs.getCostSavingsVsParallel());\nSystem.out.println(\"Average cost per request: $\" + costs.getAverageCostPerRequest());\n</code></pre>"},{"location":"advanced/cost-optimization/#spring-boot-configuration","title":"\ud83c\udf9b\ufe0f Spring Boot Configuration","text":"<pre><code>autoheal:\n  performance:\n    execution-strategy: SEQUENTIAL  # Cost-optimized default\n    thread-pool-size: 4\n    element-timeout: 10s\n\n  ai:\n    provider: openai\n    api-key: ${OPENAI_API_KEY}\n    visual-analysis-enabled: true\n    timeout: 30s\n\n# Alternative configurations:\n\n# Budget mode (DOM only)\nautoheal:\n  performance:\n    execution-strategy: DOM_ONLY\n  ai:\n    visual-analysis-enabled: false\n\n# Performance mode (parallel)\nautoheal:\n  performance:\n    execution-strategy: PARALLEL\n  ai:\n    visual-analysis-enabled: true\n</code></pre>"},{"location":"advanced/cost-optimization/#cost-analysis-by-strategy","title":"\ud83d\udcc8 Cost Analysis by Strategy","text":""},{"location":"advanced/cost-optimization/#1000-healing-attempts-cost-comparison","title":"1000 Healing Attempts Cost Comparison:","text":"Strategy DOM Success Rate Total Cost Savings vs Parallel <code>DOM_ONLY</code> 70% $20 $100 (83%) <code>SMART_SEQUENTIAL</code> 70% $50 $70 (58%) <code>SEQUENTIAL</code> 70% $50 $70 (58%) <code>VISUAL_FIRST</code> 70% $110 $10 (8%) <code>PARALLEL</code> 70% $120 $0 (0%)"},{"location":"advanced/cost-optimization/#assumptions","title":"Assumptions:","text":"<ul> <li>DOM analysis succeeds 70% of the time</li> <li>DOM cost: $0.02 per request</li> <li>Visual cost: $0.10 per request</li> <li>1000 healing attempts</li> </ul>"},{"location":"advanced/cost-optimization/#recommendations","title":"\ud83d\ude80 Recommendations","text":""},{"location":"advanced/cost-optimization/#for-most-users-default","title":"For Most Users (Default):","text":"<p><pre><code>.executionStrategy(ExecutionStrategy.SEQUENTIAL)\n</code></pre> - Best balance of cost and reliability - 50-60% cost savings vs parallel - DOM first (cheaper), visual as fallback</p>"},{"location":"advanced/cost-optimization/#for-budget-conscious-users","title":"For Budget-Conscious Users:","text":"<p><pre><code>.executionStrategy(ExecutionStrategy.DOM_ONLY)\n</code></pre> - 83% cost savings - Still very effective for most websites - Disable visual analysis entirely</p>"},{"location":"advanced/cost-optimization/#for-performance-critical-systems","title":"For Performance-Critical Systems:","text":"<p><pre><code>.executionStrategy(ExecutionStrategy.PARALLEL)\n</code></pre> - Fastest healing (parallel execution) - Highest reliability (multiple strategies) - Higher cost but maximum success rate</p>"},{"location":"advanced/cost-optimization/#for-visual-heavy-applications","title":"For Visual-Heavy Applications:","text":"<p><pre><code>.executionStrategy(ExecutionStrategy.VISUAL_FIRST)\n</code></pre> - Visual analysis first - Good for image-heavy or canvas-based apps - Higher cost but better for visual elements</p>"},{"location":"advanced/troubleshooting/","title":"Troubleshooting Guide","text":"<p>Common issues and solutions when using AutoHeal Locator.</p>"},{"location":"advanced/troubleshooting/#element-not-found-issues","title":"Element Not Found Issues","text":""},{"location":"advanced/troubleshooting/#problem-element-still-not-found-after-ai-healing","title":"Problem: Element still not found after AI healing","text":"<p>Symptoms: - <code>ElementNotFoundException</code> even with AI enabled - Error message: \"Element not found after all healing attempts\"</p> <p>Solutions:</p> <ol> <li> <p>Check AI Configuration <pre><code>// Verify API key is set\nAIConfig aiConfig = AIConfig.builder()\n    .apiKey(\"your-api-key\")  // Must be valid\n    .provider(AIProvider.OPENAI)\n    .build();\n</code></pre></p> </li> <li> <p>Enable Debug Logging <pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .enableDebugLogging(true)\n    .build();\n</code></pre></p> </li> <li> <p>Try Different Execution Strategy <pre><code>// Switch to visual-first for complex pages\nlocator = new AutoHealLocator.Builder()\n    .withExecutionStrategy(ExecutionStrategy.VISUAL_FIRST)\n    .build();\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#problem-intermittent-element-location-failures","title":"Problem: Intermittent element location failures","text":"<p>Solutions:</p> <ol> <li> <p>Increase Timeout <pre><code>locator.findElement(\"button\", Duration.ofSeconds(10));\n</code></pre></p> </li> <li> <p>Add Wait Conditions <pre><code>// Wait for page to stabilize\nThread.sleep(1000);\nWebElement element = locator.findElement(\"Submit button\");\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"advanced/troubleshooting/#problem-slow-element-location","title":"Problem: Slow element location","text":"<p>Symptoms: - High response times (&gt;5 seconds) - Frequent AI API calls</p> <p>Solutions:</p> <ol> <li> <p>Enable Caching <pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .cacheConfig(CacheConfig.builder()\n        .enableCaching(true)\n        .maxCacheSize(1000)\n        .build())\n    .build();\n</code></pre></p> </li> <li> <p>Use DOM_ONLY Strategy <pre><code>// For simple pages without layout changes\nlocator = new AutoHealLocator.Builder()\n    .withExecutionStrategy(ExecutionStrategy.DOM_ONLY)\n    .build();\n</code></pre></p> </li> <li> <p>Optimize Element Descriptions <pre><code>// Good: Specific and unique\nlocator.findElement(\"Blue Submit button in footer\");\n\n// Bad: Too generic\nlocator.findElement(\"button\");\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#ai-api-issues","title":"AI API Issues","text":""},{"location":"advanced/troubleshooting/#problem-api-rate-limits-or-errors","title":"Problem: API rate limits or errors","text":"<p>Symptoms: - <code>AIServiceException</code> with rate limit messages - HTTP 429 errors</p> <p>Solutions:</p> <ol> <li> <p>Configure Circuit Breaker <pre><code>AIConfig aiConfig = AIConfig.builder()\n    .circuitBreakerFailureThreshold(5)\n    .circuitBreakerRecoveryTimeout(Duration.ofMinutes(1))\n    .build();\n</code></pre></p> </li> <li> <p>Add Retry Logic <pre><code>PerformanceConfig perfConfig = PerformanceConfig.builder()\n    .maxRetries(3)\n    .retryDelay(Duration.ofSeconds(2))\n    .build();\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#problem-high-ai-costs","title":"Problem: High AI costs","text":"<p>Solutions:</p> <ol> <li> <p>Use SMART_SEQUENTIAL Strategy <pre><code>// Automatically optimizes AI usage\nlocator = new AutoHealLocator.Builder()\n    .withExecutionStrategy(ExecutionStrategy.SMART_SEQUENTIAL)\n    .build();\n</code></pre></p> </li> <li> <p>Enable Aggressive Caching <pre><code>CacheConfig cacheConfig = CacheConfig.builder()\n    .enableCaching(true)\n    .cacheTimeout(Duration.ofHours(24))  // Longer cache\n    .build();\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"advanced/troubleshooting/#problem-spring-boot-auto-configuration-not-working","title":"Problem: Spring Boot auto-configuration not working","text":"<p>Solutions:</p> <ol> <li> <p>Check Dependencies <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></p> </li> <li> <p>Verify Properties <pre><code>autoheal.ai.api-key=your-key\nautoheal.ai.provider=OPENAI\nautoheal.execution-strategy=SMART_SEQUENTIAL\n</code></pre></p> </li> <li> <p>Enable Auto-configuration <pre><code>@SpringBootApplication\n@EnableAutoHealConfiguration  // Add this annotation\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#debugging-tips","title":"Debugging Tips","text":""},{"location":"advanced/troubleshooting/#enable-detailed-logging","title":"Enable Detailed Logging","text":"<pre><code># application.properties\nlogging.level.com.autoheal=DEBUG\nlogging.level.com.autoheal.ai=TRACE\n</code></pre>"},{"location":"advanced/troubleshooting/#monitor-metrics","title":"Monitor Metrics","text":"<pre><code>LocatorMetrics metrics = locator.getMetrics();\nSystem.out.println(\"Success rate: \" + metrics.getSuccessRate());\nSystem.out.println(\"Average response time: \" + metrics.getAverageResponseTime());\nSystem.out.println(\"Cache hit rate: \" + metrics.getCacheHitRate());\n</code></pre>"},{"location":"advanced/troubleshooting/#capture-screenshots-on-failure","title":"Capture Screenshots on Failure","text":"<pre><code>try {\n    WebElement element = locator.findElement(\"button\");\n} catch (ElementNotFoundException e) {\n    // Capture screenshot for debugging\n    File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n    Files.copy(screenshot.toPath(), Paths.get(\"debug-screenshot.png\"));\n    throw e;\n}\n</code></pre>"},{"location":"advanced/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues:</p> <ol> <li>Check the logs for detailed error messages</li> <li>Enable debug mode to see internal operations</li> <li>Share configuration and error messages when seeking help</li> <li>Create minimal reproduction example</li> </ol> <p>For additional support, please create an issue on GitHub.</p>"},{"location":"contributing/development/","title":"Development Guide","text":"<p>Contributing to AutoHeal Locator development.</p>"},{"location":"contributing/development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 11 or higher</li> <li>Maven 3.6+</li> <li>Git</li> <li>IDE (IntelliJ IDEA recommended)</li> <li>OpenAI API key for testing</li> </ul>"},{"location":"contributing/development/#development-setup","title":"Development Setup","text":""},{"location":"contributing/development/#1-clone-and-setup","title":"1. Clone and Setup","text":"<pre><code>git clone https://github.com/yourusername/autoheal-locator.git\ncd autoheal-locator\n\n# Install dependencies\nmvn clean install\n</code></pre>"},{"location":"contributing/development/#2-ide-configuration","title":"2. IDE Configuration","text":"<p>IntelliJ IDEA: 1. Import as Maven project 2. Enable annotation processing 3. Install recommended plugins:    - Lombok    - SonarLint    - CheckStyle</p>"},{"location":"contributing/development/#3-environment-variables","title":"3. Environment Variables","text":"<p>Create <code>.env</code> file (not committed): <pre><code>OPENAI_API_KEY=your-test-api-key\nTEST_BROWSER=chrome\n</code></pre></p>"},{"location":"contributing/development/#project-structure","title":"Project Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 main/java/com/autoheal/\n\u2502   \u251c\u2500\u2500 core/                    # Core interfaces\n\u2502   \u251c\u2500\u2500 impl/                    # Implementations\n\u2502   \u251c\u2500\u2500 config/                  # Configuration classes\n\u2502   \u251c\u2500\u2500 model/                   # Data models\n\u2502   \u251c\u2500\u2500 exception/               # Custom exceptions\n\u2502   \u251c\u2500\u2500 monitoring/              # Metrics and health\n\u2502   \u2514\u2500\u2500 util/                    # Utilities\n\u251c\u2500\u2500 test/java/com/autoheal/\n\u2502   \u251c\u2500\u2500 unit/                    # Unit tests\n\u2502   \u251c\u2500\u2500 integration/             # Integration tests\n\u2502   \u2514\u2500\u2500 performance/             # Performance tests\n\u2514\u2500\u2500 test/resources/              # Test configurations\n</code></pre>"},{"location":"contributing/development/#coding-standards","title":"Coding Standards","text":""},{"location":"contributing/development/#code-style","title":"Code Style","text":"<p>We use Google Java Style with modifications:</p> <pre><code>&lt;!-- In pom.xml --&gt;\n&lt;plugin&gt;\n    &lt;groupId&gt;com.google.googlejavaformat&lt;/groupId&gt;\n    &lt;artifactId&gt;google-java-format-maven-plugin&lt;/artifactId&gt;\n    &lt;configuration&gt;\n        &lt;style&gt;GOOGLE&lt;/style&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Key Rules: - 2-space indentation - 100-character line limit - No wildcard imports - Use Optional for nullable returns - Builder pattern for complex objects</p>"},{"location":"contributing/development/#documentation","title":"Documentation","text":"<ul> <li>JavaDoc: Required for all public APIs</li> <li>README: Update for significant changes</li> <li>CHANGELOG: Document all changes</li> </ul> <p>Example JavaDoc: <pre><code>/**\n * Locates web elements using AI-powered healing strategies.\n *\n * @param description Natural language description of the element\n * @param fallbackSelector Optional CSS/XPath selector as fallback\n * @return Located WebElement\n * @throws ElementNotFoundException if element cannot be found\n * @throws AutoHealException if configuration or AI service issues occur\n */\npublic WebElement findElement(String description, String fallbackSelector) {\n    // Implementation\n}\n</code></pre></p>"},{"location":"contributing/development/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"contributing/development/#test-structure","title":"Test Structure","text":"<pre><code>@Test\n@DisplayName(\"Should find element using AI when CSS selector fails\")\nvoid shouldFindElementUsingAIWhenCSSSelectorFails() {\n    // Given\n    when(driver.findElement(By.cssSelector(\"#missing\"))).thenThrow(NoSuchElementException.class);\n    when(aiService.analyzeElement(any())).thenReturn(successfulResult);\n\n    // When\n    WebElement result = locator.findElement(\"Submit button\", \"#missing\");\n\n    // Then\n    assertThat(result).isNotNull();\n    verify(aiService).analyzeElement(any());\n}\n</code></pre>"},{"location":"contributing/development/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests: Fast, isolated, mocked dependencies</li> <li>Integration Tests: Test component interactions</li> <li>Performance Tests: Measure response times and costs</li> </ol>"},{"location":"contributing/development/#running-tests","title":"Running Tests","text":"<pre><code># All tests\nmvn test\n\n# Unit tests only\nmvn test -Dtest=\"*Test\"\n\n# Integration tests only\nmvn test -Dtest=\"*IntegrationTest\"\n\n# With coverage\nmvn test jacoco:report\n</code></pre>"},{"location":"contributing/development/#test-data","title":"Test Data","text":"<p>Use test builders for complex objects: <pre><code>public class LocatorRequestBuilder {\n    public static LocatorRequest.Builder aLocatorRequest() {\n        return LocatorRequest.builder()\n            .description(\"Test element\")\n            .pageUrl(\"http://example.com\")\n            .elementType(ElementType.BUTTON);\n    }\n}\n</code></pre></p>"},{"location":"contributing/development/#making-changes","title":"Making Changes","text":""},{"location":"contributing/development/#1-branch-strategy","title":"1. Branch Strategy","text":"<ul> <li><code>main</code>: Stable release branch</li> <li><code>develop</code>: Integration branch</li> <li><code>feature/description</code>: Feature branches</li> <li><code>hotfix/description</code>: Critical fixes</li> </ul>"},{"location":"contributing/development/#2-development-workflow","title":"2. Development Workflow","text":"<pre><code># Create feature branch\ngit checkout -b feature/ai-provider-support\n\n# Make changes and test\nmvn test\n\n# Commit with conventional commits\ngit commit -m \"feat: add Azure OpenAI provider support\"\n\n# Push and create PR\ngit push origin feature/ai-provider-support\n</code></pre>"},{"location":"contributing/development/#3-commit-messages","title":"3. Commit Messages","text":"<p>Use Conventional Commits:</p> <pre><code>type(scope): description\n\nfeat(ai): add support for Azure OpenAI\nfix(cache): resolve memory leak in selector cache\ndocs(readme): update installation instructions\ntest(integration): add tests for new AI provider\n</code></pre>"},{"location":"contributing/development/#performance-considerations","title":"Performance Considerations","text":""},{"location":"contributing/development/#profiling","title":"Profiling","text":"<p>Use JProfiler or async-profiler: <pre><code># Add to JVM args\n-javaagent:async-profiler.jar=start,event=cpu,file=profile.html\n</code></pre></p>"},{"location":"contributing/development/#benchmarking","title":"Benchmarking","text":"<p>We use JMH for performance tests: <pre><code>@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.MILLISECONDS)\n@State(Scope.Benchmark)\npublic class LocatorBenchmark {\n\n    @Benchmark\n    public WebElement findElementWithCache() {\n        return locator.findElement(\"Submit button\");\n    }\n}\n</code></pre></p>"},{"location":"contributing/development/#memory-testing","title":"Memory Testing","text":"<pre><code># Heap dump analysis\njmap -dump:live,format=b,file=heap.hprof &lt;pid&gt;\n\n# GC monitoring\njava -XX:+PrintGCDetails -XX:+PrintGCTimeStamps YourTest\n</code></pre>"},{"location":"contributing/development/#release-process","title":"Release Process","text":""},{"location":"contributing/development/#1-version-management","title":"1. Version Management","text":"<p>We use Semantic Versioning: - MAJOR: Breaking API changes - MINOR: New features, backwards compatible - PATCH: Bug fixes</p>"},{"location":"contributing/development/#2-release-checklist","title":"2. Release Checklist","text":"<ul> <li>[ ] All tests passing</li> <li>[ ] Documentation updated</li> <li>[ ] CHANGELOG.md updated</li> <li>[ ] Version bumped in pom.xml</li> <li>[ ] Performance regression tests pass</li> <li>[ ] Security scan clean</li> </ul>"},{"location":"contributing/development/#3-maven-release","title":"3. Maven Release","text":"<pre><code># Prepare release\nmvn release:prepare\n\n# Perform release\nmvn release:perform\n\n# Deploy to Central\nmvn deploy -P release\n</code></pre>"},{"location":"contributing/development/#debugging-tips","title":"Debugging Tips","text":""},{"location":"contributing/development/#1-enable-debug-logging","title":"1. Enable Debug Logging","text":"<pre><code>logging.level.com.autoheal=DEBUG\nlogging.level.com.autoheal.ai=TRACE\n</code></pre>"},{"location":"contributing/development/#2-local-ai-service-testing","title":"2. Local AI Service Testing","text":"<pre><code>// Mock AI service for testing\n@TestConfiguration\npublic class TestAIConfig {\n    @Bean\n    @Primary\n    public AIService mockAIService() {\n        return Mockito.mock(AIService.class);\n    }\n}\n</code></pre>"},{"location":"contributing/development/#3-browser-debugging","title":"3. Browser Debugging","text":"<pre><code>// Keep browser open for inspection\nChromeOptions options = new ChromeOptions();\noptions.addArguments(\"--remote-debugging-port=9222\");\nWebDriver driver = new ChromeDriver(options);\n</code></pre>"},{"location":"contributing/development/#getting-help","title":"Getting Help","text":"<ul> <li>Slack: #autoheal-dev</li> <li>Email: dev@autoheal.com</li> <li>Issues: GitHub Issues for bugs</li> <li>Discussions: GitHub Discussions for questions</li> </ul>"},{"location":"contributing/development/#code-review-guidelines","title":"Code Review Guidelines","text":""},{"location":"contributing/development/#what-to-review","title":"What to Review","text":"<ul> <li>[ ] Functionality correctness</li> <li>[ ] Performance impact</li> <li>[ ] Security considerations</li> <li>[ ] Test coverage</li> <li>[ ] Documentation quality</li> <li>[ ] Code style compliance</li> </ul>"},{"location":"contributing/development/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass</li> <li>At least one approving review required</li> <li>Performance tests for significant changes</li> <li>Security review for API changes</li> </ol> <p>Thank you for contributing to AutoHeal Locator! \ud83c\udf89</p>"},{"location":"user-guide/","title":"AutoHeal Locator - User Guide","text":""},{"location":"user-guide/#introduction","title":"\ud83d\ude80 Introduction","text":"<p>AutoHeal Locator is an intelligent web automation library that automatically fixes broken selectors using AI-powered analysis. When your test selectors break due to DOM changes, AutoHeal uses advanced AI models to find the correct elements and keep your tests running.</p>"},{"location":"user-guide/#key-benefits","title":"Key Benefits","text":"<p>\u2705 Self-Healing Tests: Automatically fixes broken selectors using AI-powered analysis \u2705 Universal Selector Support: Works with CSS, XPath, ID, Name, Link Text, and more \u2705 Framework Agnostic: Integrates with Selenium, Playwright, Spring Boot, and other frameworks \u2705 Smart Element Detection: Uses AI models to disambiguate between similar elements \u2705 Comprehensive Reporting: Tracks all healing activities with detailed reports \u2705 Zero Learning Curve: Drop-in replacement for existing <code>findElement()</code> calls \u2705 Parallel Test Ready: Thread-safe design supports concurrent test execution</p>"},{"location":"user-guide/#real-world-example","title":"Real-World Example","text":"<pre><code>// Before AutoHeal - Breaks when DOM changes\nWebElement loginButton = driver.findElement(By.id(\"login-btn-v2\"));\n\n// With AutoHeal - Any locator type works and self-heals\nWebElement loginButton = autoHeal.findElement(\"login-btn-v2\", \"login button on homepage\");\n// \u2705 Works with CSS (#login-btn), XPath (//button[@id='login']), ID, Name, Link Text, etc.\n// \u2705 Automatically detects locator type - no need to specify By.id() or By.xpath()\n// \u2705 AI understands \"login button\" context and finds the right element\n// \u2705 Smart disambiguation when multiple elements match the same locator\n</code></pre>"},{"location":"user-guide/#universal-locator-support-use-any-selector-type","title":"Universal Locator Support - Use Any Selector Type","text":"<p>AutoHeal automatically detects and works with all major locator types without requiring explicit <code>By</code> objects:</p> <pre><code>// \u2705 All these work the same way - AutoHeal detects the type automatically\nautoHeal.findElement(\"#username\", \"username input field\");           // CSS Selector\nautoHeal.findElement(\"//button[@type='submit']\", \"submit button\");   // XPath\nautoHeal.findElement(\"email\", \"email input field\");                  // ID or Name\nautoHeal.findElement(\"Sign In\", \"login link\");                       // Link Text\nautoHeal.findElement(\"button\", \"any button element\");                // Tag Name\nautoHeal.findElement(\"btn-primary\", \"primary button\");               // Class Name\n</code></pre>"},{"location":"user-guide/#how-autoheal-works-intelligent-decision-flow","title":"How AutoHeal Works - Intelligent Decision Flow","text":"<p>AutoHeal follows a smart, multi-layered approach to find elements reliably:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                          \ud83e\udde0 AutoHeal Decision Flow                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    \ud83d\udcdd User Request: autoHeal.findElement(\"#login-btn\", \"login button\")\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Step 1: \ud83c\udfaf Try Original Locator First                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 SUCCESS? \u2705 Element Found \u2192 Return immediately (fastest path)       \u2502    \u2502\n\u2502  \u2502 FAILURE? \u274c Element not found \u2192 Continue to Step 2                 \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Step 2: \ud83d\udd04 Check Cache for Previous Success                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 Cache Key: \"login-btn-login button\"                                \u2502    \u2502\n\u2502  \u2502 CACHE HIT? \u2705 Use cached selector \u2192 Return (very fast)            \u2502    \u2502\n\u2502  \u2502 CACHE MISS? \u274c No previous success \u2192 Continue to Step 3           \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Step 3: \ud83e\udd16 AI Strategy Selection                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 Configuration: HYBRID Strategy                                      \u2502    \u2502\n\u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502    \u2502\n\u2502  \u2502 \u2502   \ud83d\udd0d DOM Only   \u2502    \u2502         \ud83d\uddbc\ufe0f Visual Analysis             \u2502 \u2502    \u2502\n\u2502  \u2502 \u2502   \u2022 Fastest     \u2502    \u2502         \u2022 Most Accurate                \u2502 \u2502    \u2502\n\u2502  \u2502 \u2502   \u2022 Cheapest    \u2502    \u2502         \u2022 Works with Complex UI        \u2502 \u2502    \u2502\n\u2502  \u2502 \u2502   \u2022 HTML Analysis\u2502    \u2502         \u2022 Screenshot Analysis          \u2502 \u2502    \u2502\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502    \u2502\n\u2502  \u2502              \u2502                               \u2502                     \u2502    \u2502\n\u2502  \u2502              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502    \u2502\n\u2502  \u2502                        \u25bc                                          \u2502    \u2502\n\u2502  \u2502           \ud83c\udfaf Try DOM First \u2192 Success? Return                      \u2502    \u2502\n\u2502  \u2502                        \u2502                                          \u2502    \u2502\n\u2502  \u2502                      Failure?                                     \u2502    \u2502\n\u2502  \u2502                        \u2502                                          \u2502    \u2502\n\u2502  \u2502                        \u25bc                                          \u2502    \u2502\n\u2502  \u2502           \ud83d\uddbc\ufe0f Try Visual Analysis \u2192 Success? Return               \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Step 4: \ud83e\udde0 AI Processing                                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 DOM Analysis:                                                       \u2502    \u2502\n\u2502  \u2502 \u2022 Parse HTML structure                                              \u2502    \u2502\n\u2502  \u2502 \u2022 Understand \"login button\" context                                \u2502    \u2502\n\u2502  \u2502 \u2022 Find matching elements                                           \u2502    \u2502\n\u2502  \u2502 \u2022 Multiple matches? \u2192 Use description for disambiguation           \u2502    \u2502\n\u2502  \u2502                                                                     \u2502    \u2502\n\u2502  \u2502 Visual Analysis (if needed):                                       \u2502    \u2502\n\u2502  \u2502 \u2022 Take screenshot                                                  \u2502    \u2502\n\u2502  \u2502 \u2022 AI vision identifies \"login button\"                             \u2502    \u2502\n\u2502  \u2502 \u2022 Map visual element to DOM selector                               \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Step 5: \u2705 Success &amp; Learning                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 \u2022 Return WebElement to user                                         \u2502    \u2502\n\u2502  \u2502 \u2022 \ud83d\udcbe Cache successful selector for next time                       \u2502    \u2502\n\u2502  \u2502 \u2022 \ud83d\udcca Update metrics and confidence scores                          \u2502    \u2502\n\u2502  \u2502 \u2022 \ud83d\udcdd Log healing activity for reporting                            \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        \u2502\n                                        \u25bc\n                    \ud83c\udf89 Element found and returned to user!\n</code></pre>"},{"location":"user-guide/#smart-element-disambiguation","title":"Smart Element Disambiguation","text":"<p>When multiple elements match the same locator, AutoHeal's AI intelligently selects the correct one:</p> <pre><code>// Example: Page has multiple \"Submit\" buttons\nWebElement submitOrder = autoHeal.findElement(\"Submit\", \"submit order button in checkout form\");\nWebElement submitReview = autoHeal.findElement(\"Submit\", \"submit review button in feedback section\");\n\n// \u2705 AI uses the description context to find the right \"Submit\" button\n// \u2705 \"checkout form\" context \u2192 finds the order submission button\n// \u2705 \"feedback section\" context \u2192 finds the review submission button\n// \u2705 No manual disambiguation needed - AI handles it automatically\n</code></pre>"},{"location":"user-guide/#why-this-approach-works","title":"Why This Approach Works","text":"<ol> <li>\u26a1 Fast Path: Most requests succeed immediately with original locator</li> <li>\ud83d\udd04 Smart Caching: Previously healed selectors work instantly</li> <li>\ud83e\udde0 AI Fallback: Only use expensive AI when needed</li> <li>\ud83d\udcc8 Learning: System gets smarter and faster over time</li> <li>\ud83d\udcb0 Cost Effective: Minimize AI API calls through intelligent caching</li> </ol>"},{"location":"user-guide/#installation-setup","title":"\ud83d\udce6 Installation &amp; Setup","text":""},{"location":"user-guide/#maven-dependency","title":"Maven Dependency","text":"<p>Option 1: Maven Central (Coming Soon) <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.example&lt;/groupId&gt;\n    &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>Option 2: Build from Source (Latest Features) <pre><code># Clone and build locally\ngit clone https://github.com/your-org/autoheal-locator.git\ncd autoheal-locator\nmvn clean install\n</code></pre></p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.example&lt;/groupId&gt;\n    &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"user-guide/#basic-configuration","title":"Basic Configuration","text":"<p>Option 1: Basic Setup <pre><code>// Set your AI provider API key\nSystem.setProperty(\"OPENAI_API_KEY\", \"your-api-key-here\");\n\n// Initialize AutoHeal with Selenium\nWebDriver driver = new ChromeDriver();\nAutoHealLocator autoHeal = AutoHealLocator.builder()\n    .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n    .build();\n</code></pre></p> <p>Option 2: Spring Boot Auto-Configuration <pre><code>@SpringBootTest\npublic class MyTest {\n\n    @Autowired\n    private AutoHealLocator autoHeal;  // Automatically configured!\n\n    @Autowired\n    private WebDriver webDriver;       // Auto-configured WebDriver\n\n    @Test\n    void testWithAutoHeal() {\n        WebElement element = autoHeal.findElement(\"#login\", \"login button\");\n        element.click();\n    }\n}\n</code></pre></p> <p>\ud83d\udcda See complete Spring Boot setup in Spring Boot Integration Guide</p>"},{"location":"user-guide/#quick-start","title":"\ud83d\udee0\ufe0f Quick Start","text":""},{"location":"user-guide/#universal-selector-support","title":"Universal Selector Support","text":"<p>AutoHeal automatically detects and supports all major selector types:</p> <pre><code>// CSS Selectors - Single and Multiple Elements\nautoHeal.findElement(\"#username\", \"username input field\");\nautoHeal.findElement(\".btn-primary\", \"primary submit button\");\nautoHeal.findElement(\"input[name='email']\", \"email input field\");\n\n// Multiple elements with same selector\nList&lt;WebElement&gt; allButtons = autoHeal.findElements(\".btn-primary\", \"all primary buttons on page\");\nList&lt;WebElement&gt; allInputs = autoHeal.findElements(\"input\", \"all input fields\");\n\n// XPath - Single and Multiple\nautoHeal.findElement(\"//button[text()='Login']\", \"login button\");\nautoHeal.findElement(\"//input[@placeholder='Enter email']\", \"email field\");\nList&lt;WebElement&gt; allRows = autoHeal.findElements(\"//table//tr\", \"all table rows\");\n\n// ID, Name, Class\nautoHeal.findElement(\"user-email\", \"email input by ID\");\nautoHeal.findElement(\"username\", \"username field by name attribute\");\nList&lt;WebElement&gt; menuItems = autoHeal.findElements(\".menu-item\", \"navigation menu items\");\n\n// Link Text\nautoHeal.findElement(\"Sign Up Here\", \"registration link\");\nautoHeal.findElement(\"Forgot Password?\", \"password reset link\");\nList&lt;WebElement&gt; allLinks = autoHeal.findElements(\"a\", \"all links on page\");\n\n// Tag Names\nautoHeal.findElement(\"button\", \"any button element\");\nList&lt;WebElement&gt; allButtons = autoHeal.findElements(\"button\", \"all button elements\");\n</code></pre>"},{"location":"user-guide/#complete-api-overview","title":"Complete API Overview","text":"<pre><code>// Single Element Methods\nWebElement element = autoHeal.findElement(selector, description);                    // Synchronous\nCompletableFuture&lt;WebElement&gt; future = autoHeal.findElementAsync(selector, desc);   // Asynchronous\n\n// Multiple Elements Methods\nList&lt;WebElement&gt; elements = autoHeal.findElements(selector, description);           // Synchronous \u2728 NEW\nCompletableFuture&lt;List&lt;WebElement&gt;&gt; futureList = autoHeal.findElementsAsync(selector, desc); // Asynchronous\n\n// Utility Methods\nboolean exists = autoHeal.isElementPresentAsync(selector, description).join();      // Check existence\n</code></pre>"},{"location":"user-guide/#usage-patterns","title":"\ud83d\udccb Usage Patterns","text":""},{"location":"user-guide/#1-normal-test-script","title":"1. Normal Test Script","text":"<pre><code>public class LoginTest {\n    private WebDriver driver;\n    private AutoHealLocator autoHeal;\n\n    @BeforeEach\n    void setUp() {\n        driver = new ChromeDriver();\n        autoHeal = AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(AutoHealConfiguration.builder()\n                .ai(AIConfig.builder()\n                    .provider(AIProvider.OPENAI)\n                    .apiKey(System.getProperty(\"OPENAI_API_KEY\"))\n                    .build())\n                .build())\n            .build();\n    }\n\n    @Test\n    void testLogin() {\n        driver.get(\"https://example.com/login\");\n\n        // AutoHeal finds elements even if selectors break\n        WebElement usernameField = autoHeal.findElement(\"#username\", \"username input field\");\n        usernameField.sendKeys(\"testuser\");\n\n        WebElement passwordField = autoHeal.findElement(\"#password\", \"password input field\");\n        passwordField.sendKeys(\"password123\");\n\n        WebElement loginButton = autoHeal.findElement(\"//button[@type='submit']\", \"login submit button\");\n        loginButton.click();\n\n        // Verify login success\n        WebElement dashboard = autoHeal.findElement(\".dashboard-header\", \"dashboard header after login\");\n        assertTrue(dashboard.isDisplayed());\n    }\n\n    @AfterEach\n    void tearDown() {\n        autoHeal.shutdown(); // Generate healing reports\n        driver.quit();\n    }\n}\n</code></pre>"},{"location":"user-guide/#2-page-object-model-recommended-pattern","title":"2. Page Object Model - Recommended Pattern","text":"<p>AutoHeal works best with the Pure AutoHeal Pattern - combining Page Factory organization with full healing capabilities:</p> <pre><code>// Base Page with AutoHeal integration\npublic abstract class BasePage {\n    protected WebDriver driver;\n    protected AutoHealLocator autoHeal;\n\n    public BasePage(WebDriver driver, AutoHealLocator autoHeal) {\n        this.driver = driver;\n        this.autoHeal = autoHeal;\n    }\n\n    protected WebElement findElement(String selector, String description) {\n        return autoHeal.findElement(selector, description);\n    }\n\n    protected List&lt;WebElement&gt; findElements(String selector, String description) {\n        return autoHeal.findElements(selector, description);\n    }\n}\n\n// Login Page - Pure AutoHeal Pattern (Recommended)\npublic class LoginPage extends BasePage {\n\n    // Locator constants (Page Factory-inspired organization)\n    private static final String USERNAME_FIELD = \"#username\";\n    private static final String PASSWORD_FIELD = \"#password\";\n    private static final String LOGIN_BUTTON = \"Sign In\";\n    private static final String ERROR_MESSAGE = \".error-message\";\n\n    // Description constants for better healing\n    private static final String USERNAME_DESC = \"username input field on login page\";\n    private static final String PASSWORD_DESC = \"password input field on login page\";\n    private static final String LOGIN_BTN_DESC = \"login submit button on login page\";\n    private static final String ERROR_DESC = \"error message display on login page\";\n\n    public LoginPage(WebDriver driver, AutoHealLocator autoHeal) {\n        super(driver, autoHeal);\n    }\n\n    public void enterUsername(String username) {\n        WebElement field = findElement(USERNAME_FIELD, USERNAME_DESC);\n        field.clear();\n        field.sendKeys(username);\n    }\n\n    public void enterPassword(String password) {\n        WebElement field = findElement(PASSWORD_FIELD, PASSWORD_DESC);\n        field.clear();\n        field.sendKeys(password);\n    }\n\n    public HomePage clickLogin() {\n        WebElement button = findElement(LOGIN_BUTTON, LOGIN_BTN_DESC);\n        button.click();\n        return new HomePage(driver, autoHeal);\n    }\n\n    public String getErrorMessage() {\n        try {\n            return findElement(ERROR_MESSAGE, ERROR_DESC).getText();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}\n</code></pre> <p>\u2705 Why This Pattern Works Best: - Page Factory familiarity with locator constants - Full AutoHeal healing capabilities - Clean organization and maintainability - No @FindBy limitations - dynamic runtime healing</p> <p>\ud83d\udcda See detailed comparison of Page Factory vs AutoHeal patterns in Page Object Examples</p> <p>// Home Page public class HomePage extends BasePage {</p> <pre><code>public HomePage(WebDriver driver, AutoHealLocator autoHeal) {\n    super(driver, autoHeal);\n}\n\npublic void navigateToProfile() {\n    WebElement profileMenu = findElement(\".profile-dropdown\", \"profile menu in header\");\n    profileMenu.click();\n\n    WebElement profileLink = findElement(\"View Profile\", \"profile link in dropdown menu\");\n    profileLink.click();\n}\n\npublic List&lt;WebElement&gt; getNavigationItems() {\n    return autoHeal.findElementsAsync(\".nav-item\", \"navigation menu items\")\n        .join(); // Convert CompletableFuture to List\n}\n</code></pre> <p>}</p> <p>// Test using Page Objects public class PageObjectTest {</p> <pre><code>@Test\nvoid testLoginWithPageObjects() {\n    WebDriver driver = new ChromeDriver();\n    AutoHealLocator autoHeal = AutoHealLocator.builder()\n        .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n        .build();\n\n    driver.get(\"https://example.com/login\");\n\n    LoginPage loginPage = new LoginPage(driver, autoHeal);\n    loginPage.enterUsername(\"user@example.com\");\n    loginPage.enterPassword(\"password123\");\n\n    HomePage homePage = loginPage.clickLogin();\n    homePage.navigateToProfile();\n\n    autoHeal.shutdown();\n    driver.quit();\n}\n</code></pre> <p>} ``` </p>"},{"location":"user-guide/#3-cucumber-integration","title":"3. Cucumber Integration","text":"<p><code>java // Step Definitions public class LoginSteps {     private WebDriver driver;     private AutoHealLocator autoHeal;     private LoginPage loginPage;      @Before     public void setUp() {         driver = new ChromeDriver();         autoHeal = AutoHealLocator.builder()             .withWebAdapter(new SeleniumWebAutomationAdapter(driver))             .withConfiguration(AutoHealConfiguration.builder()                 .reporting(ReportingConfig.builder()                     .enabled(true)                     .generateHTML(true)                     .reportNamePrefix(\"Cucumber_AutoHeal\")                     .build())                 .build())             .build();         loginPage = new LoginPage(driver, autoHeal);     }      @Given(\"I am on the login page\")     public void i_am_on_the_login_page() {         driver.get(\"https://example.com/login\");     }      @When(\"I enter username {string}\")     public void i_enter_username(String username) {         loginPage.enterUsername(username);     }      @When(\"I enter password {string}\")     public void i_enter_password(String password) {         loginPage.enterPassword(password);     }      @When(\"I click the login button\")     public void i_click_the_login_button() {         loginPage.clickLogin();     }      @Then(\"I should be logged in successfully\")     public void i_should_be_logged_in_successfully() {         WebElement dashboard = autoHeal.findElement(\".dashboard\", \"main dashboard after login\");         assertTrue(dashboard.isDisplayed());     }      @Then(\"I should see an error message\")     public void i_should_see_an_error_message() {         assertTrue(loginPage.isLoginErrorDisplayed());     }      @After     public void tearDown() {         if (autoHeal != null) {             autoHeal.shutdown(); // Generates Cucumber healing reports         }         if (driver != null) {             driver.quit();         }     } }</code></p> <pre><code># login.feature\nFeature: User Login\n  As a user\n  I want to login to the application\n  So that I can access my dashboard\n\n  Scenario: Successful login\n    Given I am on the login page\n    When I enter username \"user@example.com\"\n    And I enter password \"validpassword\"\n    And I click the login button\n    Then I should be logged in successfully\n\n  Scenario: Failed login\n    Given I am on the login page\n    When I enter username \"user@example.com\"\n    And I enter password \"wrongpassword\"\n    And I click the login button\n    Then I should see an error message\n</code></pre>"},{"location":"user-guide/#ai-configuration","title":"\u2699\ufe0f AI Configuration","text":""},{"location":"user-guide/#openai-configuration","title":"OpenAI Configuration","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .apiKey(\"sk-proj-your-openai-api-key\")\n        .model(\"gpt-4o-mini\")  // Cost-effective model\n        .timeout(Duration.ofSeconds(30))\n        .maxRetries(3)\n        .visualAnalysisEnabled(true)\n        .build())\n    .build();\n</code></pre> <p>Get OpenAI API Key: 1. Visit OpenAI API Keys 2. Sign up or login to your account 3. Click \"Create new secret key\" 4. Copy the key and set it in your configuration</p>"},{"location":"user-guide/#gemini-configuration","title":"Gemini Configuration","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.GEMINI)\n        .apiKey(\"your-gemini-api-key\")\n        .model(\"gemini-1.5-pro\")\n        .timeout(Duration.ofSeconds(45))\n        .maxRetries(2)\n        .visualAnalysisEnabled(false)  // Gemini doesn't support vision yet\n        .build())\n    .build();\n</code></pre> <p>Get Gemini API Key: 1. Visit Google AI Studio 2. Sign in with your Google account 3. Click \"Create API key\" 4. Copy the key for your configuration</p>"},{"location":"user-guide/#local-llm-configuration","title":"Local LLM Configuration","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.LOCAL_LLM)\n        .apiUrl(\"http://localhost:11434/v1/chat/completions\")  // Ollama endpoint\n        .model(\"llama3.1:8b\")\n        .timeout(Duration.ofSeconds(60))\n        .maxRetries(1)\n        .visualAnalysisEnabled(false)\n        .build())\n    .build();\n</code></pre> <p>Setup Local LLM (Ollama): 1. Install Ollama 2. Pull a model: <code>ollama pull llama3.1:8b</code> 3. Start server: <code>ollama serve</code> 4. Configure AutoHeal to use local endpoint</p>"},{"location":"user-guide/#mock-ai-testing","title":"Mock AI (Testing)","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.MOCK)\n        .build())\n    .build();\n\n// Add mock responses for testing\nMockAIService mockAI = (MockAIService) autoHeal.getAIService();\nmockAI.addMockResponse(\"login button\", \"#signin-btn\", 0.95);\n</code></pre>"},{"location":"user-guide/#common-usage-examples","title":"\ud83c\udfaf Common Usage Examples","text":""},{"location":"user-guide/#form-interactions","title":"Form Interactions","text":"<pre><code>// Text inputs\nWebElement nameField = autoHeal.findElement(\"firstName\", \"first name input field\");\nnameField.sendKeys(\"John Doe\");\n\n// Email input with validation\nWebElement emailField = autoHeal.findElement(\"//input[@type='email']\", \"email address input\");\nemailField.sendKeys(\"john@example.com\");\n\n// Password fields\nWebElement passwordField = autoHeal.findElement(\"#new-password\", \"new password creation field\");\npasswordField.sendKeys(\"SecurePass123!\");\n\n// Textarea\nWebElement commentBox = autoHeal.findElement(\"textarea[name='comments']\", \"comments textarea\");\ncommentBox.sendKeys(\"This is my feedback...\");\n</code></pre>"},{"location":"user-guide/#checkbox-and-radio-buttons","title":"Checkbox and Radio Buttons","text":"<pre><code>// Checkbox\nWebElement agreeCheckbox = autoHeal.findElement(\"//input[@name='terms']\", \"terms and conditions checkbox\");\nif (!agreeCheckbox.isSelected()) {\n    agreeCheckbox.click();\n}\n\n// Radio buttons\nWebElement maleRadio = autoHeal.findElement(\"input[value='male']\", \"male gender radio button\");\nmaleRadio.click();\n\nWebElement femaleRadio = autoHeal.findElement(\"input[value='female']\", \"female gender radio button\");\nfemaleRadio.click();\n\n// Verify radio selection\nWebElement selectedGender = autoHeal.findElement(\"input[name='gender']:checked\", \"selected gender option\");\nString genderValue = selectedGender.getAttribute(\"value\");\n</code></pre>"},{"location":"user-guide/#dropdowns-and-select-elements","title":"Dropdowns and Select Elements","text":"<pre><code>// Standard HTML Select\nWebElement countrySelect = autoHeal.findElement(\"select[name='country']\", \"country selection dropdown\");\nSelect selectCountry = new Select(countrySelect);\nselectCountry.selectByVisibleText(\"United States\");\nselectCountry.selectByValue(\"US\");\nselectCountry.selectByIndex(1);\n\n// Custom dropdown (div-based)\nWebElement customDropdown = autoHeal.findElement(\".custom-dropdown\", \"custom dropdown trigger\");\ncustomDropdown.click();\nWebElement option = autoHeal.findElement(\"//div[@data-value='option1']\", \"first option in custom dropdown\");\noption.click();\n\n// Multi-select\nWebElement multiSelect = autoHeal.findElement(\"select[multiple]\", \"multiple selection dropdown\");\nSelect multi = new Select(multiSelect);\nmulti.selectByVisibleText(\"Option 1\");\nmulti.selectByVisibleText(\"Option 2\");\nmulti.selectByVisibleText(\"Option 3\");\n</code></pre>"},{"location":"user-guide/#file-upload","title":"File Upload","text":"<pre><code>// File input\nWebElement fileInput = autoHeal.findElement(\"input[type='file']\", \"file upload input\");\nfileInput.sendKeys(\"/path/to/your/file.pdf\");\n\n// Drag and drop file upload\nWebElement dropZone = autoHeal.findElement(\".drop-zone\", \"drag and drop file area\");\n// Use Actions class for drag and drop\nActions actions = new Actions(driver);\n// Implementation depends on your specific drag-drop component\n</code></pre>"},{"location":"user-guide/#buttons-and-links","title":"Buttons and Links","text":"<pre><code>// Submit buttons\nWebElement submitBtn = autoHeal.findElement(\"//button[@type='submit']\", \"form submit button\");\nsubmitBtn.click();\n\n// Link navigation\nWebElement homeLink = autoHeal.findElement(\"Home\", \"homepage navigation link\");\nhomeLink.click();\n\n// Button with icon\nWebElement saveBtn = autoHeal.findElement(\".save-button\", \"save document button with icon\");\nsaveBtn.click();\n\n// Disabled button check\nWebElement processBtn = autoHeal.findElement(\"#process-btn\", \"process data button\");\nboolean isEnabled = processBtn.isEnabled();\nif (isEnabled) {\n    processBtn.click();\n}\n</code></pre>"},{"location":"user-guide/#tables-and-lists","title":"Tables and Lists","text":"<pre><code>// Table rows - Synchronous (simple and direct)\nList&lt;WebElement&gt; tableRows = autoHeal.findElements(\"//table//tr\", \"all table rows\");\nfor (WebElement row : tableRows) {\n    List&lt;WebElement&gt; cells = row.findElements(By.tagName(\"td\"));\n    // Process each cell\n}\n\n// Table rows - Asynchronous (for better performance)\nList&lt;WebElement&gt; asyncRows = autoHeal.findElementsAsync(\"//table//tr\", \"all table rows\").join();\n\n// Specific table cell\nWebElement priceCell = autoHeal.findElement(\"//tr[td='Product A']//td[@class='price']\", \"price cell for Product A\");\nString price = priceCell.getText();\n\n// List items - Multiple ways to get them\nList&lt;WebElement&gt; menuItems = autoHeal.findElements(\".menu-item\", \"navigation menu items\");\nfor (WebElement item : menuItems) {\n    System.out.println(\"Menu: \" + item.getText());\n}\n\n// Form inputs\nList&lt;WebElement&gt; formInputs = autoHeal.findElements(\"input\", \"all input fields in registration form\");\nfor (WebElement input : formInputs) {\n    if (input.getAttribute(\"required\") != null) {\n        System.out.println(\"Required field: \" + input.getAttribute(\"name\"));\n    }\n}\n\n// Product cards in search results\nList&lt;WebElement&gt; products = autoHeal.findElements(\".product-card\", \"product cards on search results page\");\nSystem.out.println(\"Found \" + products.size() + \" products\");\n\n// Navigation links\nList&lt;WebElement&gt; navLinks = autoHeal.findElements(\".nav-link\", \"navigation menu links in header\");\nnavLinks.get(2).click(); // Click third navigation item\n\n// Dynamic list filtering\nWebElement searchBox = autoHeal.findElement(\"#search\", \"search input for filtering list\");\nsearchBox.sendKeys(\"filter term\");\nList&lt;WebElement&gt; searchResults = autoHeal.findElements(\".search-result\", \"filtered search result items\");\nif (!searchResults.isEmpty()) {\n    searchResults.get(0).click(); // Click first result\n}\n</code></pre>"},{"location":"user-guide/#alerts-and-confirmations","title":"Alerts and Confirmations","text":"<pre><code>// Trigger alert\nWebElement deleteBtn = autoHeal.findElement(\".delete-button\", \"delete item button\");\ndeleteBtn.click();\n\n// Handle JavaScript alert\nWebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\nAlert alert = wait.until(ExpectedConditions.alertIsPresent());\nString alertText = alert.getText();\nalert.accept(); // or alert.dismiss() for cancel\n\n// Confirmation dialog\nWebElement confirmBtn = autoHeal.findElement(\"//button[text()='Confirm']\", \"confirmation dialog confirm button\");\nconfirmBtn.click();\n\n// Custom modal dialog\nWebElement modalOkBtn = autoHeal.findElement(\".modal .btn-primary\", \"OK button in modal dialog\");\nmodalOkBtn.click();\n</code></pre>"},{"location":"user-guide/#window-and-tab-handling","title":"Window and Tab Handling","text":"<pre><code>// Open new tab/window\nString originalWindow = driver.getWindowHandle();\nWebElement newTabLink = autoHeal.findElement(\"//a[@target='_blank']\", \"open in new tab link\");\nnewTabLink.click();\n\n// Switch to new window\nSet&lt;String&gt; allWindows = driver.getWindowHandles();\nfor (String windowHandle : allWindows) {\n    if (!windowHandle.equals(originalWindow)) {\n        driver.switchTo().window(windowHandle);\n        break;\n    }\n}\n\n// Work in new window\nWebElement newWindowElement = autoHeal.findElement(\"#new-window-content\", \"content in new window\");\nnewWindowElement.click();\n\n// Close new window and switch back\ndriver.close();\ndriver.switchTo().window(originalWindow);\n\n// Frame switching\nWebElement frame = autoHeal.findElement(\"#myframe\", \"iframe containing form\");\ndriver.switchTo().frame(frame);\nWebElement frameContent = autoHeal.findElement(\".frame-content\", \"content inside iframe\");\nframeContent.click();\ndriver.switchTo().defaultContent(); // Switch back to main page\n</code></pre>"},{"location":"user-guide/#dynamic-content-and-ajax","title":"Dynamic Content and AJAX","text":"<pre><code>// Wait for dynamic content\nWebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n\n// Wait for element to be present\nWebElement dynamicElement = wait.until(ExpectedConditions.presenceOfElementLocated(\n    LocatorTypeDetector.autoCreateBy(\".dynamic-content\", \"dynamic content area\")));\n\n// Wait for element to be clickable\nWebElement loadingButton = autoHeal.findElement(\"#load-data\", \"load data button\");\nloadingButton.click();\nWebElement loadedContent = wait.until(ExpectedConditions.elementToBeClickable(\n    LocatorTypeDetector.autoCreateBy(\".loaded-data\", \"loaded data content\")));\n\n// Handle loading indicators\nWebElement loadingSpinner = autoHeal.findElement(\".loading-spinner\", \"page loading indicator\");\nwait.until(ExpectedConditions.invisibilityOf(loadingSpinner));\n\n// AJAX form submission\nWebElement ajaxForm = autoHeal.findElement(\"#ajax-form\", \"ajax form submission\");\nWebElement submitBtn = autoHeal.findElement(\"//form[@id='ajax-form']//button[@type='submit']\", \"ajax form submit button\");\nsubmitBtn.click();\n\n// Wait for success message\nWebElement successMsg = wait.until(ExpectedConditions.visibilityOfElementLocated(\n    LocatorTypeDetector.autoCreateBy(\".success-message\", \"form submission success message\")));\n</code></pre>"},{"location":"user-guide/#advanced-interactions","title":"Advanced Interactions","text":"<pre><code>// Mouse actions\nActions actions = new Actions(driver);\n\n// Hover\nWebElement menuItem = autoHeal.findElement(\".menu-item\", \"dropdown menu trigger\");\nactions.moveToElement(menuItem).perform();\nWebElement subMenu = autoHeal.findElement(\".submenu-item\", \"submenu item after hover\");\nsubMenu.click();\n\n// Right-click context menu\nWebElement contextElement = autoHeal.findElement(\".context-menu-target\", \"element with context menu\");\nactions.contextClick(contextElement).perform();\nWebElement contextOption = autoHeal.findElement(\".context-menu-option\", \"context menu option\");\ncontextOption.click();\n\n// Drag and drop\nWebElement sourceElement = autoHeal.findElement(\".draggable\", \"draggable element\");\nWebElement targetElement = autoHeal.findElement(\".drop-target\", \"drop target area\");\nactions.dragAndDrop(sourceElement, targetElement).perform();\n\n// Double-click\nWebElement doubleClickElement = autoHeal.findElement(\".double-click-target\", \"double click target element\");\nactions.doubleClick(doubleClickElement).perform();\n\n// Keyboard shortcuts\nactions.keyDown(Keys.CONTROL).sendKeys(\"a\").keyUp(Keys.CONTROL).perform(); // Ctrl+A\nactions.keyDown(Keys.CONTROL).sendKeys(\"c\").keyUp(Keys.CONTROL).perform(); // Ctrl+C\n\n// Scroll to element\nWebElement bottomElement = autoHeal.findElement(\"#footer\", \"page footer element\");\nactions.moveToElement(bottomElement).perform(); // Scrolls to element\n\n// JavaScript execution with AutoHeal elements\nWebElement jsTarget = autoHeal.findElement(\".js-target\", \"element for javascript interaction\");\nJavascriptExecutor js = (JavascriptExecutor) driver;\njs.executeScript(\"arguments[0].style.border='3px solid red'\", jsTarget);\njs.executeScript(\"arguments[0].scrollIntoView(true);\", jsTarget);\n</code></pre>"},{"location":"user-guide/#advanced-configuration","title":"\ud83d\udd27 Advanced Configuration","text":""},{"location":"user-guide/#performance-optimization","title":"Performance Optimization","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .performance(PerformanceConfig.builder()\n        .threadPoolSize(4)  // Parallel processing\n        .elementTimeout(Duration.ofSeconds(30))\n        .enableMetrics(true)\n        .executionStrategy(ExecutionStrategy.SMART_SEQUENTIAL)  // Try fast methods first\n        .build())\n    .cache(CacheConfig.builder()\n        .enabled(true)\n        .maxSize(1000)\n        .expireAfterWrite(Duration.ofHours(1))\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/#execution-strategies","title":"Execution Strategies","text":"<pre><code>// Different strategies for different scenarios\nExecutionStrategy.SEQUENTIAL          // Try DOM then Visual (cost-effective)\nExecutionStrategy.PARALLEL           // Try both simultaneously (fastest)\nExecutionStrategy.SMART_SEQUENTIAL   // Adaptive based on historical success\nExecutionStrategy.DOM_ONLY           // Only DOM analysis (cheapest)\nExecutionStrategy.VISUAL_FIRST       // Visual first, DOM fallback (accurate)\n</code></pre>"},{"location":"user-guide/#comprehensive-reporting","title":"Comprehensive Reporting","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .reporting(ReportingConfig.builder()\n        .enabled(true)\n        .generateHTML(true)      // Interactive HTML reports\n        .generateJSON(true)      // Machine-readable data\n        .generateText(true)      // Human-readable summary\n        .consoleLogging(true)    // Real-time console output\n        .outputDirectory(\"./reports\")\n        .reportNamePrefix(\"AutoHeal_Test\")\n        .build())\n    .build();\n\n// Reports include:\n// - Selector success/failure rates\n// - Healing strategies used\n// - AI token usage and costs\n// - Performance metrics\n// - Element disambiguation details\n</code></pre>"},{"location":"user-guide/#playwright-integration-coming-soon","title":"\ud83d\udeab Playwright Integration (Coming Soon)","text":"<pre><code>// Future Playwright support\nPlaywrightWebAutomationAdapter playwrightAdapter = new PlaywrightWebAutomationAdapter(page);\nAutoHealLocator autoHeal = AutoHealLocator.builder()\n    .withWebAdapter(playwrightAdapter)\n    .build();\n\n// Same API, different framework\nWebElement element = autoHeal.findElement(\".selector\", \"element description\");\n</code></pre>"},{"location":"user-guide/#best-practices","title":"\ud83d\udcca Best Practices","text":""},{"location":"user-guide/#1-meaningful-descriptions","title":"1. Meaningful Descriptions","text":"<pre><code>// \u274c Poor descriptions\nautoHeal.findElement(\"#btn\", \"button\");\nautoHeal.findElement(\".input\", \"input field\");\n\n// \u2705 Good descriptions\nautoHeal.findElement(\"#btn\", \"submit order button on checkout page\");\nautoHeal.findElement(\".input\", \"customer email input in registration form\");\n</code></pre>"},{"location":"user-guide/#2-selector-strategy","title":"2. Selector Strategy","text":"<pre><code>// \u2705 Prefer stable attributes\nautoHeal.findElement(\"[data-testid='login-button']\", \"login button\");  // Best\nautoHeal.findElement(\"#login-btn\", \"login button\");                    // Good\nautoHeal.findElement(\".btn-primary:first-child\", \"login button\");      // Fragile\n\n// \u2705 Use semantic descriptions\nautoHeal.findElement(\"Sign In\", \"main login button\");  // Link text - very stable\n</code></pre>"},{"location":"user-guide/#3-error-handling","title":"3. Error Handling","text":"<pre><code>try {\n    WebElement element = autoHeal.findElement(\".selector\", \"target element\");\n    element.click();\n} catch (AutoHealException e) {\n    // Log healing failure details\n    logger.error(\"AutoHeal failed to find element: {}\", e.getMessage());\n    // Implement fallback strategy\n}\n</code></pre>"},{"location":"user-guide/#4-resource-management-reporting","title":"4. Resource Management &amp; Reporting","text":"<pre><code>@AfterEach\nvoid tearDown() {\n    // Always shutdown AutoHeal to:\n    // 1. Generate comprehensive reports in YOUR project directory\n    // 2. Clean up resources\n    // 3. Save cache data\n    autoHeal.shutdown();\n    driver.quit();\n}\n</code></pre> <p>\ud83d\udcca AutoHeal automatically generates detailed reports in your test project: - HTML Report: Interactive dashboard with metrics and recommendations - JSON Report: Machine-readable data for CI/CD integration - Text Report: Human-readable summary for quick analysis - Screenshots: Visual evidence of healing activities</p> <pre><code>your-test-project/\n\u251c\u2500\u2500 src/test/java/\n\u251c\u2500\u2500 autoheal-reports/           \u2190 Reports generated HERE (your project)\n\u2502   \u251c\u2500\u2500 MyApp_2024-01-15.html  \u2190 Interactive dashboard\n\u2502   \u251c\u2500\u2500 MyApp_2024-01-15.json  \u2190 CI/CD integration data\n\u2502   \u2514\u2500\u2500 screenshots/           \u2190 Visual evidence\n\u2514\u2500\u2500 target/\n</code></pre> <p>\ud83d\udcda See complete report examples and configuration in AutoHeal Reporting Guide</p>"},{"location":"user-guide/#parallel-testing-support","title":"\ud83d\ude80 Parallel Testing Support","text":"<p>AutoHeal Locator is designed for parallel test execution with thread-safe architecture and shared caching.</p>"},{"location":"user-guide/#thread-safe-design","title":"Thread-Safe Design","text":"<pre><code>// AutoHeal instances are thread-safe - safe for parallel execution\npublic class ParallelTestSuite {\n\n    // Shared AutoHeal configuration for all tests\n    private static final AutoHealConfiguration SHARED_CONFIG = AutoHealConfiguration.builder()\n        .ai(AIConfig.builder()\n            .provider(AIProvider.OPENAI)\n            .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n            .model(\"gpt-4o-mini\")\n            .build())\n        .cache(CacheConfig.builder()\n            .enabled(true)\n            .maxSize(10000)                // Shared cache across all threads\n            .expireAfterWrite(Duration.ofHours(2))\n            .build())\n        .performance(PerformanceConfig.builder()\n            .threadPoolSize(8)             // Handle concurrent AI requests\n            .maxConcurrentRequests(20)     // Rate limiting for API calls\n            .build())\n        .build();\n\n    @Test\n    @Execution(ExecutionMode.CONCURRENT)  // JUnit 5 parallel execution\n    void testUserRegistration() throws InterruptedException {\n        WebDriver driver = new ThreadLocalWebDriver().get(); // Thread-local driver\n        AutoHealLocator autoHeal = AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(SHARED_CONFIG)  // Shared config + cache\n            .build();\n\n        try {\n            driver.get(\"https://app.example.com/register\");\n\n            // Each thread operates independently\n            WebElement emailField = autoHeal.findElement(\"#email\", \"email input field\");\n            emailField.sendKeys(\"test\" + Thread.currentThread().getId() + \"@example.com\");\n\n            WebElement submitButton = autoHeal.findElement(\"Register\", \"registration submit button\");\n            submitButton.click();\n\n            // Verify success\n            WebElement successMsg = autoHeal.findElement(\".success-message\", \"registration success message\");\n            assertTrue(successMsg.isDisplayed());\n\n        } finally {\n            autoHeal.shutdown();  // Thread-safe shutdown\n            driver.quit();\n        }\n    }\n\n    @Test\n    @Execution(ExecutionMode.CONCURRENT)\n    void testUserLogin() throws InterruptedException {\n        WebDriver driver = new ThreadLocalWebDriver().get();\n        AutoHealLocator autoHeal = AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(SHARED_CONFIG)  // Benefits from shared cache\n            .build();\n\n        try {\n            driver.get(\"https://app.example.com/login\");\n\n            WebElement usernameField = autoHeal.findElement(\"#username\", \"username input field\");\n            usernameField.sendKeys(\"testuser\" + Thread.currentThread().getId());\n\n            WebElement passwordField = autoHeal.findElement(\"#password\", \"password input field\");\n            passwordField.sendKeys(\"password123\");\n\n            WebElement loginButton = autoHeal.findElement(\"Sign In\", \"login button\");\n            loginButton.click();\n\n            // Verify login\n            WebElement dashboard = autoHeal.findElement(\".dashboard\", \"user dashboard\");\n            assertTrue(dashboard.isDisplayed());\n\n        } finally {\n            autoHeal.shutdown();\n            driver.quit();\n        }\n    }\n}\n\n// Thread-local WebDriver setup for parallel execution\nclass ThreadLocalWebDriver {\n    private static ThreadLocal&lt;WebDriver&gt; driver = new ThreadLocal&lt;&gt;();\n\n    public WebDriver get() {\n        if (driver.get() == null) {\n            ChromeOptions options = new ChromeOptions();\n            options.addArguments(\"--headless\");  // Better for parallel execution\n            driver.set(new ChromeDriver(options));\n        }\n        return driver.get();\n    }\n\n    public void remove() {\n        if (driver.get() != null) {\n            driver.get().quit();\n            driver.remove();\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/#testng-parallel-execution","title":"TestNG Parallel Execution","text":"<pre><code>// testng.xml configuration for parallel execution\n/*\n&lt;suite name=\"ParallelSuite\" parallel=\"methods\" thread-count=\"4\"&gt;\n    &lt;test name=\"ParallelTests\"&gt;\n        &lt;classes&gt;\n            &lt;class name=\"com.example.ParallelAutoHealTests\"/&gt;\n        &lt;/classes&gt;\n    &lt;/test&gt;\n&lt;/suite&gt;\n*/\n\npublic class ParallelAutoHealTests {\n    private WebDriver driver;\n    private AutoHealLocator autoHeal;\n\n    @BeforeMethod\n    public void setUp() {\n        // Each thread gets its own WebDriver instance\n        driver = new ChromeDriver();\n\n        // Shared AutoHeal configuration with thread-safe operations\n        autoHeal = AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(AutoHealConfiguration.builder()\n                .ai(AIConfig.builder()\n                    .provider(AIProvider.OPENAI)\n                    .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n                    .build())\n                .cache(CacheConfig.builder()\n                    .enabled(true)    // Shared cache benefits all threads\n                    .build())\n                .build())\n            .build();\n    }\n\n    @Test(threadPoolSize = 3, invocationCount = 10)  // Run 10 times with 3 threads\n    public void testProductSearch() {\n        String threadName = Thread.currentThread().getName();\n        System.out.println(\"Running on thread: \" + threadName);\n\n        driver.get(\"https://shop.example.com\");\n\n        WebElement searchBox = autoHeal.findElement(\"#search\", \"product search input\");\n        searchBox.sendKeys(\"laptop \" + threadName);\n\n        WebElement searchButton = autoHeal.findElement(\"Search\", \"search submit button\");\n        searchButton.click();\n\n        List&lt;WebElement&gt; results = autoHeal.findElements(\".product-item\", \"search result products\");\n        assertTrue(results.size() &gt; 0, \"No products found on thread \" + threadName);\n\n        System.out.println(\"Thread \" + threadName + \" found \" + results.size() + \" products\");\n    }\n\n    @AfterMethod\n    public void tearDown() {\n        if (autoHeal != null) {\n            autoHeal.shutdown();\n        }\n        if (driver != null) {\n            driver.quit();\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/#key-benefits-for-parallel-testing","title":"Key Benefits for Parallel Testing","text":"<ol> <li>Shared Caching: All parallel threads benefit from the same selector cache</li> <li>Rate Limiting: Built-in AI request throttling prevents API limits</li> <li>Thread Safety: No race conditions or shared state issues</li> <li>Resource Efficiency: Smart connection pooling and request batching</li> <li>Independent Failures: One thread's failure doesn't affect others</li> </ol>"},{"location":"user-guide/#best-practices-for-parallel-execution","title":"Best Practices for Parallel Execution","text":"<pre><code>// 1. Use thread-local WebDriver instances\nprivate static ThreadLocal&lt;WebDriver&gt; driverThreadLocal = new ThreadLocal&lt;&gt;();\n\n// 2. Configure appropriate thread pool sizes\n.performance(PerformanceConfig.builder()\n    .threadPoolSize(Runtime.getRuntime().availableProcessors())\n    .maxConcurrentRequests(50)  // Balance between speed and API limits\n    .build())\n\n// 3. Enable shared caching for better performance\n.cache(CacheConfig.builder()\n    .enabled(true)\n    .maxSize(20000)  // Larger cache for parallel execution\n    .build())\n\n// 4. Use headless browsers for faster parallel execution\nChromeOptions options = new ChromeOptions();\noptions.addArguments(\"--headless\", \"--disable-gpu\", \"--no-sandbox\");\n\n// 5. Proper cleanup in parallel tests\n@AfterEach\nvoid cleanup() {\n    autoHeal.shutdown();  // Thread-safe shutdown\n    driver.quit();\n}\n</code></pre>"},{"location":"user-guide/#troubleshooting","title":"\ud83d\udd0d Troubleshooting","text":""},{"location":"user-guide/#common-issues","title":"Common Issues","text":"<p>Issue: DOM analysis taking too long <pre><code>// Solution: Reduce timeout or use DOM_ONLY strategy\n.ai(AIConfig.builder()\n    .timeout(Duration.ofSeconds(15))  // Reduce timeout\n    .build())\n.performance(PerformanceConfig.builder()\n    .executionStrategy(ExecutionStrategy.DOM_ONLY)  // Skip visual analysis\n    .build())\n</code></pre></p> <p>Issue: High AI costs <pre><code>// Solution: Use cheaper models and caching\n.ai(AIConfig.builder()\n    .model(\"gpt-4o-mini\")  // Use cost-effective model\n    .build())\n.cache(CacheConfig.builder()\n    .enabled(true)  // Enable aggressive caching\n    .maxSize(5000)\n    .build())\n</code></pre></p> <p>Issue: Visual analysis not working <pre><code>// Check: Visual analysis requirements\n.ai(AIConfig.builder()\n    .provider(AIProvider.OPENAI)  // Only OpenAI supports vision currently\n    .visualAnalysisEnabled(true)\n    .model(\"gpt-4o\")  // Use vision-capable model\n    .build())\n</code></pre></p>"},{"location":"user-guide/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>GitHub Repository</li> <li>API Documentation</li> <li>Examples Repository</li> <li>Community Support</li> </ul> <p>AutoHeal Locator - Making web automation resilient and intelligent \ud83e\udd16\u2728</p>"},{"location":"user-guide/ai-configuration/","title":"AI Configuration Guide","text":""},{"location":"user-guide/ai-configuration/#overview","title":"Overview","text":"<p>AutoHeal supports multiple AI providers for intelligent element location. Choose the provider that best fits your needs in terms of cost, performance, and features.</p>"},{"location":"user-guide/ai-configuration/#supported-ai-providers","title":"Supported AI Providers","text":"Provider DOM Analysis Visual Analysis Cost Setup Complexity OpenAI \u2705 Excellent \u2705 Excellent $$ Easy Gemini \u2705 Good \u274c Not Yet $ Easy Local LLM \u2705 Good \u274c Limited Free Medium Mock \u2705 Testing \u274c Testing Free None"},{"location":"user-guide/ai-configuration/#openai-configuration","title":"OpenAI Configuration","text":""},{"location":"user-guide/ai-configuration/#1-get-api-key","title":"1. Get API Key","text":"<ol> <li>Visit OpenAI API Keys</li> <li>Create an account or sign in</li> <li>Click \"Create new secret key\"</li> <li>Copy the key (starts with <code>sk-proj-</code> or <code>sk-</code>)</li> <li>Set billing information (required for API access)</li> </ol>"},{"location":"user-guide/ai-configuration/#2-configuration","title":"2. Configuration","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .apiKey(System.getenv(\"OPENAI_API_KEY\"))  // From environment variable\n        .model(\"gpt-4o-mini\")           // Recommended: cost-effective\n        .timeout(Duration.ofSeconds(30))\n        .maxRetries(3)\n        .visualAnalysisEnabled(true)    // Enable screenshot analysis\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/ai-configuration/#3-model-options","title":"3. Model Options","text":"Model DOM Analysis Visual Analysis Cost/1K tokens Best For <code>gpt-4o-mini</code> \u2705 \u2705 $0.00015 Recommended - Best balance <code>gpt-4o</code> \u2705 \u2705 $0.005 Complex scenarios <code>gpt-3.5-turbo</code> \u2705 \u274c $0.0005 DOM-only, budget"},{"location":"user-guide/ai-configuration/#4-environment-setup","title":"4. Environment Setup","text":"<p>Option 1: Environment Variable (Recommended) <pre><code># Linux/Mac\nexport OPENAI_API_KEY=\"sk-proj-your-key-here\"\n\n# Windows\nset OPENAI_API_KEY=sk-proj-your-key-here\n</code></pre></p> <p>Option 2: System Property <pre><code>-DOPENAI_API_KEY=\"sk-proj-your-key-here\"\n</code></pre></p> <p>Option 3: Configuration File (.env) <pre><code># Create .env file in project root\necho \"OPENAI_API_KEY=sk-proj-your-key-here\" &gt; .env\n</code></pre></p> <p>Option 4: Properties File <pre><code>// Load from application.properties or config.properties\nProperties props = new Properties();\nprops.load(new FileInputStream(\"config.properties\"));\n\nAutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .apiKey(props.getProperty(\"openai.api.key\"))\n        .build())\n    .build();\n</code></pre></p>"},{"location":"user-guide/ai-configuration/#google-gemini-configuration","title":"Google Gemini Configuration","text":""},{"location":"user-guide/ai-configuration/#1-get-api-key_1","title":"1. Get API Key","text":"<ol> <li>Visit Google AI Studio</li> <li>Sign in with Google account</li> <li>Click \"Create API key\"</li> <li>Select existing project or create new one</li> <li>Copy the generated key</li> </ol>"},{"location":"user-guide/ai-configuration/#2-configuration_1","title":"2. Configuration","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.GEMINI)\n        .apiKey(System.getenv(\"GEMINI_API_KEY\"))  // From environment variable\n        .model(\"gemini-1.5-pro\")\n        .timeout(Duration.ofSeconds(45))\n        .maxRetries(2)\n        .visualAnalysisEnabled(false)   // Not supported yet\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/ai-configuration/#3-model-options_1","title":"3. Model Options","text":"Model Features Cost/1K tokens Notes <code>gemini-1.5-pro</code> Advanced reasoning $0.00125 Best performance <code>gemini-1.5-flash</code> Fast responses $0.000075 Budget option"},{"location":"user-guide/ai-configuration/#4-environment-setup_1","title":"4. Environment Setup","text":"<p>Environment Variable (Recommended) <pre><code># Linux/Mac\nexport GEMINI_API_KEY=\"your-gemini-key-here\"\n\n# Windows\nset GEMINI_API_KEY=your-gemini-key-here\n</code></pre></p> <p>Properties File <pre><code>// config.properties\ngemini.api.key=your-gemini-key-here\n\n// Load in code\nProperties props = new Properties();\nprops.load(new FileInputStream(\"config.properties\"));\n\nAutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.GEMINI)\n        .apiKey(props.getProperty(\"gemini.api.key\"))\n        .build())\n    .build();\n</code></pre></p>"},{"location":"user-guide/ai-configuration/#5-limitations","title":"5. Limitations","text":"<ul> <li>\u274c Visual analysis not yet supported</li> <li>\u26a0\ufe0f Longer response times for complex DOM analysis</li> <li>\u2705 Excellent for simple selector healing</li> </ul>"},{"location":"user-guide/ai-configuration/#local-llm-configuration","title":"Local LLM Configuration","text":"<p>Run AI models locally for privacy and cost control.</p>"},{"location":"user-guide/ai-configuration/#1-setup-ollama","title":"1. Setup Ollama","text":"<pre><code># Install Ollama\ncurl -fsSL https://ollama.ai/install.sh | sh\n\n# Pull a model\nollama pull llama3.1:8b\n\n# Start the server\nollama serve\n</code></pre>"},{"location":"user-guide/ai-configuration/#2-configuration_2","title":"2. Configuration","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.LOCAL_LLM)\n        .apiUrl(\"http://localhost:11434/v1/chat/completions\")\n        .model(\"llama3.1:8b\")\n        .timeout(Duration.ofSeconds(60))\n        .maxRetries(1)\n        .visualAnalysisEnabled(false)\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/ai-configuration/#3-recommended-models","title":"3. Recommended Models","text":"Model Size Performance Memory Required <code>llama3.1:8b</code> 4.7GB Good 8GB RAM <code>llama3.1:70b</code> 40GB Excellent 64GB RAM <code>codellama:7b</code> 3.8GB Code-focused 8GB RAM"},{"location":"user-guide/ai-configuration/#4-alternative-local-setups","title":"4. Alternative Local Setups","text":"<p>LM Studio: <pre><code>.apiUrl(\"http://localhost:1234/v1/chat/completions\")\n.model(\"local-model\")\n</code></pre></p> <p>GPT4All: <pre><code>.apiUrl(\"http://localhost:4891/v1/chat/completions\")\n.model(\"gpt4all-model\")\n</code></pre></p>"},{"location":"user-guide/ai-configuration/#mock-ai-testing","title":"Mock AI (Testing)","text":"<p>For unit tests and development without AI costs.</p>"},{"location":"user-guide/ai-configuration/#configuration","title":"Configuration","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.MOCK)\n        .build())\n    .build();\n\n// Add predefined responses\nAutoHealLocator autoHeal = AutoHealLocator.builder()\n    .withConfiguration(config)\n    .build();\n\nMockAIService mockAI = (MockAIService) autoHeal.getAIService();\nmockAI.addMockResponse(\"login button\", \"#signin-btn\", 0.95);\nmockAI.addMockResponse(\"username field\", \"#user-input\", 0.90);\n</code></pre>"},{"location":"user-guide/ai-configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"user-guide/ai-configuration/#circuit-breaker-settings","title":"Circuit Breaker Settings","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .resilience(ResilienceConfig.builder()\n        .circuitBreakerFailureThreshold(5)     // Open after 5 failures\n        .circuitBreakerTimeout(Duration.ofMinutes(2))  // Stay open for 2 minutes\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/ai-configuration/#cost-optimization","title":"Cost Optimization","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .model(\"gpt-4o-mini\")                   // Cheapest option\n        .timeout(Duration.ofSeconds(15))        // Shorter timeout\n        .maxRetries(1)                         // Fewer retries\n        .visualAnalysisEnabled(false)          // Disable expensive visual analysis\n        .build())\n    .cache(CacheConfig.builder()\n        .enabled(true)                         // Aggressive caching\n        .maxSize(10000)\n        .expireAfterWrite(Duration.ofHours(24))\n        .build())\n    .performance(PerformanceConfig.builder()\n        .executionStrategy(ExecutionStrategy.DOM_ONLY)  // Skip visual fallback\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/ai-configuration/#high-performance-setup","title":"High-Performance Setup","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .model(\"gpt-4o\")                       // Fastest, most accurate\n        .timeout(Duration.ofSeconds(45))\n        .maxRetries(3)\n        .visualAnalysisEnabled(true)\n        .build())\n    .performance(PerformanceConfig.builder()\n        .threadPoolSize(8)                     // More parallel processing\n        .executionStrategy(ExecutionStrategy.PARALLEL)  // Try all strategies simultaneously\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/ai-configuration/#configuration-best-practices","title":"Configuration Best Practices","text":""},{"location":"user-guide/ai-configuration/#1-environment-specific-configs","title":"1. Environment-Specific Configs","text":"<pre><code>public class ConfigFactory {\n    public static AutoHealConfiguration getConfig(Environment env) {\n        return switch (env) {\n            case DEVELOPMENT -&gt; createDevelopmentConfig();\n            case STAGING -&gt; createStagingConfig();\n            case PRODUCTION -&gt; createProductionConfig();\n        };\n    }\n\n    private static AutoHealConfiguration createDevelopmentConfig() {\n        return AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(AIProvider.MOCK)  // No costs in dev\n                .build())\n            .build();\n    }\n\n    private static AutoHealConfiguration createProductionConfig() {\n        return AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n                .model(\"gpt-4o-mini\")\n                .build())\n            .cache(CacheConfig.builder()\n                .enabled(true)  // Production needs caching\n                .build())\n            .build();\n    }\n}\n</code></pre>"},{"location":"user-guide/ai-configuration/#2-configuration-validation","title":"2. Configuration Validation","text":"<pre><code>@Test\nvoid validateConfiguration() {\n    AutoHealConfiguration config = ConfigFactory.getConfig(Environment.PRODUCTION);\n\n    // Verify AI provider is configured\n    assertNotNull(config.getAiConfig().getApiKey());\n    assertTrue(config.getAiConfig().getTimeout().getSeconds() &gt; 0);\n\n    // Verify caching is enabled for production\n    assertTrue(config.getCacheConfig().isEnabled());\n}\n</code></pre>"},{"location":"user-guide/ai-configuration/#3-monitoring-and-alerts","title":"3. Monitoring and Alerts","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n        .build())\n    .monitoring(MonitoringConfig.builder()\n        .metricsEnabled(true)\n        .alertOnHighCosts(100.0)  // Alert if daily cost &gt; $100\n        .alertOnLowSuccessRate(0.8)  // Alert if success rate &lt; 80%\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/ai-configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/ai-configuration/#common-issues","title":"Common Issues","text":"<p>\u274c API Key Invalid <pre><code>Error: OpenAI API returned 401 Unauthorized\nSolution: Verify API key is correct and has billing enabled\n</code></pre></p> <p>\u274c Rate Limiting <pre><code>Error: OpenAI API returned 429 Too Many Requests\nSolution: Reduce parallel requests or upgrade API plan\n</code></pre></p> <p>\u274c Model Not Found <pre><code>Error: Model 'gpt-4o-mini' not found\nSolution: Check model name spelling and availability\n</code></pre></p> <p>\u274c Timeout Issues <pre><code>Error: AI request timed out after 30 seconds\nSolution: Increase timeout or simplify prompts\n</code></pre></p>"},{"location":"user-guide/ai-configuration/#debug-configuration","title":"Debug Configuration","text":"<p>Enable debug logging to troubleshoot issues:</p> <pre><code>System.setProperty(\"org.slf4j.simpleLogger.log.com.autoheal\", \"DEBUG\");\n\nAutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .apiKey(\"your-key\")\n        .build())\n    .logging(LoggingConfig.builder()\n        .logAIRequests(true)     // Log all AI interactions\n        .logAIResponses(true)    // Log AI responses\n        .logPerformance(true)    // Log timing information\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/ai-configuration/#next-steps","title":"Next Steps","text":"<ol> <li>Quick Start Guide</li> <li>Usage Examples</li> <li>Performance Optimization</li> </ol>"},{"location":"user-guide/installation/","title":"Installation Guide","text":""},{"location":"user-guide/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Java: 11 or higher</li> <li>Selenium: 4.15.0 or higher</li> <li>Maven/Gradle: For dependency management</li> <li>AI Provider: OpenAI, Gemini, or Local LLM</li> </ul>"},{"location":"user-guide/installation/#maven-installation","title":"Maven Installation","text":""},{"location":"user-guide/installation/#option-1-maven-central-coming-soon","title":"Option 1: Maven Central (Coming Soon)","text":"<p>Add the following dependency to your <code>pom.xml</code>:</p> <pre><code>&lt;dependencies&gt;\n    &lt;!-- AutoHeal Core --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.example&lt;/groupId&gt;\n        &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Selenium WebDriver --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n        &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n        &lt;version&gt;4.15.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- SLF4J for logging (optional) --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n        &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;\n        &lt;version&gt;2.0.9&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"user-guide/installation/#option-2-build-from-source-recommended-for-latest-features","title":"Option 2: Build from Source (Recommended for Latest Features)","text":"<p>Clone and build the project locally to use the latest snapshot version:</p> <pre><code># Clone the repository\ngit clone https://github.com/your-org/autoheal-locator.git\ncd autoheal-locator\n\n# Build and install to local Maven repository\nmvn clean install\n\n# Or build without running tests (faster)\nmvn clean install -DskipTests\n</code></pre> <p>Then add the snapshot dependency to your <code>pom.xml</code>:</p> <pre><code>&lt;dependencies&gt;\n    &lt;!-- AutoHeal Core - Latest Snapshot --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.example&lt;/groupId&gt;\n        &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Selenium WebDriver --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n        &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n        &lt;version&gt;4.15.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- SLF4J for logging (optional) --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n        &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;\n        &lt;version&gt;2.0.9&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Benefits of building from source: - \u2705 Latest features and bug fixes - \u2705 Ability to customize and contribute - \u2705 Access to unreleased improvements - \u2705 Full source code access for debugging</p>"},{"location":"user-guide/installation/#gradle-installation","title":"Gradle Installation","text":""},{"location":"user-guide/installation/#option-1-gradle-central-coming-soon","title":"Option 1: Gradle Central (Coming Soon)","text":"<p>Add to your <code>build.gradle</code>:</p> <pre><code>dependencies {\n    implementation 'org.example:autoheal-locator:1.0.0'\n    implementation 'org.seleniumhq.selenium:selenium-java:4.15.0'\n    implementation 'org.slf4j:slf4j-simple:2.0.9' // optional\n}\n</code></pre>"},{"location":"user-guide/installation/#option-2-build-from-source","title":"Option 2: Build from Source","text":"<p>After building the project with <code>mvn clean install</code>, add to your <code>build.gradle</code>:</p> <pre><code>dependencies {\n    // AutoHeal Core - Latest Snapshot from local build\n    implementation 'org.example:autoheal-locator:1.0-SNAPSHOT'\n    implementation 'org.seleniumhq.selenium:selenium-java:4.15.0'\n    implementation 'org.slf4j:slf4j-simple:2.0.9' // optional\n}\n\nrepositories {\n    mavenCentral()\n    mavenLocal() // Required for locally built snapshots\n}\n</code></pre>"},{"location":"user-guide/installation/#manual-installation","title":"Manual Installation","text":""},{"location":"user-guide/installation/#option-1-download-release-jar","title":"Option 1: Download Release JAR","text":"<ol> <li>Download the JAR file from releases</li> <li>Add to your classpath</li> <li>Ensure Selenium WebDriver is also in classpath</li> </ol>"},{"location":"user-guide/installation/#option-2-build-jar-from-source","title":"Option 2: Build JAR from Source","text":"<pre><code># Clone and build the project\ngit clone https://github.com/your-org/autoheal-locator.git\ncd autoheal-locator\n\n# Create JAR file\nmvn clean package\n\n# JAR file will be created in target/ directory\n# autoheal-locator-1.0-SNAPSHOT.jar\n</code></pre> <p>Add the generated JAR to your classpath along with required dependencies.</p>"},{"location":"user-guide/installation/#verification","title":"Verification","text":"<p>Create a simple test to verify installation:</p> <pre><code>import com.autoheal.AutoHealLocator;\nimport com.autoheal.impl.adapter.SeleniumWebAutomationAdapter;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class InstallationTest {\n    public static void main(String[] args) {\n        WebDriver driver = new ChromeDriver();\n\n        try {\n            AutoHealLocator autoHeal = AutoHealLocator.builder()\n                .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n                .build();\n\n            System.out.println(\"\u2705 AutoHeal installation successful!\");\n\n        } finally {\n            driver.quit();\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/installation/#next-steps","title":"Next Steps","text":"<ol> <li>Configure AI Provider</li> <li>Quick Start Guide</li> <li>Spring Boot Integration - Easy auto-configuration for Spring Boot projects</li> <li>Recommended Page Object Pattern - Best practices for organizing your tests</li> <li>Basic Usage Examples</li> </ol>"},{"location":"user-guide/multiple-elements/","title":"Handling Multiple Elements - Smart Disambiguation","text":""},{"location":"user-guide/multiple-elements/#overview","title":"Overview","text":"<p>When multiple elements match the same locator, AutoHeal's AI uses contextual descriptions to intelligently select the correct element. This eliminates the need for complex, brittle selectors and makes tests more maintainable.</p>"},{"location":"user-guide/multiple-elements/#how-ai-disambiguation-works","title":"How AI Disambiguation Works","text":""},{"location":"user-guide/multiple-elements/#1-context-based-selection","title":"1. Context-Based Selection","text":"<p>AutoHeal analyzes the element description to understand the intended context:</p> <pre><code>// Page has multiple \"Submit\" buttons - AI selects based on description\nWebElement orderSubmit = autoHeal.findElement(\"Submit\", \"submit order button in checkout form\");\nWebElement reviewSubmit = autoHeal.findElement(\"Submit\", \"submit review button in product page\");\nWebElement contactSubmit = autoHeal.findElement(\"Submit\", \"submit contact form button\");\n\n// \u2705 \"checkout form\" \u2192 AI finds submit button within checkout context\n// \u2705 \"product page\" \u2192 AI finds submit button in review section\n// \u2705 \"contact form\" \u2192 AI finds submit button in contact section\n</code></pre>"},{"location":"user-guide/multiple-elements/#2-location-based-disambiguation","title":"2. Location-Based Disambiguation","text":"<p>AI considers the element's position and surrounding context:</p> <pre><code>// Multiple \"Edit\" buttons on a user management page\nWebElement editProfile = autoHeal.findElement(\"Edit\", \"edit button next to user profile\");\nWebElement editSettings = autoHeal.findElement(\"Edit\", \"edit button in settings section\");\nWebElement editPreferences = autoHeal.findElement(\"Edit\", \"edit button at bottom of preferences\");\n\n// AI-powered analysis finds the correct \"Edit\" button based on location\n</code></pre>"},{"location":"user-guide/multiple-elements/#3-semantic-understanding","title":"3. Semantic Understanding","text":"<p>AutoHeal understands business context and common UI patterns:</p> <pre><code>// E-commerce site with multiple \"Add to Cart\" buttons\nWebElement addMainProduct = autoHeal.findElement(\"Add to Cart\", \"add main product to cart\");\nWebElement addAccessory = autoHeal.findElement(\"Add to Cart\", \"add recommended accessory to cart\");\nWebElement addWarranty = autoHeal.findElement(\"Add to Cart\", \"add extended warranty to cart\");\n\n// AI understands \"main product\", \"accessory\", \"warranty\" contexts\n</code></pre>"},{"location":"user-guide/multiple-elements/#common-disambiguation-scenarios","title":"Common Disambiguation Scenarios","text":""},{"location":"user-guide/multiple-elements/#1-form-buttons","title":"1. Form Buttons","text":"<pre><code>// Registration form with multiple buttons\nWebElement createAccount = autoHeal.findElement(\"Create Account\", \"create new account button\");\nWebElement loginInstead = autoHeal.findElement(\"Sign In\", \"sign in instead button\");\nWebElement forgotPassword = autoHeal.findElement(\"Forgot Password\", \"forgot password link\");\n\n// Payment form with multiple submit options\nWebElement payNow = autoHeal.findElement(\"Pay Now\", \"pay now button for immediate payment\");\nWebElement payLater = autoHeal.findElement(\"Pay Later\", \"pay later option button\");\nWebElement saveDraft = autoHeal.findElement(\"Save Draft\", \"save order as draft button\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#2-navigation-elements","title":"2. Navigation Elements","text":"<pre><code>// Multiple \"Home\" links in different navigation areas\nWebElement mainNavHome = autoHeal.findElement(\"Home\", \"home link in main navigation\");\nWebElement breadcrumbHome = autoHeal.findElement(\"Home\", \"home link in breadcrumb navigation\");\nWebElement footerHome = autoHeal.findElement(\"Home\", \"home link in footer\");\n\n// Tabs with similar names\nWebElement personalInfo = autoHeal.findElement(\"Personal\", \"personal information tab\");\nWebElement personalPrefs = autoHeal.findElement(\"Personal\", \"personal preferences tab\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#3-data-tables","title":"3. Data Tables","text":"<pre><code>// Table with multiple action buttons per row\nWebElement editUser1 = autoHeal.findElement(\"Edit\", \"edit button for John Doe user row\");\nWebElement editUser2 = autoHeal.findElement(\"Edit\", \"edit button for Jane Smith user row\");\nWebElement deleteUser1 = autoHeal.findElement(\"Delete\", \"delete button for John Doe user row\");\n\n// AI uses surrounding table data to identify the correct row\n</code></pre>"},{"location":"user-guide/multiple-elements/#4-modal-dialogs","title":"4. Modal Dialogs","text":"<pre><code>// Multiple modals with similar buttons\nWebElement confirmDelete = autoHeal.findElement(\"Confirm\", \"confirm button in delete confirmation dialog\");\nWebElement confirmSave = autoHeal.findElement(\"Confirm\", \"confirm button in save changes dialog\");\nWebElement confirmLogout = autoHeal.findElement(\"Confirm\", \"confirm button in logout confirmation\");\n\n// AI identifies the active modal and its context\n</code></pre>"},{"location":"user-guide/multiple-elements/#best-practices-for-descriptions","title":"Best Practices for Descriptions","text":""},{"location":"user-guide/multiple-elements/#1-include-context-information","title":"1. Include Context Information","text":"<pre><code>// \u274c Vague descriptions - Hard to disambiguate\nautoHeal.findElement(\"Submit\", \"submit button\");\nautoHeal.findElement(\"Edit\", \"edit button\");\n\n// \u2705 Contextual descriptions - Easy to disambiguate\nautoHeal.findElement(\"Submit\", \"submit button in contact form\");\nautoHeal.findElement(\"Edit\", \"edit button in user profile section\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#2-specify-location-when-helpful","title":"2. Specify Location When Helpful","text":"<pre><code>// \u2705 Include location context\nautoHeal.findElement(\"Search\", \"search button in header navigation\");\nautoHeal.findElement(\"Search\", \"search button in product filter sidebar\");\nautoHeal.findElement(\"Add\", \"add item button at top of shopping list\");\nautoHeal.findElement(\"Add\", \"add item button at bottom of shopping list\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#3-mention-surrounding-elements","title":"3. Mention Surrounding Elements","text":"<pre><code>// \u2705 Reference nearby elements for context\nautoHeal.findElement(\"Save\", \"save button next to cancel button\");\nautoHeal.findElement(\"Next\", \"next button below form fields\");\nautoHeal.findElement(\"Upload\", \"upload button in file attachment area\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#4-use-business-terminology","title":"4. Use Business Terminology","text":"<pre><code>// \u2705 Use domain-specific language\nautoHeal.findElement(\"Checkout\", \"checkout button in shopping cart\");\nautoHeal.findElement(\"Apply\", \"apply coupon code button\");\nautoHeal.findElement(\"Subscribe\", \"subscribe to newsletter button in footer\");\nautoHeal.findElement(\"Book Now\", \"book appointment button for dentist\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#advanced-disambiguation-techniques","title":"Advanced Disambiguation Techniques","text":""},{"location":"user-guide/multiple-elements/#1-hierarchical-context","title":"1. Hierarchical Context","text":"<pre><code>// Multi-level context for complex pages\nWebElement saveProfile = autoHeal.findElement(\"Save\",\n    \"save button in personal information section of user profile page\");\nWebElement saveSettings = autoHeal.findElement(\"Save\",\n    \"save button in notification preferences section of settings page\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#2-temporal-context","title":"2. Temporal Context","text":"<pre><code>// Time-based disambiguation\nWebElement morningSlot = autoHeal.findElement(\"Book\", \"book 9 AM appointment slot\");\nWebElement afternoonSlot = autoHeal.findElement(\"Book\", \"book 2 PM appointment slot\");\nWebElement emergencySlot = autoHeal.findElement(\"Book\", \"book emergency appointment slot\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#3-state-based-selection","title":"3. State-Based Selection","text":"<pre><code>// Select based on element state or content\nWebElement activeTab = autoHeal.findElement(\"Dashboard\", \"active dashboard tab\");\nWebElement inactiveTab = autoHeal.findElement(\"Reports\", \"inactive reports tab\");\nWebElement enabledBtn = autoHeal.findElement(\"Process\", \"enabled process button\");\nWebElement disabledBtn = autoHeal.findElement(\"Process\", \"disabled process button\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#working-with-lists-and-collections","title":"Working with Lists and Collections","text":""},{"location":"user-guide/multiple-elements/#1-specific-item-selection","title":"1. Specific Item Selection","text":"<pre><code>// Select specific items from lists\nWebElement firstProduct = autoHeal.findElement(\"Add to Cart\",\n    \"add to cart button for first product in search results\");\nWebElement lastProduct = autoHeal.findElement(\"Add to Cart\",\n    \"add to cart button for last product in search results\");\nWebElement featuredProduct = autoHeal.findElement(\"Add to Cart\",\n    \"add to cart button for featured product\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#2-category-based-selection","title":"2. Category-Based Selection","text":"<pre><code>// Select based on category or type\nWebElement electronicsFilter = autoHeal.findElement(\"Electronics\",\n    \"electronics category filter in product search\");\nWebElement clothingFilter = autoHeal.findElement(\"Clothing\",\n    \"clothing category filter in product search\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#3-dynamic-list-handling","title":"3. Dynamic List Handling","text":"<pre><code>// Handle dynamically generated lists\nWebElement newMessage = autoHeal.findElement(\"Reply\",\n    \"reply button for newest message in inbox\");\nWebElement importantMessage = autoHeal.findElement(\"Reply\",\n    \"reply button for message marked as important\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#debugging-disambiguation","title":"Debugging Disambiguation","text":""},{"location":"user-guide/multiple-elements/#1-enable-debug-logging","title":"1. Enable Debug Logging","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .logging(LoggingConfig.builder()\n        .logAIRequests(true)\n        .logDisambiguationDetails(true)\n        .verboseLogging(true)\n        .build())\n    .build();\n\n// Logs will show:\n// - Number of matching elements found\n// - AI reasoning for element selection\n// - Confidence scores for each candidate\n</code></pre>"},{"location":"user-guide/multiple-elements/#2-review-healing-reports","title":"2. Review Healing Reports","text":"<pre><code>// Generate detailed reports\n.reporting(ReportingConfig.builder()\n    .enabled(true)\n    .generateHTML(true)\n    .includeDisambiguationDetails(true)\n    .build())\n\n// Reports include:\n// - Screenshots showing all matching elements\n// - AI decision reasoning\n// - Alternative elements considered\n// - Confidence scores and selection criteria\n</code></pre>"},{"location":"user-guide/multiple-elements/#3-test-disambiguation-logic","title":"3. Test Disambiguation Logic","text":"<pre><code>@Test\nvoid testButtonDisambiguation() {\n    // Test page with multiple \"Save\" buttons\n    driver.get(\"https://example.com/user-profile\");\n\n    // Should find profile save button\n    WebElement profileSave = autoHeal.findElement(\"Save\",\n        \"save button in profile information section\");\n\n    // Should find settings save button\n    WebElement settingsSave = autoHeal.findElement(\"Save\",\n        \"save button in account settings section\");\n\n    // Verify different elements were selected\n    assertNotEquals(profileSave, settingsSave);\n\n    // Verify correct sections\n    assertTrue(profileSave.getText().contains(\"Save Profile\") ||\n               profileSave.findElement(By.xpath(\"./ancestor::*[@class*='profile']\")) != null);\n}\n</code></pre>"},{"location":"user-guide/multiple-elements/#performance-considerations","title":"Performance Considerations","text":""},{"location":"user-guide/multiple-elements/#1-disambiguation-caching","title":"1. Disambiguation Caching","text":"<pre><code>// AI disambiguation results are cached to improve performance\nAutoHealConfiguration config = AutoHealConfiguration.builder()\n    .cache(CacheConfig.builder()\n        .enabled(true)\n        .cacheDisambiguationResults(true)  // Cache AI decisions\n        .maxSize(10000)\n        .build())\n    .build();\n\n// Subsequent calls with same description will use cached results\n</code></pre>"},{"location":"user-guide/multiple-elements/#2-optimize-descriptions","title":"2. Optimize Descriptions","text":"<pre><code>// \u2705 Concise but descriptive\nautoHeal.findElement(\"Submit\", \"submit order form\");\n\n// \u274c Unnecessarily verbose - slower AI processing\nautoHeal.findElement(\"Submit\",\n    \"the submit button that is used to submit the order form when the user wants to complete their purchase after filling in all the required fields\");\n</code></pre>"},{"location":"user-guide/multiple-elements/#3-batch-disambiguation","title":"3. Batch Disambiguation","text":"<pre><code>// When finding multiple related elements, batch the requests\nList&lt;LocatorRequest&gt; requests = Arrays.asList(\n    new LocatorRequest(\"Edit\", \"edit user profile button\"),\n    new LocatorRequest(\"Edit\", \"edit user settings button\"),\n    new LocatorRequest(\"Delete\", \"delete user account button\")\n);\n\nList&lt;WebElement&gt; elements = autoHeal.findElementsBatch(requests);\n</code></pre>"},{"location":"user-guide/multiple-elements/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"user-guide/multiple-elements/#1-incorrect-element-selected","title":"1. Incorrect Element Selected","text":"<p>Problem: AI selects wrong element despite good description</p> <p>Solution: <pre><code>// Add more specific context\n// Instead of:\nautoHeal.findElement(\"Save\", \"save button\");\n\n// Use:\nautoHeal.findElement(\"Save\", \"save button in the blue form at the top of the page\");\n</code></pre></p>"},{"location":"user-guide/multiple-elements/#2-disambiguation-too-slow","title":"2. Disambiguation Too Slow","text":"<p>Problem: AI takes too long to disambiguate</p> <p>Solution: <pre><code>// Use more specific selectors when possible\n// Instead of:\nautoHeal.findElement(\"button\", \"submit button\");  // Many button elements\n\n// Use:\nautoHeal.findElement(\"input[type='submit']\", \"submit button\");  // Fewer matches\n</code></pre></p>"},{"location":"user-guide/multiple-elements/#3-inconsistent-selection","title":"3. Inconsistent Selection","text":"<p>Problem: Same description returns different elements on different runs</p> <p>Solution: <pre><code>// Make descriptions more deterministic\n// Instead of:\nautoHeal.findElement(\"Save\", \"save button\");  // Ambiguous\n\n// Use:\nautoHeal.findElement(\"Save\", \"save button in user profile form\");  // Specific context\n</code></pre></p>"},{"location":"user-guide/multiple-elements/#next-steps","title":"Next Steps","text":"<ol> <li>Performance Optimization - Optimize disambiguation performance</li> <li>Usage Examples - See more real-world disambiguation scenarios</li> <li>Troubleshooting Guide - Debug disambiguation issues</li> </ol>"},{"location":"user-guide/performance/","title":"Performance Optimization Guide","text":""},{"location":"user-guide/performance/#overview","title":"Overview","text":"<p>AutoHeal Locator offers several configuration options to optimize performance based on your specific needs. This guide covers strategies for reducing latency, minimizing costs, and maximizing throughput.</p>"},{"location":"user-guide/performance/#performance-strategies","title":"Performance Strategies","text":""},{"location":"user-guide/performance/#1-execution-strategy-configuration","title":"1. Execution Strategy Configuration","text":"<p>Choose the right execution strategy based on your requirements:</p> <pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .performance(PerformanceConfig.builder()\n        .executionStrategy(ExecutionStrategy.DOM_ONLY)      // Fastest, cheapest\n        .executionStrategy(ExecutionStrategy.VISUAL_ONLY)   // Visual analysis only\n        .executionStrategy(ExecutionStrategy.HYBRID)        // DOM first, visual fallback\n        .executionStrategy(ExecutionStrategy.PARALLEL)      // Both simultaneously\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/performance/#strategy-comparison","title":"Strategy Comparison","text":"Strategy Speed Cost Accuracy Best For <code>DOM_ONLY</code> \u26a1 Fastest \ud83d\udcb0 Cheapest \u2b50\u2b50\u2b50 Good Simple pages, static content <code>VISUAL_ONLY</code> \u26a1\u26a1 Slow \ud83d\udcb0\ud83d\udcb0\ud83d\udcb0 Expensive \u2b50\u2b50\u2b50\u2b50\u2b50 Excellent Complex UIs, dynamic content <code>HYBRID</code> \u26a1\u26a1 Medium \ud83d\udcb0\ud83d\udcb0 Medium \u2b50\u2b50\u2b50\u2b50 Very Good Recommended - Balanced <code>PARALLEL</code> \u26a1\u26a1\u26a1 Slowest \ud83d\udcb0\ud83d\udcb0\ud83d\udcb0\ud83d\udcb0 Most Expensive \u2b50\u2b50\u2b50\u2b50\u2b50 Best Critical tests, high accuracy needed"},{"location":"user-guide/performance/#caching-configuration","title":"Caching Configuration","text":"<p>Implement aggressive caching to reduce AI API calls:</p>"},{"location":"user-guide/performance/#basic-caching","title":"Basic Caching","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .cache(CacheConfig.builder()\n        .enabled(true)\n        .maxSize(10000)                           // Cache up to 10k entries\n        .expireAfterWrite(Duration.ofHours(24))   // 24-hour TTL\n        .expireAfterAccess(Duration.ofHours(6))   // Remove unused entries after 6h\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/performance/#advanced-caching-with-persistence","title":"Advanced Caching with Persistence","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .cache(CacheConfig.builder()\n        .enabled(true)\n        .maxSize(50000)\n        .expireAfterWrite(Duration.ofDays(7))     // Keep cache for a week\n        .persistToDisk(true)                      // Survive application restarts\n        .cacheDirectory(\"./autoheal-cache\")       // Custom cache location\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/performance/#cache-performance-metrics","title":"Cache Performance Metrics","text":"<pre><code>// Monitor cache effectiveness\nAutoHealLocator autoHeal = AutoHealLocator.builder()\n    .withConfiguration(config)\n    .build();\n\nCacheMetrics metrics = autoHeal.getCacheMetrics();\nSystem.out.println(\"Cache hit rate: \" + metrics.getHitRate() + \"%\");\nSystem.out.println(\"Cache size: \" + metrics.getSize());\nSystem.out.println(\"Evictions: \" + metrics.getEvictionCount());\n</code></pre>"},{"location":"user-guide/performance/#ai-provider-optimization","title":"AI Provider Optimization","text":""},{"location":"user-guide/performance/#model-selection-for-performance","title":"Model Selection for Performance","text":"<p>For Speed (Development/Testing): <pre><code>.ai(AIConfig.builder()\n    .provider(AIProvider.OPENAI)\n    .model(\"gpt-4o-mini\")                    // Fastest OpenAI model\n    .timeout(Duration.ofSeconds(15))         // Short timeout\n    .maxRetries(1)                          // Fewer retries\n    .build())\n</code></pre></p> <p>For Accuracy (Production): <pre><code>.ai(AIConfig.builder()\n    .provider(AIProvider.OPENAI)\n    .model(\"gpt-4o\")                        // Most accurate\n    .timeout(Duration.ofSeconds(45))        // Longer timeout\n    .maxRetries(3)                          // More retries\n    .build())\n</code></pre></p> <p>For Cost Optimization: <pre><code>.ai(AIConfig.builder()\n    .provider(AIProvider.GEMINI)\n    .model(\"gemini-1.5-flash\")              // Cheapest option\n    .visualAnalysisEnabled(false)           // Disable expensive visual analysis\n    .build())\n</code></pre></p>"},{"location":"user-guide/performance/#local-llm-for-zero-cost-operation","title":"Local LLM for Zero-Cost Operation","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.LOCAL_LLM)\n        .apiUrl(\"http://localhost:11434/v1/chat/completions\")\n        .model(\"llama3.1:8b\")               // Good performance/resource balance\n        .timeout(Duration.ofSeconds(60))     // Longer timeout for local processing\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/performance/#thread-pool-configuration","title":"Thread Pool Configuration","text":"<p>Optimize parallel processing for high-throughput scenarios:</p> <pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .performance(PerformanceConfig.builder()\n        .threadPoolSize(8)                   // Match CPU cores\n        .maxConcurrentRequests(20)           // Limit concurrent AI requests\n        .requestQueueSize(100)               // Buffer for high load\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/performance/#thread-pool-sizing-guidelines","title":"Thread Pool Sizing Guidelines","text":"Scenario Thread Pool Size Max Concurrent Requests Development 2-4 5 CI/CD Pipeline 4-6 10 Load Testing 8-16 20-50 Production Suite CPU cores \u00d7 2 50-100"},{"location":"user-guide/performance/#network-optimization","title":"Network Optimization","text":""},{"location":"user-guide/performance/#connection-pooling","title":"Connection Pooling","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .network(NetworkConfig.builder()\n        .connectionPoolSize(20)              // Reuse HTTP connections\n        .connectionTimeout(Duration.ofSeconds(10))\n        .readTimeout(Duration.ofSeconds(30))\n        .retryOnConnectionFailure(true)\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/performance/#request-batching","title":"Request Batching","text":"<pre><code>// Batch multiple healing requests\nList&lt;LocatorRequest&gt; requests = Arrays.asList(\n    new LocatorRequest(\"login button\", \"#login-btn\"),\n    new LocatorRequest(\"username field\", \"#username\"),\n    new LocatorRequest(\"password field\", \"#password\")\n);\n\n// Process in batch for better performance\nList&lt;LocatorResult&gt; results = autoHeal.healLocatorsBatch(requests);\n</code></pre>"},{"location":"user-guide/performance/#memory-optimization","title":"Memory Optimization","text":""},{"location":"user-guide/performance/#dom-analysis-optimization","title":"DOM Analysis Optimization","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .dom(DOMConfig.builder()\n        .maxHtmlSize(1024 * 1024)           // 1MB limit for HTML analysis\n        .removeUnnecessaryElements(true)     // Strip scripts, styles, comments\n        .compressWhitespace(true)           // Reduce token count\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/performance/#visual-analysis-optimization","title":"Visual Analysis Optimization","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .visual(VisualConfig.builder()\n        .screenshotFormat(ScreenshotFormat.JPEG)  // Smaller file size\n        .imageQuality(0.8)                       // 80% quality for balance\n        .maxImageSize(800, 600)                  // Resize large screenshots\n        .enableImageCompression(true)            // Further reduce size\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/performance/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"user-guide/performance/#built-in-metrics","title":"Built-in Metrics","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .monitoring(MonitoringConfig.builder()\n        .metricsEnabled(true)\n        .performanceLogging(true)\n        .slowOperationThreshold(Duration.ofSeconds(5))  // Log slow operations\n        .build())\n    .build();\n\n// Access metrics\nPerformanceMetrics metrics = autoHeal.getPerformanceMetrics();\nSystem.out.println(\"Average healing time: \" + metrics.getAverageHealingTime() + \"ms\");\nSystem.out.println(\"Success rate: \" + metrics.getSuccessRate() + \"%\");\nSystem.out.println(\"Cache hit rate: \" + metrics.getCacheHitRate() + \"%\");\n</code></pre>"},{"location":"user-guide/performance/#custom-performance-tracking","title":"Custom Performance Tracking","text":"<pre><code>public class PerformanceTracker {\n    public void trackHealingPerformance() {\n        long startTime = System.currentTimeMillis();\n\n        WebElement element = autoHeal.findElement(driver, \"Submit button\", \"#submit\");\n\n        long healingTime = System.currentTimeMillis() - startTime;\n\n        if (healingTime &gt; 3000) {\n            logger.warn(\"Slow healing detected: {}ms for selector\", healingTime);\n        }\n\n        // Send metrics to monitoring system\n        metricsCollector.recordHealingTime(healingTime);\n    }\n}\n</code></pre>"},{"location":"user-guide/performance/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"user-guide/performance/#development-environment","title":"Development Environment","text":"<pre><code>public static AutoHealConfiguration getDevelopmentConfig() {\n    return AutoHealConfiguration.builder()\n        .ai(AIConfig.builder()\n            .provider(AIProvider.MOCK)          // No AI costs\n            .build())\n        .cache(CacheConfig.builder()\n            .enabled(false)                     // Always fresh results\n            .build())\n        .monitoring(MonitoringConfig.builder()\n            .verboseLogging(true)               // Detailed logging\n            .build())\n        .build();\n}\n</code></pre>"},{"location":"user-guide/performance/#cicd-environment","title":"CI/CD Environment","text":"<pre><code>public static AutoHealConfiguration getCIConfig() {\n    return AutoHealConfiguration.builder()\n        .ai(AIConfig.builder()\n            .provider(AIProvider.OPENAI)\n            .model(\"gpt-4o-mini\")               // Fast and cheap\n            .timeout(Duration.ofSeconds(20))    // Fail fast\n            .maxRetries(1)                      // Don't waste time\n            .build())\n        .cache(CacheConfig.builder()\n            .enabled(true)\n            .maxSize(1000)                      // Limited cache\n            .build())\n        .performance(PerformanceConfig.builder()\n            .threadPoolSize(4)                  // Limited resources\n            .executionStrategy(ExecutionStrategy.DOM_ONLY)\n            .build())\n        .build();\n}\n</code></pre>"},{"location":"user-guide/performance/#production-environment","title":"Production Environment","text":"<pre><code>public static AutoHealConfiguration getProductionConfig() {\n    return AutoHealConfiguration.builder()\n        .ai(AIConfig.builder()\n            .provider(AIProvider.OPENAI)\n            .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n            .model(\"gpt-4o-mini\")\n            .timeout(Duration.ofSeconds(30))\n            .maxRetries(3)\n            .build())\n        .cache(CacheConfig.builder()\n            .enabled(true)\n            .maxSize(50000)                     // Large cache\n            .expireAfterWrite(Duration.ofDays(7))\n            .persistToDisk(true)\n            .build())\n        .performance(PerformanceConfig.builder()\n            .threadPoolSize(Runtime.getRuntime().availableProcessors() * 2)\n            .executionStrategy(ExecutionStrategy.HYBRID)\n            .build())\n        .resilience(ResilienceConfig.builder()\n            .circuitBreakerEnabled(true)        // Fault tolerance\n            .build())\n        .build();\n}\n</code></pre>"},{"location":"user-guide/performance/#performance-benchmarks","title":"Performance Benchmarks","text":""},{"location":"user-guide/performance/#typical-performance-metrics","title":"Typical Performance Metrics","text":"Operation DOM Only Visual Only Hybrid Parallel Simple element 200-500ms 1-3s 300-800ms 1-3s Complex element 500-1s 2-5s 800ms-2s 2-5s Failed element 1-2s 3-8s 1.5-3s 3-8s"},{"location":"user-guide/performance/#optimization-impact","title":"Optimization Impact","text":"Optimization Speed Improvement Cost Reduction Complexity Caching 80-95% for cache hits 80-95% Low DOM-only strategy 70-80% 60-70% Low Local LLM Variable 100% High Connection pooling 10-20% None Medium"},{"location":"user-guide/performance/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/performance/#1-start-with-conservative-settings","title":"1. Start with Conservative Settings","text":"<pre><code>// Begin with balanced configuration\nAutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .model(\"gpt-4o-mini\")\n        .timeout(Duration.ofSeconds(30))\n        .build())\n    .cache(CacheConfig.builder()\n        .enabled(true)\n        .maxSize(5000)\n        .build())\n    .performance(PerformanceConfig.builder()\n        .executionStrategy(ExecutionStrategy.HYBRID)\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/performance/#2-monitor-and-adjust","title":"2. Monitor and Adjust","text":"<ul> <li>Track healing times and success rates</li> <li>Monitor AI API costs</li> <li>Adjust timeouts based on actual performance</li> <li>Tune cache size based on hit rates</li> </ul>"},{"location":"user-guide/performance/#3-environment-specific-tuning","title":"3. Environment-Specific Tuning","text":"<ul> <li>Development: Prioritize speed and debugging</li> <li>CI/CD: Balance speed and reliability</li> <li>Production: Optimize for reliability and cost</li> </ul>"},{"location":"user-guide/performance/#4-gradual-optimization","title":"4. Gradual Optimization","text":"<ol> <li>Start with default settings</li> <li>Enable caching</li> <li>Tune execution strategy</li> <li>Optimize AI model selection</li> <li>Fine-tune thread pools and timeouts</li> </ol>"},{"location":"user-guide/performance/#troubleshooting-performance-issues","title":"Troubleshooting Performance Issues","text":""},{"location":"user-guide/performance/#slow-healing-times","title":"Slow Healing Times","text":"<p>Symptoms: Healing takes &gt;5 seconds consistently</p> <p>Solutions: - Reduce HTML size limits - Switch to DOM-only strategy - Use faster AI model (gpt-4o-mini) - Decrease timeout values - Check network connectivity</p>"},{"location":"user-guide/performance/#high-ai-costs","title":"High AI Costs","text":"<p>Symptoms: Unexpected high API bills</p> <p>Solutions: - Enable aggressive caching - Disable visual analysis - Switch to cheaper models - Implement request batching - Use local LLM for development</p>"},{"location":"user-guide/performance/#memory-issues","title":"Memory Issues","text":"<p>Symptoms: OutOfMemoryError or high memory usage</p> <p>Solutions: - Reduce cache size - Limit concurrent requests - Enable HTML compression - Reduce image sizes - Clear cache periodically</p>"},{"location":"user-guide/performance/#low-success-rates","title":"Low Success Rates","text":"<p>Symptoms: Elements frequently not found</p> <p>Solutions: - Increase timeouts - Enable visual analysis - Use more accurate AI model - Check HTML preprocessing settings - Review element descriptions</p>"},{"location":"user-guide/performance/#next-steps","title":"Next Steps","text":"<ol> <li>Configuration Guide</li> <li>Usage Examples</li> <li>Troubleshooting Guide</li> </ol>"},{"location":"user-guide/playwright-integration/","title":"Playwright AutoHeal Integration Guide","text":""},{"location":"user-guide/playwright-integration/#overview","title":"Overview","text":"<p>This guide demonstrates how to integrate AutoHeal capabilities with your Playwright-based test automation framework. AutoHeal provides intelligent element location with self-healing capabilities, caching, and AI-powered recovery when selectors fail.</p>"},{"location":"user-guide/playwright-integration/#project-structure","title":"Project Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 main/java/\n\u2502   \u251c\u2500\u2500 com/autoheal/                          # AutoHeal core library\n\u2502   \u2502   \u251c\u2500\u2500 impl/adapter/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 PlaywrightWebAutomationAdapter.java    # Playwright integration\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 PlaywrightElementWrapper.java          # Element wrapper\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 com/example/                           # Your test framework\n\u2502       \u251c\u2500\u2500 base/\n\u2502       \u2502   \u251c\u2500\u2500 BasePage.java                  # Enhanced base page with AutoHeal\n\u2502       \u2502   \u2514\u2500\u2500 BaseTest.java                  # Test base class\n\u2502       \u251c\u2500\u2500 config/\n\u2502       \u2502   \u2514\u2500\u2500 AutoHealConfigurationManager.java      # Configuration management\n\u2502       \u251c\u2500\u2500 pages/\n\u2502       \u2502   \u251c\u2500\u2500 LoginPage.java                 # Example page with AutoHeal\n\u2502       \u2502   \u2514\u2500\u2500 InventoryPage.java             # Example inventory page\n\u2502       \u251c\u2500\u2500 tests/\n\u2502       \u2502   \u2514\u2500\u2500 EnhancedLoginTest.java         # Comprehensive test examples\n\u2502       \u2514\u2500\u2500 reporting/\n\u2502           \u2514\u2500\u2500 AutoHealTestReporter.java      # Test reporting and metrics\n\u2514\u2500\u2500 resources/\n    \u251c\u2500\u2500 autoheal-playwright.properties         # Configuration file\n    \u2514\u2500\u2500 logback-test.xml                       # Logging configuration\n</code></pre>"},{"location":"user-guide/playwright-integration/#quick-start","title":"Quick Start","text":""},{"location":"user-guide/playwright-integration/#1-dependencies","title":"1. Dependencies","text":"<p>Your <code>pom.xml</code> already includes all necessary dependencies:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.microsoft.playwright&lt;/groupId&gt;\n    &lt;artifactId&gt;playwright&lt;/artifactId&gt;\n    &lt;version&gt;1.40.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"user-guide/playwright-integration/#2-configuration","title":"2. Configuration","text":"<p>Configure AutoHeal properties in <code>src/main/resources/autoheal-playwright.properties</code>:</p> <pre><code># Core AutoHeal Configuration\nautoheal.cache.maximum-size=15000\nautoheal.ai.provider=openai\nautoheal.ai.api-key=${OPENAI_API_KEY:}\nautoheal.performance.element-timeout=15s\nautoheal.features.enable-ai-healing=true\n\n# Test Environment\nautoheal.test.base-url=https://www.saucedemo.com\nautoheal.test.headless=false\nautoheal.test.browser=chromium\n</code></pre>"},{"location":"user-guide/playwright-integration/#3-base-classes","title":"3. Base Classes","text":""},{"location":"user-guide/playwright-integration/#basepage-with-autoheal","title":"BasePage with AutoHeal","text":"<pre><code>public abstract class BasePage {\n    protected final Page page;\n    protected final AutoHealLocator autoHeal;\n\n    public BasePage(Page page) {\n        this.page = page;\n        this.adapter = new PlaywrightWebAutomationAdapter(page);\n        this.autoHeal = AutoHealLocator.builder()\n            .withWebAdapter(adapter)\n            .withConfiguration(AutoHealConfigurationManager.getConfiguration())\n            .build();\n    }\n\n    protected void click(String selector, String description) {\n        PlaywrightElementWrapper.WrappedElement element = \n            findElementWithHealing(selector, description);\n        element.click();\n    }\n}\n</code></pre>"},{"location":"user-guide/playwright-integration/#basetest-setup","title":"BaseTest Setup","text":"<pre><code>public abstract class BaseTest {\n    protected static Playwright playwright;\n    protected static Browser browser;\n    protected Page page;\n\n    @BeforeAll\n    static void setupPlaywright() {\n        playwright = Playwright.create();\n        browser = playwright.chromium().launch(new BrowserType.LaunchOptions()\n            .setHeadless(false));\n    }\n\n    @BeforeEach\n    void setupTest() {\n        BrowserContext context = browser.newContext();\n        page = context.newPage();\n    }\n}\n</code></pre>"},{"location":"user-guide/playwright-integration/#4-page-object-implementation","title":"4. Page Object Implementation","text":"<pre><code>public class LoginPage extends BasePage {\n    private static final String USERNAME_FIELD = \"#user-name\";\n    private static final String PASSWORD_FIELD = \"#password\";\n    private static final String LOGIN_BUTTON = \"#login-button\";\n\n    // Descriptions help AutoHeal understand element purpose\n    private static final String USERNAME_DESCRIPTION = \"Username input field for login\";\n    private static final String PASSWORD_DESCRIPTION = \"Password input field for login\";\n\n    public LoginPage enterUsername(String username) {\n        // AutoHeal will use semantic description if selector fails\n        type(USERNAME_FIELD, username, USERNAME_DESCRIPTION);\n        return this;\n    }\n\n    public void login(String username, String password) {\n        enterUsername(username)\n            .enterPassword(password)\n            .clickLoginButton();\n    }\n}\n</code></pre>"},{"location":"user-guide/playwright-integration/#5-test-implementation","title":"5. Test Implementation","text":"<pre><code>@DisplayName(\"Enhanced Login Tests with AutoHeal\")\npublic class EnhancedLoginTest extends BaseTest {\n\n    @Test\n    void testSuccessfulLogin() {\n        LoginPage loginPage = new LoginPage(page);\n        InventoryPage inventoryPage = new InventoryPage(page);\n\n        // AutoHeal will handle selector changes and caching\n        loginPage.goToLoginPage(\"https://www.saucedemo.com\");\n\n        LoginPage.LoginResult result = loginPage.performValidatedLogin(\n            \"standard_user\", \"secret_sauce\");\n\n        assertTrue(result.isSuccessful());\n        assertTrue(inventoryPage.isInventoryPageLoaded());\n    }\n}\n</code></pre>"},{"location":"user-guide/playwright-integration/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/playwright-integration/#1-autoheal-metrics-and-monitoring","title":"1. AutoHeal Metrics and Monitoring","text":"<pre><code>// Get AutoHeal performance metrics\nString metrics = loginPage.getAutoHealMetrics();\nlogger.info(\"AutoHeal metrics: {}\", metrics);\n\n// Check AutoHeal health status\nboolean healthy = loginPage.isAutoHealHealthy();\n\n// Clear cache for testing\nloginPage.clearAutoHealCache();\n</code></pre>"},{"location":"user-guide/playwright-integration/#2-configuration-management","title":"2. Configuration Management","text":"<pre><code>// Access configuration\nString baseUrl = AutoHealConfigurationManager.getBaseUrl();\nboolean aiEnabled = AutoHealConfigurationManager.isAIHealingEnabled();\n\n// Print current configuration\nAutoHealConfigurationManager.printConfiguration();\n</code></pre>"},{"location":"user-guide/playwright-integration/#3-test-reporting","title":"3. Test Reporting","text":"<pre><code>// Record test execution\nAutoHealTestReporter.recordTestStart(\"testLogin\", \"LoginTest\");\n\n// Record healing events\nAutoHealTestReporter.recordHealingEvent(\n    \"testLogin\", \"#old-selector\", \"#new-selector\", \n    \"AI_HEALING\", true, \"Original selector not found\");\n\n// Generate reports\nAutoHealTestReporter.generateReport();\n</code></pre>"},{"location":"user-guide/playwright-integration/#running-tests","title":"Running Tests","text":""},{"location":"user-guide/playwright-integration/#command-line-options","title":"Command Line Options","text":"<pre><code># Run with different browsers\nmvn test -Dbrowser=firefox\nmvn test -Dbrowser=webkit\n\n# Run in headless mode\nmvn test -Dheadless=true\n\n# Enable tracing\nmvn test -Dtrace=true\n\n# Set custom base URL\nmvn test -DBASE_URL=https://staging.saucedemo.com\n\n# Enable AI healing with API key\nmvn test -DOPENAI_API_KEY=your-api-key\n</code></pre>"},{"location":"user-guide/playwright-integration/#maven-profiles","title":"Maven Profiles","text":"<pre><code># Run integration tests\nmvn test -Pintegration\n\n# Run performance tests  \nmvn test -Pperformance\n\n# Clean and run all tests\nmvn clean test\n</code></pre>"},{"location":"user-guide/playwright-integration/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/playwright-integration/#1-selector-strategies","title":"1. Selector Strategies","text":"<pre><code>// \u2705 Good: Semantic descriptions help AutoHeal\nprivate static final String LOGIN_BUTTON = \"#login-button\";\nprivate static final String LOGIN_DESCRIPTION = \"Submit login form button\";\n\n// \u2705 Good: Multiple selector strategies\nclick(LOGIN_BUTTON, LOGIN_DESCRIPTION);\n\n// \u274c Avoid: Generic descriptions\nclick(\"#login-button\", \"button\");\n</code></pre>"},{"location":"user-guide/playwright-integration/#2-error-handling","title":"2. Error Handling","text":"<pre><code>// \u2705 Good: Validated operations with detailed results\nLoginPage.LoginResult result = loginPage.performValidatedLogin(username, password);\nif (!result.isSuccessful()) {\n    logger.error(\"Login failed: {}\", result.getMessage());\n    captureScreenshot(\"login_failure\");\n}\n</code></pre>"},{"location":"user-guide/playwright-integration/#3-configuration","title":"3. Configuration","text":"<pre><code>// \u2705 Good: Environment-specific configuration\nautoheal.test.base-url=${BASE_URL:https://www.saucedemo.com}\nautoheal.test.environment=${TEST_ENV:local}\n\n// \u2705 Good: Feature flags for different environments\nautoheal.features.enable-ai-healing=${AI_HEALING:true}\nautoheal.features.enable-visual-healing=${VISUAL_HEALING:false}\n</code></pre>"},{"location":"user-guide/playwright-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/playwright-integration/#common-issues","title":"Common Issues","text":"<ol> <li>AutoHeal Not Working</li> <li>Verify <code>autoheal-playwright.properties</code> is in resources</li> <li>Check OPENAI_API_KEY environment variable</li> <li> <p>Enable DEBUG logging for <code>com.autoheal</code></p> </li> <li> <p>Slow Test Execution</p> </li> <li>Increase thread pool size: <code>autoheal.performance.thread-pool-size=16</code></li> <li>Reduce element timeout: <code>autoheal.performance.element-timeout=10s</code></li> <li> <p>Disable visual healing: <code>autoheal.features.enable-visual-healing=false</code></p> </li> <li> <p>High Cache Miss Rate</p> </li> <li>Increase cache size: <code>autoheal.cache.maximum-size=20000</code></li> <li>Extend cache duration: <code>autoheal.cache.expire-after-access=4h</code></li> <li>Use consistent element descriptions</li> </ol>"},{"location":"user-guide/playwright-integration/#debug-logging","title":"Debug Logging","text":"<p>Enable detailed logging in <code>logback-test.xml</code>:</p> <pre><code>&lt;logger name=\"com.autoheal\" level=\"DEBUG\"/&gt;\n&lt;logger name=\"com.example.pages\" level=\"DEBUG\"/&gt;\n</code></pre>"},{"location":"user-guide/playwright-integration/#report-analysis","title":"Report Analysis","text":"<p>Check generated reports in <code>target/reports/autoheal/</code>: - <code>latest-report.html</code> - Visual test execution report - <code>latest-report.json</code> - Programmatic access to metrics - <code>autoheal-metrics-*.csv</code> - Data for trend analysis</p>"},{"location":"user-guide/playwright-integration/#environment-variables","title":"Environment Variables","text":"<pre><code># Required for AI healing\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n\n# Optional configuration\nexport TEST_ENV=\"staging\"\nexport BASE_URL=\"https://staging.saucedemo.com\"\nexport HEADLESS=\"true\"\nexport BROWSER=\"firefox\"\n</code></pre>"},{"location":"user-guide/playwright-integration/#performance-tuning","title":"Performance Tuning","text":""},{"location":"user-guide/playwright-integration/#for-high-volume-testing","title":"For High-Volume Testing","text":"<pre><code>autoheal.performance.thread-pool-size=20\nautoheal.performance.max-concurrent-requests=100\nautoheal.cache.maximum-size=25000\nautoheal.resilience.circuit-breaker-failure-threshold=10\n</code></pre>"},{"location":"user-guide/playwright-integration/#for-developmentdebugging","title":"For Development/Debugging","text":"<pre><code>autoheal.performance.thread-pool-size=4\nautoheal.playwright.slow-motion=100\nautoheal.features.enable-ai-healing=false\nlogging.level.com.autoheal=DEBUG\n</code></pre> <p>This integration provides a robust, enterprise-ready test automation framework with self-healing capabilities, comprehensive reporting, and professional configuration management.</p>"},{"location":"user-guide/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with AutoHeal Locator in minutes.</p>"},{"location":"user-guide/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 8 or higher</li> <li>Maven or Gradle</li> <li>Selenium WebDriver</li> <li>OpenAI API key (for AI-powered features)</li> </ul>"},{"location":"user-guide/quick-start/#installation","title":"Installation","text":""},{"location":"user-guide/quick-start/#maven","title":"Maven","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.autoheal&lt;/groupId&gt;\n    &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n    &lt;version&gt;2.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"user-guide/quick-start/#gradle","title":"Gradle","text":"<pre><code>implementation 'com.autoheal:autoheal-locator:2.0.0'\n</code></pre>"},{"location":"user-guide/quick-start/#basic-example","title":"Basic Example","text":"<pre><code>import com.autoheal.AutoHealLocator;\nimport com.autoheal.config.AIConfig;\nimport com.autoheal.config.AutoHealConfiguration;\nimport com.autoheal.impl.adapter.SeleniumWebAutomationAdapter;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class QuickStartExample {\n    public static void main(String[] args) {\n        WebDriver driver = new ChromeDriver();\n\n        // Create AutoHeal locator\n        AutoHealLocator locator = new AutoHealLocator.Builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(AutoHealConfiguration.builder()\n                .aiConfig(AIConfig.builder()\n                    .apiKey(\"your-openai-api-key\")\n                    .build())\n                .build())\n            .build();\n\n        try {\n            driver.get(\"https://example.com\");\n\n            // Find element with CSS selector and description\n            WebElement button = locator.findElement(\"#submit-btn\", \"Submit button\");\n            button.click();\n\n            // Find element with XPath selector and description\n            WebElement input = locator.findElement(\n                \"//input[@type='email']\",  // XPath selector\n                \"Email input field\"        // description for AI healing\n            );\n            input.sendKeys(\"user@example.com\");\n\n        } finally {\n            driver.quit();\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/quick-start/#configuration-options","title":"Configuration Options","text":""},{"location":"user-guide/quick-start/#execution-strategies","title":"Execution Strategies","text":"<pre><code>// Cost-optimized (recommended)\nAutoHealLocator locator = new AutoHealLocator.Builder()\n    .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n    .withConfiguration(AutoHealConfiguration.builder()\n        .executionStrategy(ExecutionStrategy.SMART_SEQUENTIAL)\n        .build())\n    .build();\n\n// DOM-only (fastest, cheapest)\nAutoHealLocator locator = new AutoHealLocator.Builder()\n    .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n    .withConfiguration(AutoHealConfiguration.builder()\n        .executionStrategy(ExecutionStrategy.DOM_ONLY)\n        .build())\n    .build();\n\n// Visual-first (most accurate)\nAutoHealLocator locator = new AutoHealLocator.Builder()\n    .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n    .withConfiguration(AutoHealConfiguration.builder()\n        .executionStrategy(ExecutionStrategy.VISUAL_FIRST)\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/quick-start/#performance-tuning","title":"Performance Tuning","text":"<pre><code>AutoHealLocator locator = new AutoHealLocator.Builder()\n    .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n    .withConfiguration(AutoHealConfiguration.builder()\n        .performanceConfig(PerformanceConfig.builder()\n            .enableCaching(true)\n            .maxCacheSize(1000)\n            .cacheTimeout(Duration.ofMinutes(30))\n            .build())\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration - Detailed configuration options</li> <li>Examples - More comprehensive examples</li> <li>Performance - Optimization and tuning</li> <li>Spring Boot Integration - Spring Boot setup</li> </ul>"},{"location":"user-guide/reporting/","title":"AutoHeal Reporting System","text":""},{"location":"user-guide/reporting/#overview","title":"Overview","text":"<p>AutoHeal automatically generates comprehensive reports of all healing activities, providing insights into test stability, AI usage, and element reliability. Reports are generated in your test project (not the AutoHeal source project).</p>"},{"location":"user-guide/reporting/#report-configuration","title":"Report Configuration","text":""},{"location":"user-guide/reporting/#basic-reporting-setup","title":"Basic Reporting Setup","text":"<pre><code>AutoHealConfiguration config = AutoHealConfiguration.builder()\n    .reporting(ReportingConfig.builder()\n        .enabled(true)                          // Enable reporting\n        .generateHTML(true)                     // Interactive HTML reports\n        .generateJSON(true)                     // Machine-readable data\n        .generateText(true)                     // Human-readable summary\n        .outputDirectory(\"./autoheal-reports\")  // Output to your project\n        .reportNamePrefix(\"MyApp_AutoHeal\")     // Prefix for report files\n        .consoleLogging(true)                   // Real-time console output\n        .build())\n    .build();\n</code></pre>"},{"location":"user-guide/reporting/#report-output-location","title":"Report Output Location","text":"<p>Reports are generated in your test project directory:</p> <pre><code>your-test-project/\n\u251c\u2500\u2500 src/test/java/\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 autoheal-reports/              \u2190 Reports generated here\n\u2502   \u251c\u2500\u2500 MyApp_AutoHeal_2024-01-15_14-30-25.html\n\u2502   \u251c\u2500\u2500 MyApp_AutoHeal_2024-01-15_14-30-25.json\n\u2502   \u251c\u2500\u2500 MyApp_AutoHeal_2024-01-15_14-30-25.txt\n\u2502   \u2514\u2500\u2500 screenshots/\n\u2502       \u251c\u2500\u2500 healing_001.png\n\u2502       \u2514\u2500\u2500 healing_002.png\n\u2514\u2500\u2500 target/\n</code></pre>"},{"location":"user-guide/reporting/#sample-reports","title":"Sample Reports","text":""},{"location":"user-guide/reporting/#1-html-report-interactive-dashboard","title":"1. HTML Report (Interactive Dashboard)","text":"<p>File: <code>autoheal-reports/MyApp_AutoHeal_2024-01-15_14-30-25.html</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;AutoHeal Test Report - MyApp&lt;/title&gt;\n    &lt;style&gt;\n        .success { color: green; font-weight: bold; }\n        .warning { color: orange; font-weight: bold; }\n        .failure { color: red; font-weight: bold; }\n        .metric-card { border: 1px solid #ddd; padding: 15px; margin: 10px; border-radius: 5px; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\ud83e\udd16 AutoHeal Test Report&lt;/h1&gt;\n    &lt;p&gt;&lt;strong&gt;Test Suite:&lt;/strong&gt; MyApp Test Suite&lt;/p&gt;\n    &lt;p&gt;&lt;strong&gt;Generated:&lt;/strong&gt; 2024-01-15 14:30:25&lt;/p&gt;\n    &lt;p&gt;&lt;strong&gt;Duration:&lt;/strong&gt; 5 minutes 32 seconds&lt;/p&gt;\n\n    &lt;h2&gt;\ud83d\udcca Summary Metrics&lt;/h2&gt;\n    &lt;div class=\"metric-card\"&gt;\n        &lt;h3&gt;Healing Success Rate&lt;/h3&gt;\n        &lt;p class=\"success\"&gt;92.3% (24/26 elements healed successfully)&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"metric-card\"&gt;\n        &lt;h3&gt;AI Usage&lt;/h3&gt;\n        &lt;p&gt;DOM Analysis: 18 requests (avg: 1.2s)&lt;/p&gt;\n        &lt;p&gt;Visual Analysis: 6 requests (avg: 3.4s)&lt;/p&gt;\n        &lt;p&gt;Total Tokens Used: 15,420&lt;/p&gt;\n        &lt;p&gt;Estimated Cost: $0.23&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"metric-card\"&gt;\n        &lt;h3&gt;Cache Performance&lt;/h3&gt;\n        &lt;p class=\"success\"&gt;Cache Hit Rate: 78.5% (51/65 requests)&lt;/p&gt;\n        &lt;p&gt;Cache Saved: $1.45 in AI costs&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;h2&gt;\ud83d\udd0d Detailed Healing Activities&lt;/h2&gt;\n    &lt;table border=\"1\" style=\"width: 100%; border-collapse: collapse;\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;Test Method&lt;/th&gt;\n                &lt;th&gt;Element Description&lt;/th&gt;\n                &lt;th&gt;Original Selector&lt;/th&gt;\n                &lt;th&gt;Status&lt;/th&gt;\n                &lt;th&gt;Healing Strategy&lt;/th&gt;\n                &lt;th&gt;New Selector&lt;/th&gt;\n                &lt;th&gt;Confidence&lt;/th&gt;\n                &lt;th&gt;Duration&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;tr&gt;\n                &lt;td&gt;testUserLogin()&lt;/td&gt;\n                &lt;td&gt;username input field on login page&lt;/td&gt;\n                &lt;td&gt;#username&lt;/td&gt;\n                &lt;td&gt;&lt;span class=\"success\"&gt;\u2705 SUCCESS&lt;/span&gt;&lt;/td&gt;\n                &lt;td&gt;Original Selector&lt;/td&gt;\n                &lt;td&gt;#username&lt;/td&gt;\n                &lt;td&gt;100%&lt;/td&gt;\n                &lt;td&gt;45ms&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;testUserLogin()&lt;/td&gt;\n                &lt;td&gt;login submit button&lt;/td&gt;\n                &lt;td&gt;#login-btn&lt;/td&gt;\n                &lt;td&gt;&lt;span class=\"warning\"&gt;\ud83d\udd04 HEALED&lt;/span&gt;&lt;/td&gt;\n                &lt;td&gt;DOM Analysis&lt;/td&gt;\n                &lt;td&gt;button[type='submit'].btn-primary&lt;/td&gt;\n                &lt;td&gt;95.2%&lt;/td&gt;\n                &lt;td&gt;1,234ms&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;testProductSearch()&lt;/td&gt;\n                &lt;td&gt;search results container&lt;/td&gt;\n                &lt;td&gt;.results-grid&lt;/td&gt;\n                &lt;td&gt;&lt;span class=\"warning\"&gt;\ud83d\udd04 HEALED&lt;/span&gt;&lt;/td&gt;\n                &lt;td&gt;Visual Analysis&lt;/td&gt;\n                &lt;td&gt;.search-results-container&lt;/td&gt;\n                &lt;td&gt;89.7%&lt;/td&gt;\n                &lt;td&gt;3,456ms&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;testCheckout()&lt;/td&gt;\n                &lt;td&gt;payment button&lt;/td&gt;\n                &lt;td&gt;#pay-now&lt;/td&gt;\n                &lt;td&gt;&lt;span class=\"failure\"&gt;\u274c FAILED&lt;/span&gt;&lt;/td&gt;\n                &lt;td&gt;All Strategies Attempted&lt;/td&gt;\n                &lt;td&gt;N/A&lt;/td&gt;\n                &lt;td&gt;0%&lt;/td&gt;\n                &lt;td&gt;8,901ms&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;h2&gt;\ud83d\udcc8 Performance Trends&lt;/h2&gt;\n    &lt;div class=\"metric-card\"&gt;\n        &lt;h3&gt;Most Problematic Selectors&lt;/h3&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;strong&gt;#dynamic-content&lt;/strong&gt; - Failed 3 times in different tests&lt;/li&gt;\n            &lt;li&gt;&lt;strong&gt;.modal-close&lt;/strong&gt; - Required healing 2 times (Visual Analysis needed)&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;h2&gt;\ud83d\udca1 Recommendations&lt;/h2&gt;\n    &lt;div class=\"metric-card\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;\u2705 &lt;strong&gt;Great cache performance&lt;/strong&gt; - 78.5% hit rate saving costs&lt;/li&gt;\n            &lt;li&gt;\u26a0\ufe0f &lt;strong&gt;Consider data-testid attributes&lt;/strong&gt; for #dynamic-content selector&lt;/li&gt;\n            &lt;li&gt;\u26a0\ufe0f &lt;strong&gt;Payment button needs attention&lt;/strong&gt; - consistently failing&lt;/li&gt;\n            &lt;li&gt;\ud83d\udcb0 &lt;strong&gt;Cost optimization&lt;/strong&gt; - Visual analysis used 26% of budget, consider DOM-only for some tests&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"user-guide/reporting/#2-json-report-machine-readable","title":"2. JSON Report (Machine Readable)","text":"<p>File: <code>autoheal-reports/MyApp_AutoHeal_2024-01-15_14-30-25.json</code></p> <pre><code>{\n  \"reportMetadata\": {\n    \"generatedAt\": \"2024-01-15T14:30:25Z\",\n    \"testSuite\": \"MyApp Test Suite\",\n    \"autoHealVersion\": \"1.0-SNAPSHOT\",\n    \"duration\": \"PT5M32S\",\n    \"totalTests\": 8\n  },\n  \"summary\": {\n    \"totalElements\": 26,\n    \"successfulHealing\": 24,\n    \"failedHealing\": 2,\n    \"healingSuccessRate\": 92.3,\n    \"cacheHitRate\": 78.5,\n    \"totalCost\": 0.23,\n    \"savedCost\": 1.45\n  },\n  \"aiUsage\": {\n    \"domAnalysisRequests\": 18,\n    \"visualAnalysisRequests\": 6,\n    \"totalTokensUsed\": 15420,\n    \"avgDomResponseTime\": 1200,\n    \"avgVisualResponseTime\": 3400\n  },\n  \"healingActivities\": [\n    {\n      \"testMethod\": \"testUserLogin()\",\n      \"elementDescription\": \"username input field on login page\",\n      \"originalSelector\": \"#username\",\n      \"status\": \"SUCCESS\",\n      \"strategy\": \"ORIGINAL_SELECTOR\",\n      \"newSelector\": \"#username\",\n      \"confidence\": 100.0,\n      \"duration\": 45,\n      \"timestamp\": \"2024-01-15T14:25:12Z\"\n    },\n    {\n      \"testMethod\": \"testUserLogin()\",\n      \"elementDescription\": \"login submit button\",\n      \"originalSelector\": \"#login-btn\",\n      \"status\": \"HEALED\",\n      \"strategy\": \"DOM_ANALYSIS\",\n      \"newSelector\": \"button[type='submit'].btn-primary\",\n      \"confidence\": 95.2,\n      \"duration\": 1234,\n      \"timestamp\": \"2024-01-15T14:25:13Z\",\n      \"aiReasoning\": \"Found button with matching text 'Sign In' and submit type\",\n      \"alternatives\": [\"#submit-btn\", \".login-button\"]\n    },\n    {\n      \"testMethod\": \"testProductSearch()\",\n      \"elementDescription\": \"search results container\",\n      \"originalSelector\": \".results-grid\",\n      \"status\": \"HEALED\",\n      \"strategy\": \"VISUAL_ANALYSIS\",\n      \"newSelector\": \".search-results-container\",\n      \"confidence\": 89.7,\n      \"duration\": 3456,\n      \"timestamp\": \"2024-01-15T14:26:45Z\",\n      \"aiReasoning\": \"Visual analysis identified grid layout with product cards\",\n      \"screenshot\": \"screenshots/healing_001.png\"\n    },\n    {\n      \"testMethod\": \"testCheckout()\",\n      \"elementDescription\": \"payment button\",\n      \"originalSelector\": \"#pay-now\",\n      \"status\": \"FAILED\",\n      \"strategy\": \"ALL_STRATEGIES_FAILED\",\n      \"confidence\": 0.0,\n      \"duration\": 8901,\n      \"timestamp\": \"2024-01-15T14:28:30Z\",\n      \"error\": \"Element not found after trying all healing strategies\",\n      \"attemptedStrategies\": [\"CACHE\", \"DOM_ANALYSIS\", \"VISUAL_ANALYSIS\"]\n    }\n  ],\n  \"recommendations\": [\n    {\n      \"type\": \"SELECTOR_IMPROVEMENT\",\n      \"message\": \"Consider using data-testid attributes for #dynamic-content\",\n      \"severity\": \"MEDIUM\",\n      \"affectedElements\": [\"#dynamic-content\", \".modal-close\"]\n    },\n    {\n      \"type\": \"COST_OPTIMIZATION\",\n      \"message\": \"Visual analysis used 26% of AI budget, consider DOM-only strategy\",\n      \"severity\": \"LOW\",\n      \"potentialSaving\": \"$0.15\"\n    }\n  ]\n}\n</code></pre>"},{"location":"user-guide/reporting/#3-text-report-human-readable-summary","title":"3. Text Report (Human Readable Summary)","text":"<p>File: <code>autoheal-reports/MyApp_AutoHeal_2024-01-15_14-30-25.txt</code></p> <pre><code>================================================================================\n                            \ud83e\udd16 AutoHeal Test Report\n================================================================================\nTest Suite: MyApp Test Suite\nGenerated:  2024-01-15 14:30:25\nDuration:   5 minutes 32 seconds\nAutoHeal:   v1.0-SNAPSHOT\n\n================================================================================\n                                \ud83d\udcca SUMMARY\n================================================================================\n\u2705 Total Tests Executed:      8\n\u2705 Elements Located:          26\n\u2705 Successful Healing:        24  (92.3%)\n\u274c Failed Healing:             2  (7.7%)\n\ud83d\udd04 Cache Hit Rate:            78.5% (51/65 requests)\n\ud83d\udcb0 Total AI Cost:            $0.23\n\ud83d\udcb0 Cache Saved:              $1.45\n\n================================================================================\n                            \ud83d\udd0d HEALING BREAKDOWN\n================================================================================\nStrategy             | Count | Avg Time | Success Rate\n---------------------|-------|----------|-------------\nOriginal Selector    |   14  |   52ms   |    100%\nCache Hit            |   51  |   12ms   |    100%\nDOM Analysis         |   18  |  1.2s    |    94.4%\nVisual Analysis      |    6  |  3.4s    |    83.3%\nAll Failed           |    2  |  8.9s    |      0%\n\n================================================================================\n                            \u26a1 PERFORMANCE METRICS\n================================================================================\n\ud83d\ude80 Fastest Healing:          45ms  (#username - Original Selector)\n\ud83d\udc0c Slowest Healing:          8.9s  (#pay-now - All Strategies Failed)\n\ud83d\udcc8 Average Healing Time:     1.8s\n\ud83e\udde0 AI Token Usage:          15,420 tokens\n\ud83d\udcb0 Cost per Token:          $0.000015\n\n================================================================================\n                            \ud83d\udd27 DETAILED ACTIVITIES\n================================================================================\n[14:25:12] testUserLogin() \u2192 username input field on login page\n           \u2705 SUCCESS | #username | Original Selector | 45ms\n\n[14:25:13] testUserLogin() \u2192 login submit button\n           \ud83d\udd04 HEALED | #login-btn \u2192 button[type='submit'].btn-primary\n           Strategy: DOM Analysis | Confidence: 95.2% | 1,234ms\n           Reasoning: Found button with matching text 'Sign In' and submit type\n\n[14:26:45] testProductSearch() \u2192 search results container\n           \ud83d\udd04 HEALED | .results-grid \u2192 .search-results-container\n           Strategy: Visual Analysis | Confidence: 89.7% | 3,456ms\n           Reasoning: Visual analysis identified grid layout with product cards\n\n[14:28:30] testCheckout() \u2192 payment button\n           \u274c FAILED | #pay-now | All Strategies Failed | 8,901ms\n           Error: Element not found after trying all healing strategies\n\n================================================================================\n                            \ud83d\udca1 RECOMMENDATIONS\n================================================================================\n\u26a0\ufe0f  ATTENTION NEEDED:\n     \u2022 #pay-now selector failed in testCheckout() - investigate payment flow\n     \u2022 #dynamic-content failed 3 times across tests\n\n\u2705  WORKING WELL:\n     \u2022 Cache performance excellent at 78.5% hit rate\n     \u2022 DOM Analysis strategy very reliable at 94.4% success\n\n\ud83d\udd27  IMPROVEMENTS:\n     \u2022 Consider data-testid attributes for dynamic content selectors\n     \u2022 Visual Analysis used 26% of AI budget - evaluate if DOM-only sufficient\n\n\ud83d\udcb0  COST OPTIMIZATION:\n     \u2022 Current spend: $0.23 per test run\n     \u2022 Cache saved: $1.45 (86% cost reduction)\n     \u2022 Potential saving with DOM-only strategy: $0.15\n\n================================================================================\n                            \ud83d\udcc1 GENERATED FILES\n================================================================================\n\ud83d\udcc4 HTML Report:     autoheal-reports/MyApp_AutoHeal_2024-01-15_14-30-25.html\n\ud83d\udcca JSON Data:       autoheal-reports/MyApp_AutoHeal_2024-01-15_14-30-25.json\n\ud83d\udcdd Text Summary:    autoheal-reports/MyApp_AutoHeal_2024-01-15_14-30-25.txt\n\ud83d\uddbc\ufe0f  Screenshots:    autoheal-reports/screenshots/ (2 files)\n\n================================================================================\n</code></pre>"},{"location":"user-guide/reporting/#enabling-reporting-in-your-tests","title":"Enabling Reporting in Your Tests","text":""},{"location":"user-guide/reporting/#maventestng-example","title":"Maven/TestNG Example","text":"<pre><code>@BeforeClass\npublic void setUpAutoHeal() {\n    AutoHealConfiguration config = AutoHealConfiguration.builder()\n        .ai(AIConfig.builder()\n            .provider(AIProvider.OPENAI)\n            .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n            .build())\n        .reporting(ReportingConfig.builder()\n            .enabled(true)\n            .outputDirectory(\"./test-reports/autoheal\")  // In your project\n            .generateHTML(true)\n            .reportNamePrefix(\"MyApp_\" + new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date()))\n            .build())\n        .build();\n\n    autoHeal = AutoHealLocator.builder()\n        .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n        .withConfiguration(config)\n        .build();\n}\n\n@AfterClass\npublic void tearDownAutoHeal() {\n    if (autoHeal != null) {\n        autoHeal.shutdown(); // \ud83c\udfaf This generates the reports in YOUR project\n    }\n}\n</code></pre>"},{"location":"user-guide/reporting/#junit-5-example","title":"JUnit 5 Example","text":"<pre><code>@AfterEach\nvoid generateReports() {\n    autoHeal.shutdown(); // Reports generated in test/reports/autoheal/\n\n    // Reports are created in YOUR project directory:\n    // your-project/test/reports/autoheal/YourApp_AutoHeal_2024-01-15.html\n}\n</code></pre>"},{"location":"user-guide/reporting/#cucumber-integration","title":"Cucumber Integration","text":"<pre><code>@After\npublic void tearDown(Scenario scenario) {\n    if (autoHeal != null) {\n        // Reports include Cucumber scenario information\n        autoHeal.shutdown();\n\n        // Generated in: features/reports/autoheal/\n        System.out.println(\"AutoHeal report generated for scenario: \" + scenario.getName());\n    }\n}\n</code></pre>"},{"location":"user-guide/reporting/#report-integration","title":"Report Integration","text":""},{"location":"user-guide/reporting/#cicd-pipeline-integration","title":"CI/CD Pipeline Integration","text":"<pre><code># GitHub Actions example\n- name: Generate Test Reports\n  run: mvn test\n\n- name: Archive AutoHeal Reports\n  uses: actions/upload-artifact@v3\n  with:\n    name: autoheal-reports\n    path: test-reports/autoheal/\n\n- name: Publish HTML Report\n  uses: peaceiris/actions-gh-pages@v3\n  with:\n    github_token: ${{ secrets.GITHUB_TOKEN }}\n    publish_dir: test-reports/autoheal/\n</code></pre>"},{"location":"user-guide/reporting/#email-reports","title":"Email Reports","text":"<pre><code>// Send reports via email after test execution\n@AfterSuite\npublic void emailReports() {\n    File htmlReport = new File(\"./autoheal-reports/latest.html\");\n    EmailUtils.sendReport(\"team@company.com\", \"AutoHeal Test Report\", htmlReport);\n}\n</code></pre>"},{"location":"user-guide/reporting/#best-practices","title":"Best Practices","text":"<ol> <li>\ud83d\udcc1 Organize Reports: Use meaningful prefixes and directories</li> <li>\ud83d\udd04 Archive Old Reports: Set up rotation to avoid disk space issues</li> <li>\ud83d\udcca Monitor Trends: Track healing success rates over time</li> <li>\ud83d\udcb0 Cost Tracking: Monitor AI usage and optimize based on reports</li> <li>\ud83d\udea8 Set Alerts: Alert on high failure rates or cost spikes</li> </ol>"},{"location":"user-guide/reporting/#next-steps","title":"Next Steps","text":"<ol> <li>Performance Optimization - Use report insights to optimize</li> <li>Troubleshooting Guide - Debug issues found in reports</li> <li>AI Configuration - Adjust AI settings based on usage</li> </ol>"},{"location":"user-guide/selenium-integration/","title":"AutoHeal Locator - Complete Selenium Usage Guide","text":"<p>A comprehensive guide to using AutoHeal Locator with Selenium WebDriver for enterprise-grade test automation with AI-powered self-healing capabilities.</p>"},{"location":"user-guide/selenium-integration/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Quick Start</li> <li>Installation</li> <li>Basic Usage</li> <li>Creating Selenium Wrappers</li> <li>Advanced Configuration</li> <li>AI Service Configuration</li> <li>Page Object Model Integration</li> <li>Test Framework Integration</li> <li>Monitoring &amp; Metrics</li> <li>Best Practices</li> <li>Troubleshooting</li> </ul>"},{"location":"user-guide/selenium-integration/#quick-start","title":"Quick Start","text":""},{"location":"user-guide/selenium-integration/#step-1-add-maven-dependency","title":"Step 1: Add Maven Dependency","text":"<pre><code>&lt;dependencies&gt;\n    &lt;!-- AutoHeal Locator --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.example&lt;/groupId&gt;\n        &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Selenium WebDriver --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n        &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n        &lt;version&gt;4.15.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Optional: AI Service Dependencies --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n        &lt;version&gt;2.16.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"user-guide/selenium-integration/#step-2-basic-setup","title":"Step 2: Basic Setup","text":"<pre><code>import com.autoheal.AutoHealLocator;\nimport com.autoheal.config.AutoHealConfiguration;\nimport com.autoheal.impl.adapter.SeleniumWebAutomationAdapter;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class BasicAutoHealExample {\n    public static void main(String[] args) {\n        // Initialize WebDriver\n        WebDriver driver = new ChromeDriver();\n\n        // Create AutoHeal instance with simple constructor\n        AutoHealLocator autoHeal = new AutoHealLocator(driver);\n\n        try {\n            driver.get(\"https://example.com\");\n\n            // Find element with healing capabilities\n            WebElement submitButton = autoHeal.findElement(\"#submit-btn\", \"Submit button\");\n            submitButton.click();\n\n        } finally {\n            autoHeal.shutdown();\n            driver.quit();\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#installation","title":"Installation","text":""},{"location":"user-guide/selenium-integration/#maven-configuration","title":"Maven Configuration","text":"<pre><code>&lt;project&gt;\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;15&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;15&lt;/maven.compiler.target&gt;\n        &lt;selenium.version&gt;4.15.0&lt;/selenium.version&gt;\n        &lt;autoheal.version&gt;1.0-SNAPSHOT&lt;/autoheal.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.example&lt;/groupId&gt;\n            &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n            &lt;version&gt;${autoheal.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n            &lt;version&gt;${selenium.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"user-guide/selenium-integration/#gradle-configuration","title":"Gradle Configuration","text":"<pre><code>dependencies {\n    implementation 'org.example:autoheal-locator:1.0-SNAPSHOT'\n    implementation 'org.seleniumhq.selenium:selenium-java:4.15.0'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/selenium-integration/#simple-element-location","title":"Simple Element Location","text":"<pre><code>import com.autoheal.AutoHealLocator;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class SimpleExample {\n    private WebDriver driver;\n    private AutoHealLocator autoHeal;\n\n    public void setUp() {\n        driver = new ChromeDriver();\n        autoHeal = new AutoHealLocator(driver);\n    }\n\n    public void testLogin() {\n        driver.get(\"https://saucedemo.com\");\n\n        // AutoHeal will try original selector first, then AI healing if it fails\n        WebElement usernameField = autoHeal.findElement(\"#user-name\", \"Username input field\");\n        WebElement passwordField = autoHeal.findElement(\"#password\", \"Password input field\");\n        WebElement loginButton = autoHeal.findElement(\"#login-button\", \"Login submit button\");\n\n        usernameField.sendKeys(\"standard_user\");\n        passwordField.sendKeys(\"secret_sauce\");\n        loginButton.click();\n    }\n\n    public void tearDown() {\n        autoHeal.shutdown();\n        driver.quit();\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#async-operations","title":"Async Operations","text":"<pre><code>import java.util.concurrent.CompletableFuture;\nimport java.util.List;\n\npublic class AsyncExample {\n    private AutoHealLocator autoHeal;\n\n    public void performAsyncOperations() {\n        // Find multiple elements asynchronously\n        CompletableFuture&lt;WebElement&gt; username = autoHeal.findElementAsync(\"#username\", \"Username field\");\n        CompletableFuture&lt;WebElement&gt; password = autoHeal.findElementAsync(\"#password\", \"Password field\");\n        CompletableFuture&lt;WebElement&gt; submit = autoHeal.findElementAsync(\"#submit\", \"Submit button\");\n\n        // Execute all operations in parallel\n        CompletableFuture.allOf(username, password, submit)\n            .thenRun(() -&gt; {\n                try {\n                    username.get().sendKeys(\"testuser\");\n                    password.get().sendKeys(\"testpass\");\n                    submit.get().click();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            });\n\n        // Check element presence without exceptions\n        CompletableFuture&lt;Boolean&gt; isElementPresent = autoHeal\n            .isElementPresentAsync(\"#optional-element\", \"Optional element\");\n\n        isElementPresent.thenAccept(present -&gt; {\n            if (present) {\n                System.out.println(\"Optional element is present\");\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#creating-selenium-wrappers","title":"Creating Selenium Wrappers","text":""},{"location":"user-guide/selenium-integration/#basic-selenium-wrapper-class","title":"Basic Selenium Wrapper Class","text":"<pre><code>package com.example.wrapper;\n\nimport com.autoheal.AutoHealLocator;\nimport com.autoheal.config.AutoHealConfiguration;\nimport com.autoheal.config.AIConfig;\nimport com.autoheal.config.CacheConfig;\nimport com.autoheal.config.PerformanceConfig;\nimport com.autoheal.impl.adapter.SeleniumWebAutomationAdapter;\nimport com.autoheal.model.AIProvider;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.time.Duration;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\n/**\n * Enhanced Selenium wrapper with AutoHeal capabilities\n */\npublic class AutoHealSeleniumWrapper {\n    private static final Logger logger = LoggerFactory.getLogger(AutoHealSeleniumWrapper.class);\n\n    private final WebDriver driver;\n    private final AutoHealLocator autoHeal;\n    private final SeleniumWebAutomationAdapter adapter;\n\n    public AutoHealSeleniumWrapper(WebDriver driver) {\n        this.driver = driver;\n        this.adapter = new SeleniumWebAutomationAdapter(driver);\n        this.autoHeal = createConfiguredAutoHeal();\n\n        logger.info(\"AutoHealSeleniumWrapper initialized for driver: {}\", \n                   driver.getClass().getSimpleName());\n    }\n\n    /**\n     * Create AutoHeal with optimized configuration\n     */\n    private AutoHealLocator createConfiguredAutoHeal() {\n        AutoHealConfiguration config = AutoHealConfiguration.builder()\n            .cache(CacheConfig.builder()\n                .maximumSize(10000)\n                .expireAfterWrite(Duration.ofHours(24))\n                .expireAfterAccess(Duration.ofHours(2))\n                .recordStats(true)\n                .build())\n            .ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .timeout(Duration.ofSeconds(30))\n                .maxRetries(3)\n                .visualAnalysisEnabled(false) // Enable if you have AI visual analysis\n                .build())\n            .performance(PerformanceConfig.builder()\n                .threadPoolSize(8)\n                .elementTimeout(Duration.ofSeconds(10))\n                .enableMetrics(true)\n                .build())\n            .build();\n\n        return AutoHealLocator.builder()\n            .withWebAdapter(adapter)\n            .withConfiguration(config)\n            .build();\n    }\n\n    // ==================== ENHANCED ELEMENT FINDING METHODS ====================\n\n    /**\n     * Find element with AutoHeal - synchronous\n     */\n    public WebElement findElement(String selector, String description) {\n        try {\n            WebElement element = autoHeal.findElement(selector, description);\n            logger.debug(\"Found element '{}' using selector: {}\", description, selector);\n            return element;\n        } catch (Exception e) {\n            logger.error(\"Failed to find element '{}' with selector '{}': {}\", \n                        description, selector, e.getMessage());\n            throw e;\n        }\n    }\n\n    /**\n     * Find element with AutoHeal - asynchronous\n     */\n    public CompletableFuture&lt;WebElement&gt; findElementAsync(String selector, String description) {\n        return autoHeal.findElementAsync(selector, description)\n            .whenComplete((element, throwable) -&gt; {\n                if (throwable != null) {\n                    logger.error(\"Async element finding failed for '{}': {}\", \n                               description, throwable.getMessage());\n                } else {\n                    logger.debug(\"Async found element '{}' using selector: {}\", description, selector);\n                }\n            });\n    }\n\n    /**\n     * Find multiple elements with AutoHeal\n     */\n    public CompletableFuture&lt;List&lt;WebElement&gt;&gt; findElements(String selector, String description) {\n        return autoHeal.findElementsAsync(selector, description);\n    }\n\n    /**\n     * Check if element exists without throwing exceptions\n     */\n    public boolean isElementPresent(String selector, String description) {\n        try {\n            return autoHeal.isElementPresentAsync(selector, description).get();\n        } catch (Exception e) {\n            logger.debug(\"Element presence check failed for '{}': {}\", description, e.getMessage());\n            return false;\n        }\n    }\n\n    // ==================== ENHANCED INTERACTION METHODS ====================\n\n    /**\n     * Click element with AutoHeal\n     */\n    public void click(String selector, String description) {\n        WebElement element = findElement(selector, description);\n        element.click();\n        logger.info(\"Clicked on element: {}\", description);\n    }\n\n    /**\n     * Type text into element with AutoHeal\n     */\n    public void sendKeys(String selector, String text, String description) {\n        WebElement element = findElement(selector, description);\n        element.clear();\n        element.sendKeys(text);\n        logger.info(\"Typed '{}' into element: {}\", text, description);\n    }\n\n    /**\n     * Get text from element with AutoHeal\n     */\n    public String getText(String selector, String description) {\n        WebElement element = findElement(selector, description);\n        String text = element.getText();\n        logger.debug(\"Retrieved text '{}' from element: {}\", text, description);\n        return text;\n    }\n\n    /**\n     * Get attribute value with AutoHeal\n     */\n    public String getAttribute(String selector, String attributeName, String description) {\n        WebElement element = findElement(selector, description);\n        String value = element.getAttribute(attributeName);\n        logger.debug(\"Retrieved attribute '{}' = '{}' from element: {}\", \n                    attributeName, value, description);\n        return value;\n    }\n\n    /**\n     * Check if element is displayed\n     */\n    public boolean isDisplayed(String selector, String description) {\n        try {\n            WebElement element = findElement(selector, description);\n            boolean displayed = element.isDisplayed();\n            logger.debug(\"Element '{}' displayed: {}\", description, displayed);\n            return displayed;\n        } catch (Exception e) {\n            logger.debug(\"Element '{}' not displayed or not found: {}\", description, e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Check if element is enabled\n     */\n    public boolean isEnabled(String selector, String description) {\n        try {\n            WebElement element = findElement(selector, description);\n            boolean enabled = element.isEnabled();\n            logger.debug(\"Element '{}' enabled: {}\", description, enabled);\n            return enabled;\n        } catch (Exception e) {\n            logger.debug(\"Element '{}' not enabled or not found: {}\", description, e.getMessage());\n            return false;\n        }\n    }\n\n    // ==================== UTILITY METHODS ====================\n\n    /**\n     * Get WebDriver instance\n     */\n    public WebDriver getDriver() {\n        return driver;\n    }\n\n    /**\n     * Navigate to URL\n     */\n    public void navigateTo(String url) {\n        driver.get(url);\n        logger.info(\"Navigated to: {}\", url);\n    }\n\n    /**\n     * Get current URL\n     */\n    public String getCurrentUrl() {\n        return driver.getCurrentUrl();\n    }\n\n    /**\n     * Get page title\n     */\n    public String getTitle() {\n        return driver.getTitle();\n    }\n\n    /**\n     * Execute JavaScript\n     */\n    public Object executeScript(String script, Object... args) {\n        return ((org.openqa.selenium.JavascriptExecutor) driver).executeScript(script, args);\n    }\n\n    // ==================== AUTOHEAL SPECIFIC METHODS ====================\n\n    /**\n     * Get AutoHeal performance metrics\n     */\n    public String getMetrics() {\n        try {\n            var metrics = autoHeal.getMetrics();\n            return String.format(\n                \"AutoHeal Metrics:\\n\" +\n                \"- Success Rate: %.2f%%\\n\" +\n                \"- Cache Hit Rate: %.2f%%\\n\" +\n                \"- Total Requests: %d\",\n                metrics.getLocatorMetrics().getSuccessRate() * 100,\n                metrics.getCacheMetrics().getHitRate() * 100,\n                metrics.getLocatorMetrics().getTotalRequests()\n            );\n        } catch (Exception e) {\n            logger.error(\"Failed to get AutoHeal metrics: {}\", e.getMessage());\n            return \"Metrics unavailable\";\n        }\n    }\n\n    /**\n     * Check AutoHeal health status\n     */\n    public boolean isAutoHealHealthy() {\n        try {\n            return autoHeal.getHealthStatus().isOverall();\n        } catch (Exception e) {\n            logger.error(\"Failed to check AutoHeal health: {}\", e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Clear AutoHeal cache\n     */\n    public void clearCache() {\n        autoHeal.clearCache();\n        logger.info(\"AutoHeal cache cleared\");\n    }\n\n    /**\n     * Shutdown wrapper and cleanup resources\n     */\n    public void shutdown() {\n        try {\n            autoHeal.shutdown();\n            adapter.shutdown();\n            logger.info(\"AutoHealSeleniumWrapper shutdown completed\");\n        } catch (Exception e) {\n            logger.error(\"Error during shutdown: {}\", e.getMessage());\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#advanced-wrapper-with-fluent-interface","title":"Advanced Wrapper with Fluent Interface","text":"<pre><code>package com.example.wrapper;\n\nimport com.autoheal.config.LocatorOptions;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\n/**\n * Fluent interface wrapper for AutoHeal Selenium operations\n */\npublic class FluentAutoHealWrapper {\n    private final AutoHealSeleniumWrapper wrapper;\n\n    public FluentAutoHealWrapper(WebDriver driver) {\n        this.wrapper = new AutoHealSeleniumWrapper(driver);\n    }\n\n    /**\n     * Fluent element builder\n     */\n    public ElementBuilder element(String selector) {\n        return new ElementBuilder(selector);\n    }\n\n    public class ElementBuilder {\n        private final String selector;\n        private String description;\n        private LocatorOptions options = LocatorOptions.defaultOptions();\n\n        public ElementBuilder(String selector) {\n            this.selector = selector;\n        }\n\n        public ElementBuilder describedAs(String description) {\n            this.description = description;\n            return this;\n        }\n\n        public ElementBuilder withOptions(LocatorOptions options) {\n            this.options = options;\n            return this;\n        }\n\n        public ElementBuilder withTimeout(int seconds) {\n            this.options = LocatorOptions.builder()\n                .elementTimeout(java.time.Duration.ofSeconds(seconds))\n                .build();\n            return this;\n        }\n\n        public ElementBuilder withRetries(int maxRetries) {\n            this.options = LocatorOptions.builder()\n                .retryCount(maxRetries)\n                .build();\n            return this;\n        }\n\n        // Action methods\n        public FluentAutoHealWrapper click() {\n            wrapper.click(selector, description != null ? description : \"Element with selector: \" + selector);\n            return FluentAutoHealWrapper.this;\n        }\n\n        public FluentAutoHealWrapper type(String text) {\n            wrapper.sendKeys(selector, text, description != null ? description : \"Input field with selector: \" + selector);\n            return FluentAutoHealWrapper.this;\n        }\n\n        public String getText() {\n            return wrapper.getText(selector, description != null ? description : \"Text element with selector: \" + selector);\n        }\n\n        public String getAttribute(String attributeName) {\n            return wrapper.getAttribute(selector, attributeName, description != null ? description : \"Element with selector: \" + selector);\n        }\n\n        public boolean isDisplayed() {\n            return wrapper.isDisplayed(selector, description != null ? description : \"Element with selector: \" + selector);\n        }\n\n        public boolean isEnabled() {\n            return wrapper.isEnabled(selector, description != null ? description : \"Element with selector: \" + selector);\n        }\n\n        public WebElement get() {\n            return wrapper.findElement(selector, description != null ? description : \"Element with selector: \" + selector);\n        }\n    }\n\n    // Navigation methods\n    public FluentAutoHealWrapper navigateTo(String url) {\n        wrapper.navigateTo(url);\n        return this;\n    }\n\n    // Utility methods\n    public String getMetrics() {\n        return wrapper.getMetrics();\n    }\n\n    public void shutdown() {\n        wrapper.shutdown();\n    }\n}\n\n// Usage example:\npublic class FluentExample {\n    public void testFluentInterface() {\n        WebDriver driver = new ChromeDriver();\n        FluentAutoHealWrapper autoHeal = new FluentAutoHealWrapper(driver);\n\n        autoHeal\n            .navigateTo(\"https://saucedemo.com\")\n            .element(\"#user-name\")\n                .describedAs(\"Username input field\")\n                .withTimeout(10)\n                .type(\"standard_user\")\n            .element(\"#password\")\n                .describedAs(\"Password input field\")\n                .type(\"secret_sauce\")\n            .element(\"#login-button\")\n                .describedAs(\"Login submit button\")\n                .click();\n\n        autoHeal.shutdown();\n        driver.quit();\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"user-guide/selenium-integration/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code>package com.example.config;\n\nimport com.autoheal.AutoHealLocator;\nimport com.autoheal.config.*;\nimport com.autoheal.impl.adapter.SeleniumWebAutomationAdapter;\nimport com.autoheal.impl.ai.ResilientAIService;\nimport com.autoheal.impl.cache.CaffeineBasedSelectorCache;\nimport com.autoheal.model.AIProvider;\nimport com.autoheal.model.ExecutionStrategy;\nimport org.openqa.selenium.WebDriver;\n\nimport java.time.Duration;\n\npublic class AutoHealConfigurationFactory {\n\n    /**\n     * Create production-ready AutoHeal configuration\n     */\n    public static AutoHealLocator createProductionAutoHeal(WebDriver driver) {\n        // Cache Configuration\n        CacheConfig cacheConfig = CacheConfig.builder()\n            .maximumSize(10000)\n            .expireAfterWrite(Duration.ofHours(24))\n            .expireAfterAccess(Duration.ofHours(2))\n            .recordStats(true)\n            .build();\n\n        // AI Configuration\n        AIConfig aiConfig = AIConfig.builder()\n            .provider(AIProvider.OPENAI)\n            .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n            .timeout(Duration.ofSeconds(30))\n            .maxRetries(3)\n            .visualAnalysisEnabled(false)\n            .build();\n\n        // Performance Configuration\n        PerformanceConfig performanceConfig = PerformanceConfig.builder()\n            .threadPoolSize(16)\n            .elementTimeout(Duration.ofSeconds(15))\n            .enableMetrics(true)\n            .maxConcurrentRequests(10)\n            .executionStrategy(ExecutionStrategy.COST_OPTIMIZED)\n            .build();\n\n        // Resilience Configuration\n        ResilienceConfig resilienceConfig = ResilienceConfig.builder()\n            .circuitBreakerFailureThreshold(5)\n            .circuitBreakerTimeout(Duration.ofMinutes(5))\n            .retryMaxAttempts(3)\n            .retryDelay(Duration.ofMillis(500))\n            .build();\n\n        // Main Configuration\n        AutoHealConfiguration config = AutoHealConfiguration.builder()\n            .cacheConfig(cacheConfig)\n            .aiConfig(aiConfig)\n            .performanceConfig(performanceConfig)\n            .resilienceConfig(resilienceConfig)\n            .enableCaching(true)\n            .enableRetries(true)\n            .enableMetrics(true)\n            .build();\n\n        // Create AutoHeal instance\n        return AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(config)\n            .build();\n    }\n\n    /**\n     * Create development/testing AutoHeal configuration\n     */\n    public static AutoHealLocator createDevelopmentAutoHeal(WebDriver driver) {\n        AutoHealConfiguration config = AutoHealConfiguration.builder()\n            .cache(CacheConfig.builder()\n                .maximumSize(1000)\n                .expireAfterWrite(Duration.ofHours(1))\n                .build())\n            .ai(AIConfig.builder()\n                .provider(AIProvider.MOCK) // Use mock for testing\n                .timeout(Duration.ofSeconds(5))\n                .build())\n            .performance(PerformanceConfig.builder()\n                .threadPoolSize(4)\n                .elementTimeout(Duration.ofSeconds(5))\n                .enableMetrics(true)\n                .build())\n            .build();\n\n        return AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(config)\n            .build();\n    }\n\n    /**\n     * Create custom AutoHeal with specific requirements\n     */\n    public static AutoHealLocator createCustomAutoHeal(WebDriver driver, \n                                                      Duration elementTimeout,\n                                                      int cacheSize,\n                                                      boolean enableAI) {\n        AutoHealConfiguration.Builder configBuilder = AutoHealConfiguration.builder()\n            .cache(CacheConfig.builder()\n                .maximumSize(cacheSize)\n                .expireAfterWrite(Duration.ofHours(12))\n                .build())\n            .performance(PerformanceConfig.builder()\n                .threadPoolSize(8)\n                .elementTimeout(elementTimeout)\n                .enableMetrics(true)\n                .build());\n\n        if (enableAI) {\n            configBuilder.ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .timeout(Duration.ofSeconds(15))\n                .build());\n        } else {\n            configBuilder.ai(AIConfig.builder()\n                .provider(AIProvider.MOCK)\n                .build());\n        }\n\n        return AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(configBuilder.build())\n            .build();\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<pre><code>package com.example.config;\n\nimport java.time.Duration;\nimport java.util.Properties;\n\npublic class EnvironmentConfig {\n    private final Properties properties;\n    private final String environment;\n\n    public EnvironmentConfig() {\n        this.environment = System.getProperty(\"test.env\", \"development\");\n        this.properties = loadProperties();\n    }\n\n    private Properties loadProperties() {\n        Properties props = new Properties();\n        try {\n            props.load(getClass().getResourceAsStream(\"/autoheal-\" + environment + \".properties\"));\n        } catch (Exception e) {\n            // Load defaults\n            setDefaults(props);\n        }\n        return props;\n    }\n\n    private void setDefaults(Properties props) {\n        props.setProperty(\"autoheal.cache.size\", \"5000\");\n        props.setProperty(\"autoheal.cache.ttl.hours\", \"12\");\n        props.setProperty(\"autoheal.element.timeout.seconds\", \"10\");\n        props.setProperty(\"autoheal.thread.pool.size\", \"8\");\n        props.setProperty(\"autoheal.ai.enabled\", \"false\");\n        props.setProperty(\"autoheal.metrics.enabled\", \"true\");\n    }\n\n    public AutoHealLocator createAutoHeal(WebDriver driver) {\n        return AutoHealConfigurationFactory.createCustomAutoHeal(\n            driver,\n            Duration.ofSeconds(getLong(\"autoheal.element.timeout.seconds\")),\n            getInt(\"autoheal.cache.size\"),\n            getBoolean(\"autoheal.ai.enabled\")\n        );\n    }\n\n    private int getInt(String key) {\n        return Integer.parseInt(properties.getProperty(key));\n    }\n\n    private long getLong(String key) {\n        return Long.parseLong(properties.getProperty(key));\n    }\n\n    private boolean getBoolean(String key) {\n        return Boolean.parseBoolean(properties.getProperty(key));\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#ai-service-configuration","title":"AI Service Configuration","text":"<p>AutoHeal Locator's core healing capabilities depend on AI services for analyzing DOM structure and visual elements. This section covers comprehensive AI configuration for production and development environments.</p>"},{"location":"user-guide/selenium-integration/#overview-of-ai-integration","title":"Overview of AI Integration","text":"<p>AutoHeal uses AI for two primary strategies: - DOM Analysis: AI-powered analysis of HTML structure to suggest alternative selectors - Visual Analysis: AI-powered visual analysis of screenshots to locate elements</p>"},{"location":"user-guide/selenium-integration/#basic-ai-configuration","title":"Basic AI Configuration","text":""},{"location":"user-guide/selenium-integration/#1-openai-configuration-production","title":"1. OpenAI Configuration (Production)","text":"<pre><code>import com.autoheal.config.AIConfig;\nimport com.autoheal.model.AIProvider;\nimport java.time.Duration;\n\n// Basic OpenAI setup\nAIConfig aiConfig = AIConfig.builder()\n    .provider(AIProvider.OPENAI)\n    .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n    .timeout(Duration.ofSeconds(30))\n    .maxRetries(3)\n    .visualAnalysisEnabled(true)\n    .build();\n\nAutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(aiConfig)\n    .build();\n</code></pre>"},{"location":"user-guide/selenium-integration/#2-api-key-setup","title":"2. API Key Setup","text":"<p>Option A: Environment Variables (Recommended) <pre><code># Set environment variable\nexport OPENAI_API_KEY=\"your-openai-api-key-here\"\n\n# Or for Windows\nset OPENAI_API_KEY=your-openai-api-key-here\n</code></pre></p> <p>Option B: Properties Files</p> <p>Create properties files for different environments in your project's <code>src/main/resources/</code> directory:</p> <p>\ud83d\udcc1 File Path: <code>src/main/resources/autoheal-production.properties</code> <pre><code># AutoHeal Production Configuration\n# =================================\n\n# AI Service Configuration\nautoheal.ai.provider=openai\nautoheal.ai.api-key=${OPENAI_API_KEY}\nautoheal.ai.model=gpt-4\nautoheal.ai.timeout=45s\nautoheal.ai.max-retries=5\nautoheal.ai.visual-analysis-enabled=true\nautoheal.ai.max-tokens=2000\nautoheal.ai.temperature=0.1\nautoheal.ai.rate-limit-per-minute=60\n\n# Cache Configuration\nautoheal.cache.maximum-size=10000\nautoheal.cache.expire-after-write=24h\nautoheal.cache.expire-after-access=2h\nautoheal.cache.record-stats=true\n\n# Performance Configuration\nautoheal.performance.thread-pool-size=16\nautoheal.performance.element-timeout=15s\nautoheal.performance.enable-metrics=true\nautoheal.performance.max-concurrent-requests=50\nautoheal.performance.execution-strategy=SMART_SEQUENTIAL\n\n# Resilience Configuration\nautoheal.resilience.circuit-breaker-failure-threshold=3\nautoheal.resilience.circuit-breaker-timeout=5m\nautoheal.resilience.retry-max-attempts=5\nautoheal.resilience.retry-delay=2s\n\n# Logging Configuration\nlogging.level.com.autoheal=INFO\nlogging.level.com.autoheal.impl.ai=DEBUG\n</code></pre></p> <p>\ud83d\udcc1 File Path: <code>src/main/resources/autoheal-development.properties</code> <pre><code># AutoHeal Development Configuration\n# =================================\n\n# AI Service Configuration (Mock for fast development)\nautoheal.ai.provider=mock\nautoheal.ai.timeout=5s\nautoheal.ai.max-retries=1\nautoheal.ai.visual-analysis-enabled=false\n\n# Cache Configuration (Smaller cache for development)\nautoheal.cache.maximum-size=1000\nautoheal.cache.expire-after-write=1h\nautoheal.cache.expire-after-access=30m\nautoheal.cache.record-stats=true\n\n# Performance Configuration (Lower resources for development)\nautoheal.performance.thread-pool-size=4\nautoheal.performance.element-timeout=5s\nautoheal.performance.enable-metrics=true\nautoheal.performance.max-concurrent-requests=10\nautoheal.performance.execution-strategy=DOM_ONLY\n\n# Resilience Configuration (More forgiving for development)\nautoheal.resilience.circuit-breaker-failure-threshold=10\nautoheal.resilience.circuit-breaker-timeout=2m\nautoheal.resilience.retry-max-attempts=2\nautoheal.resilience.retry-delay=500ms\n\n# Logging Configuration (More verbose for development)\nlogging.level.com.autoheal=DEBUG\nlogging.level.com.autoheal.impl.ai=TRACE\nlogging.level.com.autoheal.impl.locator=DEBUG\n</code></pre></p> <p>\ud83d\udcc1 File Path: <code>src/main/resources/autoheal-staging.properties</code> <pre><code># AutoHeal Staging Configuration\n# ==============================\n\n# AI Service Configuration\nautoheal.ai.provider=openai\nautoheal.ai.api-key=${OPENAI_STAGING_API_KEY}\nautoheal.ai.model=gpt-3.5-turbo\nautoheal.ai.timeout=30s\nautoheal.ai.max-retries=3\nautoheal.ai.visual-analysis-enabled=true\nautoheal.ai.max-tokens=1500\nautoheal.ai.rate-limit-per-minute=30\n\n# Cache Configuration\nautoheal.cache.maximum-size=5000\nautoheal.cache.expire-after-write=12h\nautoheal.cache.expire-after-access=1h\nautoheal.cache.record-stats=true\n\n# Performance Configuration\nautoheal.performance.thread-pool-size=8\nautoheal.performance.element-timeout=10s\nautoheal.performance.enable-metrics=true\nautoheal.performance.max-concurrent-requests=25\nautoheal.performance.execution-strategy=SMART_SEQUENTIAL\n\n# Resilience Configuration\nautoheal.resilience.circuit-breaker-failure-threshold=5\nautoheal.resilience.circuit-breaker-timeout=3m\nautoheal.resilience.retry-max-attempts=3\nautoheal.resilience.retry-delay=1s\n\n# Logging Configuration\nlogging.level.com.autoheal=INFO\nlogging.level.com.autoheal.impl.ai=DEBUG\n</code></pre></p> <p>\ud83d\udcc1 File Path: <code>src/main/resources/autoheal-ci.properties</code> <pre><code># AutoHeal CI/CD Configuration\n# ============================\n\n# AI Service Configuration (Conditional based on environment variable)\nautoheal.ai.provider=${AUTOHEAL_AI_PROVIDER:mock}\nautoheal.ai.api-key=${OPENAI_API_KEY:}\nautoheal.ai.timeout=20s\nautoheal.ai.max-retries=2\nautoheal.ai.visual-analysis-enabled=false\nautoheal.ai.max-tokens=1000\n\n# Cache Configuration\nautoheal.cache.maximum-size=3000\nautoheal.cache.expire-after-write=6h\nautoheal.cache.expire-after-access=1h\nautoheal.cache.record-stats=true\n\n# Performance Configuration (Optimized for CI speed)\nautoheal.performance.thread-pool-size=8\nautoheal.performance.element-timeout=10s\nautoheal.performance.enable-metrics=true\nautoheal.performance.max-concurrent-requests=20\nautoheal.performance.execution-strategy=DOM_ONLY\n\n# Resilience Configuration (Fail fast in CI)\nautoheal.resilience.circuit-breaker-failure-threshold=3\nautoheal.resilience.circuit-breaker-timeout=2m\nautoheal.resilience.retry-max-attempts=2\nautoheal.resilience.retry-delay=1s\n\n# Logging Configuration (Less verbose for CI)\nlogging.level.com.autoheal=WARN\nlogging.level.com.autoheal.impl.ai=ERROR\n</code></pre></p> <p>\ud83d\udcc1 File Path: <code>src/test/resources/autoheal-test.properties</code> <pre><code># AutoHeal Test Configuration\n# ===========================\n\n# AI Service Configuration (Mock for reliable testing)\nautoheal.ai.provider=mock\nautoheal.ai.timeout=2s\nautoheal.ai.max-retries=1\nautoheal.ai.visual-analysis-enabled=false\n\n# Cache Configuration (Minimal cache for tests)\nautoheal.cache.maximum-size=100\nautoheal.cache.expire-after-write=10m\nautoheal.cache.expire-after-access=5m\nautoheal.cache.record-stats=false\n\n# Performance Configuration (Fast for unit tests)\nautoheal.performance.thread-pool-size=2\nautoheal.performance.element-timeout=3s\nautoheal.performance.enable-metrics=false\nautoheal.performance.max-concurrent-requests=5\nautoheal.performance.execution-strategy=DOM_ONLY\n\n# Resilience Configuration (Minimal resilience for tests)\nautoheal.resilience.circuit-breaker-failure-threshold=1\nautoheal.resilience.circuit-breaker-timeout=30s\nautoheal.resilience.retry-max-attempts=1\nautoheal.resilience.retry-delay=100ms\n\n# Logging Configuration (Quiet for tests)\nlogging.level.com.autoheal=ERROR\n</code></pre></p>"},{"location":"user-guide/selenium-integration/#loading-properties-files","title":"Loading Properties Files","text":"<p>Java Code to Load Properties Files:</p> <pre><code>package com.example.config;\n\nimport com.autoheal.config.AutoHealConfiguration;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class PropertiesConfigLoader {\n\n    /**\n     * Load AutoHeal configuration from properties file based on environment\n     */\n    public static AutoHealConfiguration loadFromEnvironment() {\n        String environment = System.getProperty(\"autoheal.environment\", \"development\");\n        return loadFromPropertiesFile(\"autoheal-\" + environment + \".properties\");\n    }\n\n    /**\n     * Load configuration from specific properties file\n     */\n    public static AutoHealConfiguration loadFromPropertiesFile(String filename) {\n        Properties properties = new Properties();\n\n        try (InputStream input = PropertiesConfigLoader.class\n                .getClassLoader()\n                .getResourceAsStream(filename)) {\n\n            if (input == null) {\n                throw new IllegalArgumentException(\"Properties file not found: \" + filename);\n            }\n\n            properties.load(input);\n            return buildConfigurationFromProperties(properties);\n\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to load properties file: \" + filename, e);\n        }\n    }\n\n    /**\n     * Build AutoHeal configuration from Properties object\n     */\n    private static AutoHealConfiguration buildConfigurationFromProperties(Properties props) {\n        return AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(parseAIProvider(props.getProperty(\"autoheal.ai.provider\", \"mock\")))\n                .apiKey(resolveProperty(props.getProperty(\"autoheal.ai.api-key\")))\n                .model(props.getProperty(\"autoheal.ai.model\", \"gpt-3.5-turbo\"))\n                .timeout(Duration.parse(\"PT\" + props.getProperty(\"autoheal.ai.timeout\", \"30s\")))\n                .maxRetries(Integer.parseInt(props.getProperty(\"autoheal.ai.max-retries\", \"3\")))\n                .visualAnalysisEnabled(Boolean.parseBoolean(\n                    props.getProperty(\"autoheal.ai.visual-analysis-enabled\", \"false\")))\n                .maxTokens(Integer.parseInt(props.getProperty(\"autoheal.ai.max-tokens\", \"1500\")))\n                .temperature(Double.parseDouble(props.getProperty(\"autoheal.ai.temperature\", \"0.1\")))\n                .rateLimitPerMinute(Integer.parseInt(\n                    props.getProperty(\"autoheal.ai.rate-limit-per-minute\", \"30\")))\n                .build())\n            .cache(CacheConfig.builder()\n                .maximumSize(Integer.parseInt(props.getProperty(\"autoheal.cache.maximum-size\", \"5000\")))\n                .expireAfterWrite(Duration.parse(\"PT\" + props.getProperty(\"autoheal.cache.expire-after-write\", \"12h\")))\n                .expireAfterAccess(Duration.parse(\"PT\" + props.getProperty(\"autoheal.cache.expire-after-access\", \"1h\")))\n                .recordStats(Boolean.parseBoolean(props.getProperty(\"autoheal.cache.record-stats\", \"true\")))\n                .build())\n            .performance(PerformanceConfig.builder()\n                .threadPoolSize(Integer.parseInt(props.getProperty(\"autoheal.performance.thread-pool-size\", \"8\")))\n                .elementTimeout(Duration.parse(\"PT\" + props.getProperty(\"autoheal.performance.element-timeout\", \"10s\")))\n                .enableMetrics(Boolean.parseBoolean(props.getProperty(\"autoheal.performance.enable-metrics\", \"true\")))\n                .maxConcurrentRequests(Integer.parseInt(\n                    props.getProperty(\"autoheal.performance.max-concurrent-requests\", \"25\")))\n                .executionStrategy(parseExecutionStrategy(\n                    props.getProperty(\"autoheal.performance.execution-strategy\", \"SMART_SEQUENTIAL\")))\n                .build())\n            .resilience(ResilienceConfig.builder()\n                .circuitBreakerFailureThreshold(Integer.parseInt(\n                    props.getProperty(\"autoheal.resilience.circuit-breaker-failure-threshold\", \"5\")))\n                .circuitBreakerTimeout(Duration.parse(\"PT\" + \n                    props.getProperty(\"autoheal.resilience.circuit-breaker-timeout\", \"3m\")))\n                .retryMaxAttempts(Integer.parseInt(\n                    props.getProperty(\"autoheal.resilience.retry-max-attempts\", \"3\")))\n                .retryDelay(Duration.parse(\"PT\" + props.getProperty(\"autoheal.resilience.retry-delay\", \"1s\")))\n                .build())\n            .build();\n    }\n\n    // Helper methods for parsing\n    private static AIProvider parseAIProvider(String provider) {\n        return switch (provider.toLowerCase()) {\n            case \"openai\" -&gt; AIProvider.OPENAI;\n            case \"mock\" -&gt; AIProvider.MOCK;\n            default -&gt; throw new IllegalArgumentException(\"Unknown AI provider: \" + provider);\n        };\n    }\n\n    private static ExecutionStrategy parseExecutionStrategy(String strategy) {\n        return switch (strategy.toUpperCase()) {\n            case \"SEQUENTIAL\" -&gt; ExecutionStrategy.SEQUENTIAL;\n            case \"PARALLEL\" -&gt; ExecutionStrategy.PARALLEL;\n            case \"SMART_SEQUENTIAL\" -&gt; ExecutionStrategy.SMART_SEQUENTIAL;\n            case \"DOM_ONLY\" -&gt; ExecutionStrategy.DOM_ONLY;\n            case \"VISUAL_FIRST\" -&gt; ExecutionStrategy.VISUAL_FIRST;\n            default -&gt; throw new IllegalArgumentException(\"Unknown execution strategy: \" + strategy);\n        };\n    }\n\n    /**\n     * Resolve property values with environment variable substitution\n     */\n    private static String resolveProperty(String value) {\n        if (value == null) return null;\n\n        // Handle ${ENV_VAR} or ${ENV_VAR:default_value} patterns\n        if (value.startsWith(\"${\") &amp;&amp; value.endsWith(\"}\")) {\n            String envPattern = value.substring(2, value.length() - 1);\n            String[] parts = envPattern.split(\":\", 2);\n            String envVar = parts[0];\n            String defaultValue = parts.length &gt; 1 ? parts[1] : null;\n\n            String envValue = System.getenv(envVar);\n            if (envValue != null &amp;&amp; !envValue.trim().isEmpty()) {\n                return envValue;\n            } else if (defaultValue != null) {\n                return defaultValue;\n            } else {\n                return null;\n            }\n        }\n\n        return value;\n    }\n}\n</code></pre> <p>Usage Examples:</p> <pre><code>// Load configuration based on environment system property\n// Set with: -Dautoheal.environment=production\nAutoHealConfiguration config = PropertiesConfigLoader.loadFromEnvironment();\n\n// Or load specific configuration file\nAutoHealConfiguration config = PropertiesConfigLoader.loadFromPropertiesFile(\"autoheal-production.properties\");\n\n// Create AutoHeal instance with loaded configuration\nAutoHealLocator autoHeal = AutoHealLocator.builder()\n    .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n    .withConfiguration(config)\n    .build();\n</code></pre>"},{"location":"user-guide/selenium-integration/#setting-environment-for-properties-loading","title":"Setting Environment for Properties Loading","text":"<p>Maven/Gradle Command Line: <pre><code># Run with production configuration\nmvn test -Dautoheal.environment=production -DOPENAI_API_KEY=your-key\n\n# Run with CI configuration  \nmvn test -Dautoheal.environment=ci -DAUTOHEAL_AI_PROVIDER=openai -DOPENAI_API_KEY=your-key\n\n# Run with development configuration (default)\nmvn test\n</code></pre></p> <p>IDE Configuration (IntelliJ IDEA / Eclipse): <pre><code>VM Options: -Dautoheal.environment=development\nEnvironment Variables: OPENAI_API_KEY=your-key-here\n</code></pre></p> <p>Docker/Container Environment: <pre><code># Dockerfile\nENV AUTOHEAL_ENVIRONMENT=production\nENV OPENAI_API_KEY=your-key-here\n\n# Or set at runtime\ndocker run -e AUTOHEAL_ENVIRONMENT=production -e OPENAI_API_KEY=your-key your-app\n</code></pre></p> <p>Option C: Programmatic Configuration <pre><code>AIConfig aiConfig = AIConfig.builder()\n    .provider(AIProvider.OPENAI)\n    .apiKey(\"your-api-key-here\") // Not recommended for production\n    .timeout(Duration.ofSeconds(30))\n    .build();\n</code></pre></p>"},{"location":"user-guide/selenium-integration/#ai-provider-options","title":"AI Provider Options","text":""},{"location":"user-guide/selenium-integration/#1-openai-provider-production","title":"1. OpenAI Provider (Production)","text":"<pre><code>/**\n * Production OpenAI configuration with all options\n */\npublic static AIConfig createProductionAIConfig() {\n    String apiKey = System.getenv(\"OPENAI_API_KEY\");\n    if (apiKey == null || apiKey.trim().isEmpty()) {\n        throw new IllegalStateException(\"OPENAI_API_KEY environment variable is required\");\n    }\n\n    return AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .apiKey(apiKey)\n        .model(\"gpt-4\") // Specify model if needed\n        .timeout(Duration.ofSeconds(45)) // Longer timeout for complex analysis\n        .maxRetries(5) // More retries for reliability\n        .visualAnalysisEnabled(true) // Enable visual analysis\n        .maxTokens(2000) // Limit token usage\n        .temperature(0.1) // Low temperature for consistent results\n        .build();\n}\n</code></pre> <p>OpenAI Features: - Best accuracy for DOM analysis - Visual screenshot analysis capability - Support for complex element descriptions - Multiple model options (GPT-3.5, GPT-4)</p> <p>Cost Considerations: - Pay per API call - Visual analysis costs more than DOM analysis - Consider token limits for cost control</p>"},{"location":"user-guide/selenium-integration/#2-mock-provider-testingdevelopment","title":"2. Mock Provider (Testing/Development)","text":"<pre><code>/**\n * Mock AI provider for testing and development\n */\npublic static AIConfig createMockAIConfig() {\n    return AIConfig.builder()\n        .provider(AIProvider.MOCK)\n        .timeout(Duration.ofSeconds(5)) // Fast responses\n        .visualAnalysisEnabled(false) // Mock doesn't support visual\n        .build();\n}\n</code></pre> <p>Mock Provider Features: - No API key required - Instant responses (no network calls) - Deterministic behavior for testing - No cost implications - Limited to basic selector transformations</p>"},{"location":"user-guide/selenium-integration/#3-custom-provider-implementation","title":"3. Custom Provider Implementation","text":"<pre><code>/**\n * Custom AI provider for enterprise integrations\n */\npublic class CustomAIProvider implements AIProvider {\n\n    @Override\n    public CompletableFuture&lt;AIAnalysisResult&gt; analyzeDOM(String html, \n                                                          String description, \n                                                          String originalSelector) {\n        // Your custom AI service integration\n        return CompletableFuture.supplyAsync(() -&gt; {\n            // Implement your AI analysis logic\n            return new AIAnalysisResult(\n                suggestedSelector,\n                confidence,\n                reasoning,\n                alternatives\n            );\n        });\n    }\n\n    @Override\n    public CompletableFuture&lt;AIAnalysisResult&gt; analyzeVisual(byte[] screenshot, \n                                                             String description) {\n        // Your visual analysis implementation\n        return CompletableFuture.supplyAsync(() -&gt; {\n            // Implement visual AI analysis\n            return new AIAnalysisResult(/* ... */);\n        });\n    }\n}\n\n// Usage\nAIConfig customConfig = AIConfig.builder()\n    .provider(new CustomAIProvider())\n    .timeout(Duration.ofSeconds(30))\n    .build();\n</code></pre>"},{"location":"user-guide/selenium-integration/#visual-analysis-configuration","title":"Visual Analysis Configuration","text":"<p>Visual analysis uses AI-powered technology to analyze screenshots and locate elements visually when DOM selectors fail.</p>"},{"location":"user-guide/selenium-integration/#enabling-visual-analysis","title":"Enabling Visual Analysis","text":"<pre><code>public static AutoHealConfiguration createVisualEnabledConfig() {\n    return AutoHealConfiguration.builder()\n        .ai(AIConfig.builder()\n            .provider(AIProvider.OPENAI)\n            .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n            .visualAnalysisEnabled(true) // Enable visual analysis\n            .maxImageSize(1920 * 1080) // Limit screenshot size\n            .imageCompressionQuality(0.8) // Balance quality vs speed\n            .build())\n        .build();\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#visual-analysis-best-practices","title":"Visual Analysis Best Practices","text":"<pre><code>public class VisualAnalysisBestPractices {\n\n    /**\n     * Configure visual analysis for optimal performance\n     */\n    public static LocatorOptions createVisualOptions() {\n        return LocatorOptions.builder()\n            .enableVisualAnalysis(true)\n            .visualConfidenceThreshold(0.8) // Higher confidence required\n            .maxVisualRetries(2) // Limit expensive visual retries\n            .visualTimeout(Duration.ofSeconds(60)) // Longer timeout for visual\n            .build();\n    }\n\n    /**\n     * Use visual analysis selectively\n     */\n    public void useVisualAnalysisWisely(AutoHealSeleniumWrapper autoHeal) {\n        // Enable visual for complex UI elements\n        LocatorOptions visualOptions = LocatorOptions.builder()\n            .enableVisualAnalysis(true)\n            .build();\n\n        autoHeal.findElementAsync(\"#complex-chart\", \n                                \"Sales chart with dynamic data\", \n                                visualOptions);\n\n        // Disable visual for simple text inputs (DOM analysis sufficient)\n        LocatorOptions domOnlyOptions = LocatorOptions.builder()\n            .enableVisualAnalysis(false)\n            .build();\n\n        autoHeal.findElementAsync(\"#username\", \n                                \"Username input field\", \n                                domOnlyOptions);\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#when-to-use-visual-analysis","title":"When to Use Visual Analysis","text":"<p>\u2705 Good candidates for visual analysis: - Dynamic charts or graphs - Canvas elements - Complex custom UI components - Elements with frequently changing IDs/classes - Visual elements with no semantic markup</p> <p>\u274c Avoid visual analysis for: - Simple text inputs - Standard buttons with stable selectors - Elements with good data-testid attributes - High-frequency operations (performance impact)</p>"},{"location":"user-guide/selenium-integration/#environment-specific-ai-configuration","title":"Environment-Specific AI Configuration","text":""},{"location":"user-guide/selenium-integration/#development-configuration","title":"Development Configuration","text":"<pre><code>/**\n * Development AI configuration - fast and cheap\n */\npublic static AutoHealConfiguration createDevelopmentConfig() {\n    return AutoHealConfiguration.builder()\n        .ai(AIConfig.builder()\n            .provider(AIProvider.MOCK) // No API costs\n            .timeout(Duration.ofSeconds(5)) // Fast responses\n            .visualAnalysisEnabled(false) // Skip expensive visual analysis\n            .build())\n        .performance(PerformanceConfig.builder()\n            .executionStrategy(ExecutionStrategy.DOM_ONLY) // Skip visual strategy\n            .build())\n        .build();\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#cicd-configuration","title":"CI/CD Configuration","text":"<pre><code>/**\n * CI/CD AI configuration - reliable but cost-controlled\n */\npublic static AutoHealConfiguration createCIConfig() {\n    // Use AI selectively in CI\n    boolean enableAI = Boolean.parseBoolean(System.getenv(\"ENABLE_AI_IN_CI\"));\n\n    if (enableAI) {\n        return AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n                .timeout(Duration.ofSeconds(20)) // Shorter timeout for CI\n                .maxRetries(2) // Fewer retries to avoid CI delays\n                .visualAnalysisEnabled(false) // Disable expensive visual in CI\n                .build())\n            .build();\n    } else {\n        return AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(AIProvider.MOCK)\n                .build())\n            .build();\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#production-configuration","title":"Production Configuration","text":"<pre><code>/**\n * Production AI configuration - full features with monitoring\n */\npublic static AutoHealConfiguration createProductionConfig() {\n    return AutoHealConfiguration.builder()\n        .ai(AIConfig.builder()\n            .provider(AIProvider.OPENAI)\n            .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n            .model(\"gpt-4\") // Best model for accuracy\n            .timeout(Duration.ofSeconds(45)) // Generous timeout\n            .maxRetries(5) // High reliability\n            .visualAnalysisEnabled(true) // Full visual capabilities\n            .rateLimitPerMinute(60) // Control API usage\n            .build())\n        .resilience(ResilienceConfig.builder()\n            .circuitBreakerFailureThreshold(3) // Quick failure detection\n            .circuitBreakerTimeout(Duration.ofMinutes(5)) // Reasonable recovery time\n            .build())\n        .build();\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#ai-configuration-validation","title":"AI Configuration Validation","text":"<pre><code>public class AIConfigurationValidator {\n\n    /**\n     * Validate AI configuration before use\n     */\n    public static void validateAIConfiguration(AIConfig aiConfig) {\n        if (aiConfig.getProvider() == AIProvider.OPENAI) {\n            validateOpenAIConfiguration(aiConfig);\n        }\n\n        // Test AI connectivity\n        testAIConnectivity(aiConfig);\n    }\n\n    private static void validateOpenAIConfiguration(AIConfig aiConfig) {\n        String apiKey = aiConfig.getApiKey();\n\n        if (apiKey == null || apiKey.trim().isEmpty()) {\n            throw new IllegalStateException(\n                \"OpenAI API key is required. Set OPENAI_API_KEY environment variable.\"\n            );\n        }\n\n        if (apiKey.length() &lt; 40) {\n            throw new IllegalStateException(\n                \"OpenAI API key appears invalid (too short). Check OPENAI_API_KEY.\"\n            );\n        }\n\n        if (!apiKey.startsWith(\"sk-\")) {\n            logger.warn(\"OpenAI API key doesn't start with 'sk-' - this may be incorrect\");\n        }\n    }\n\n    private static void testAIConnectivity(AIConfig aiConfig) {\n        try {\n            // Test with simple DOM analysis\n            String testHtml = \"&lt;button id='test'&gt;Test&lt;/button&gt;\";\n            AIService aiService = new ResilientAIService(aiConfig, ResilienceConfig.defaultConfig());\n\n            CompletableFuture&lt;AIAnalysisResult&gt; result = aiService.analyzeDOM(\n                testHtml, \n                \"test button\", \n                \"#nonexistent\"\n            );\n\n            // Wait briefly for connection test\n            AIAnalysisResult analysis = result.get(10, TimeUnit.SECONDS);\n\n            if (analysis != null) {\n                logger.info(\"AI configuration validation successful\");\n            } else {\n                throw new RuntimeException(\"AI service returned null result\");\n            }\n\n        } catch (Exception e) {\n            throw new RuntimeException(\"AI configuration validation failed: \" + e.getMessage(), e);\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#ai-configuration-examples","title":"AI Configuration Examples","text":""},{"location":"user-guide/selenium-integration/#complete-configuration-factory","title":"Complete Configuration Factory","text":"<pre><code>public class AIConfigurationFactory {\n\n    public static AutoHealConfiguration createConfigForEnvironment(String environment) {\n        return switch (environment.toLowerCase()) {\n            case \"production\" -&gt; createProductionConfig();\n            case \"staging\" -&gt; createStagingConfig();\n            case \"ci\", \"continuous-integration\" -&gt; createCIConfig();\n            case \"development\", \"dev\" -&gt; createDevelopmentConfig();\n            default -&gt; throw new IllegalArgumentException(\"Unknown environment: \" + environment);\n        };\n    }\n\n    private static AutoHealConfiguration createStagingConfig() {\n        return AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .apiKey(System.getenv(\"OPENAI_STAGING_API_KEY\"))\n                .timeout(Duration.ofSeconds(30))\n                .maxRetries(3)\n                .visualAnalysisEnabled(true)\n                .rateLimitPerMinute(30) // Lower rate limit for staging\n                .build())\n            .build();\n    }\n\n    /**\n     * Create configuration with cost optimization\n     */\n    public static AutoHealConfiguration createCostOptimizedConfig() {\n        return AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n                .model(\"gpt-3.5-turbo\") // Cheaper model\n                .timeout(Duration.ofSeconds(20)) // Shorter timeout\n                .maxRetries(2) // Fewer retries\n                .visualAnalysisEnabled(false) // Disable expensive visual analysis\n                .maxTokens(1000) // Lower token limit\n                .build())\n            .performance(PerformanceConfig.builder()\n                .executionStrategy(ExecutionStrategy.DOM_ONLY) // Skip visual strategy\n                .build())\n            .build();\n    }\n\n    /**\n     * Create configuration with maximum accuracy\n     */\n    public static AutoHealConfiguration createHighAccuracyConfig() {\n        return AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n                .model(\"gpt-4\") // Best model\n                .timeout(Duration.ofSeconds(60)) // Generous timeout\n                .maxRetries(5) // More retries\n                .visualAnalysisEnabled(true) // Full visual analysis\n                .temperature(0.0) // Deterministic results\n                .maxTokens(4000) // Higher token limit\n                .build())\n            .performance(PerformanceConfig.builder()\n                .executionStrategy(ExecutionStrategy.PARALLEL) // Try all strategies\n                .build())\n            .build();\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#configuration-testing","title":"Configuration Testing","text":"<pre><code>@Test\npublic void testAIConfiguration() {\n    // Test development configuration\n    AutoHealConfiguration devConfig = AIConfigurationFactory.createConfigForEnvironment(\"development\");\n    assertNotNull(devConfig);\n    assertEquals(AIProvider.MOCK, devConfig.getAiConfig().getProvider());\n\n    // Test production configuration (requires API key)\n    if (System.getenv(\"OPENAI_API_KEY\") != null) {\n        AutoHealConfiguration prodConfig = AIConfigurationFactory.createConfigForEnvironment(\"production\");\n        assertNotNull(prodConfig);\n        assertEquals(AIProvider.OPENAI, prodConfig.getAiConfig().getProvider());\n\n        // Validate configuration\n        AIConfigurationValidator.validateAIConfiguration(prodConfig.getAiConfig());\n    } else {\n        logger.warn(\"Skipping production AI config test - OPENAI_API_KEY not set\");\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#security-best-practices-for-ai-configuration","title":"Security Best Practices for AI Configuration","text":""},{"location":"user-guide/selenium-integration/#1-api-key-management","title":"1. API Key Management","text":"<pre><code>public class SecureAIConfiguration {\n\n    /**\n     * Secure API key retrieval with validation\n     */\n    private static String getSecureAPIKey() {\n        String apiKey = System.getenv(\"OPENAI_API_KEY\");\n\n        if (apiKey == null) {\n            // Try alternative sources\n            apiKey = System.getProperty(\"openai.api.key\");\n        }\n\n        if (apiKey == null) {\n            throw new IllegalStateException(\n                \"OpenAI API key not found. Set OPENAI_API_KEY environment variable.\"\n            );\n        }\n\n        // Basic validation\n        if (apiKey.length() &lt; 40 || !apiKey.startsWith(\"sk-\")) {\n            throw new IllegalStateException(\"Invalid OpenAI API key format\");\n        }\n\n        return apiKey;\n    }\n\n    /**\n     * Create secure AI configuration\n     */\n    public static AIConfig createSecureConfig() {\n        return AIConfig.builder()\n            .provider(AIProvider.OPENAI)\n            .apiKey(getSecureAPIKey())\n            .timeout(Duration.ofSeconds(30))\n            .maxRetries(3)\n            .rateLimitPerMinute(60) // Prevent excessive usage\n            .build();\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#2-rate-limiting-and-cost-control","title":"2. Rate Limiting and Cost Control","text":"<pre><code>public class CostControlConfiguration {\n\n    /**\n     * Create cost-controlled AI configuration\n     */\n    public static AIConfig createCostControlledConfig() {\n        return AIConfig.builder()\n            .provider(AIProvider.OPENAI)\n            .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n            .rateLimitPerMinute(30) // Limit API calls\n            .maxTokens(1500) // Limit token usage\n            .timeout(Duration.ofSeconds(25)) // Reasonable timeout\n            .maxRetries(2) // Limit retries\n            .build();\n    }\n\n    /**\n     * Monitor API usage\n     */\n    public static void monitorAPIUsage(AutoHealSeleniumWrapper autoHeal) {\n        String metrics = autoHeal.getMetrics();\n\n        // Log metrics for cost tracking\n        logger.info(\"AI API Usage Metrics: {}\", metrics);\n\n        // Could integrate with billing systems here\n        // sendToBillingSystem(metrics);\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#troubleshooting-ai-configuration","title":"Troubleshooting AI Configuration","text":""},{"location":"user-guide/selenium-integration/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<p>1. API Key Issues <pre><code>// Check if API key is properly set\nif (System.getenv(\"OPENAI_API_KEY\") == null) {\n    logger.error(\"OPENAI_API_KEY environment variable not set\");\n    // Use mock provider as fallback\n    return AIConfig.builder().provider(AIProvider.MOCK).build();\n}\n</code></pre></p> <p>2. Timeout Issues <pre><code>// Increase timeout for complex pages\nAIConfig aiConfig = AIConfig.builder()\n    .timeout(Duration.ofSeconds(60)) // Longer timeout\n    .maxRetries(3)\n    .build();\n</code></pre></p> <p>3. Rate Limiting <pre><code>// Configure rate limiting to avoid API limits\nAIConfig aiConfig = AIConfig.builder()\n    .rateLimitPerMinute(30) // Stay under API limits\n    .retryDelay(Duration.ofSeconds(2)) // Add delay between retries\n    .build();\n</code></pre></p> <p>This comprehensive AI configuration setup ensures AutoHeal Locator can leverage AI services effectively while maintaining security, cost control, and reliability across different environments.</p>"},{"location":"user-guide/selenium-integration/#page-object-model-integration","title":"Page Object Model Integration","text":""},{"location":"user-guide/selenium-integration/#enhanced-base-page-with-autoheal","title":"Enhanced Base Page with AutoHeal","text":"<pre><code>package com.example.pages;\n\nimport com.example.wrapper.AutoHealSeleniumWrapper;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Base page class with AutoHeal integration\n */\npublic abstract class BasePage {\n    protected static final Logger logger = LoggerFactory.getLogger(BasePage.class);\n\n    protected final WebDriver driver;\n    protected final AutoHealSeleniumWrapper autoHeal;\n\n    protected BasePage(WebDriver driver) {\n        this.driver = driver;\n        this.autoHeal = new AutoHealSeleniumWrapper(driver);\n        logger.info(\"Initialized {} page\", this.getClass().getSimpleName());\n    }\n\n    // ==================== COMMON PAGE METHODS ====================\n\n    protected void navigateTo(String url) {\n        autoHeal.navigateTo(url);\n        waitForPageLoad();\n    }\n\n    protected String getCurrentUrl() {\n        return autoHeal.getCurrentUrl();\n    }\n\n    protected String getTitle() {\n        return autoHeal.getTitle();\n    }\n\n    protected void waitForPageLoad() {\n        autoHeal.executeScript(\"return document.readyState\").equals(\"complete\");\n    }\n\n    // ==================== ENHANCED ELEMENT INTERACTIONS ====================\n\n    protected WebElement findElement(String selector, String description) {\n        return autoHeal.findElement(selector, description);\n    }\n\n    protected void click(String selector, String description) {\n        autoHeal.click(selector, description);\n    }\n\n    protected void type(String selector, String text, String description) {\n        autoHeal.sendKeys(selector, text, description);\n    }\n\n    protected String getText(String selector, String description) {\n        return autoHeal.getText(selector, description);\n    }\n\n    protected String getAttribute(String selector, String attributeName, String description) {\n        return autoHeal.getAttribute(selector, attributeName, description);\n    }\n\n    protected boolean isDisplayed(String selector, String description) {\n        return autoHeal.isDisplayed(selector, description);\n    }\n\n    protected boolean isEnabled(String selector, String description) {\n        return autoHeal.isEnabled(selector, description);\n    }\n\n    protected boolean isElementPresent(String selector, String description) {\n        return autoHeal.isElementPresent(selector, description);\n    }\n\n    // ==================== PAGE VALIDATION METHODS ====================\n\n    /**\n     * Validate that the page is loaded correctly\n     */\n    public abstract boolean isPageLoaded();\n\n    /**\n     * Wait for page to be loaded\n     */\n    public void waitForPageToLoad() {\n        waitForPageLoad();\n        if (!isPageLoaded()) {\n            throw new RuntimeException(\"Page failed to load properly: \" + this.getClass().getSimpleName());\n        }\n    }\n\n    // ==================== UTILITY METHODS ====================\n\n    /**\n     * Get AutoHeal metrics for this page\n     */\n    public String getPageMetrics() {\n        return autoHeal.getMetrics();\n    }\n\n    /**\n     * Check if AutoHeal is healthy\n     */\n    public boolean isAutoHealHealthy() {\n        return autoHeal.isAutoHealHealthy();\n    }\n\n    /**\n     * Take screenshot for debugging\n     */\n    public byte[] takeScreenshot() {\n        return ((org.openqa.selenium.TakesScreenshot) driver)\n                .getScreenshotAs(org.openqa.selenium.OutputType.BYTES);\n    }\n\n    /**\n     * Cleanup resources when done with page\n     */\n    public void cleanup() {\n        // Override in subclasses if needed\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#example-login-page-implementation","title":"Example Login Page Implementation","text":"<pre><code>package com.example.pages;\n\nimport org.openqa.selenium.WebDriver;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Login page with AutoHeal capabilities\n */\npublic class LoginPage extends BasePage {\n    private static final Logger logger = LoggerFactory.getLogger(LoginPage.class);\n\n    // Selectors\n    private static final String USERNAME_FIELD = \"#user-name\";\n    private static final String PASSWORD_FIELD = \"#password\";\n    private static final String LOGIN_BUTTON = \"#login-button\";\n    private static final String ERROR_MESSAGE = \"[data-test='error']\";\n    private static final String LOGO = \".login_logo\";\n\n    public LoginPage(WebDriver driver) {\n        super(driver);\n    }\n\n    // ==================== PAGE SPECIFIC METHODS ====================\n\n    /**\n     * Navigate to login page\n     */\n    public void goToLoginPage(String baseUrl) {\n        navigateTo(baseUrl);\n        waitForPageToLoad();\n    }\n\n    /**\n     * Enter username\n     */\n    public void enterUsername(String username) {\n        type(USERNAME_FIELD, username, \"Username input field\");\n    }\n\n    /**\n     * Enter password\n     */\n    public void enterPassword(String password) {\n        type(PASSWORD_FIELD, password, \"Password input field\");\n    }\n\n    /**\n     * Click login button\n     */\n    public void clickLoginButton() {\n        click(LOGIN_BUTTON, \"Login submit button\");\n    }\n\n    /**\n     * Perform complete login\n     */\n    public void login(String username, String password) {\n        logger.info(\"Performing login with username: {}\", username);\n        enterUsername(username);\n        enterPassword(password);\n        clickLoginButton();\n    }\n\n    /**\n     * Get error message text\n     */\n    public String getErrorMessage() {\n        if (isErrorMessageDisplayed()) {\n            return getText(ERROR_MESSAGE, \"Error message\");\n        }\n        return null;\n    }\n\n    /**\n     * Check if error message is displayed\n     */\n    public boolean isErrorMessageDisplayed() {\n        return isElementPresent(ERROR_MESSAGE, \"Error message\");\n    }\n\n    /**\n     * Get logo text\n     */\n    public String getLogoText() {\n        return getText(LOGO, \"Login page logo\");\n    }\n\n    /**\n     * Clear input fields\n     */\n    public void clearFields() {\n        if (isElementPresent(USERNAME_FIELD, \"Username field\")) {\n            findElement(USERNAME_FIELD, \"Username field\").clear();\n        }\n        if (isElementPresent(PASSWORD_FIELD, \"Password field\")) {\n            findElement(PASSWORD_FIELD, \"Password field\").clear();\n        }\n    }\n\n    /**\n     * Check if on login page\n     */\n    public boolean isOnLoginPage() {\n        return isElementPresent(LOGIN_BUTTON, \"Login button\") &amp;&amp; \n               isElementPresent(USERNAME_FIELD, \"Username field\");\n    }\n\n    /**\n     * Validate login form is functional\n     */\n    public boolean validateLoginFormInteractivity() {\n        return isEnabled(USERNAME_FIELD, \"Username field\") &amp;&amp;\n               isEnabled(PASSWORD_FIELD, \"Password field\") &amp;&amp;\n               isEnabled(LOGIN_BUTTON, \"Login button\");\n    }\n\n    // ==================== PAGE VALIDATION ====================\n\n    @Override\n    public boolean isPageLoaded() {\n        return isDisplayed(USERNAME_FIELD, \"Username field\") &amp;&amp;\n               isDisplayed(PASSWORD_FIELD, \"Password field\") &amp;&amp;\n               isDisplayed(LOGIN_BUTTON, \"Login button\") &amp;&amp;\n               isDisplayed(LOGO, \"Logo\");\n    }\n\n    /**\n     * Enhanced login with validation and result\n     */\n    public static class LoginResult {\n        private final boolean successful;\n        private final String message;\n        private final long executionTime;\n\n        public LoginResult(boolean successful, String message, long executionTime) {\n            this.successful = successful;\n            this.message = message;\n            this.executionTime = executionTime;\n        }\n\n        public boolean isSuccessful() { return successful; }\n        public String getMessage() { return message; }\n        public long getExecutionTime() { return executionTime; }\n\n        @Override\n        public String toString() {\n            return String.format(\"LoginResult{successful=%s, message='%s', executionTime=%dms}\", \n                               successful, message, executionTime);\n        }\n    }\n\n    public LoginResult performValidatedLogin(String username, String password) {\n        long startTime = System.currentTimeMillis();\n\n        try {\n            // Pre-login validation\n            if (!isPageLoaded()) {\n                return new LoginResult(false, \"Login page not properly loaded\", \n                                     System.currentTimeMillis() - startTime);\n            }\n\n            // Perform login\n            login(username, password);\n\n            // Wait a moment for response\n            Thread.sleep(2000);\n\n            // Check for errors\n            if (isErrorMessageDisplayed()) {\n                String errorMsg = getErrorMessage();\n                return new LoginResult(false, \"Login failed: \" + errorMsg, \n                                     System.currentTimeMillis() - startTime);\n            }\n\n            // Check if still on login page (indicates failure)\n            if (isOnLoginPage()) {\n                return new LoginResult(false, \"Login failed: Still on login page\", \n                                     System.currentTimeMillis() - startTime);\n            }\n\n            // Success - no longer on login page and no error message\n            return new LoginResult(true, \"Login successful\", \n                                 System.currentTimeMillis() - startTime);\n\n        } catch (Exception e) {\n            logger.error(\"Exception during login validation: {}\", e.getMessage());\n            return new LoginResult(false, \"Login failed with exception: \" + e.getMessage(), \n                                 System.currentTimeMillis() - startTime);\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#test-framework-integration","title":"Test Framework Integration","text":""},{"location":"user-guide/selenium-integration/#junit-5-integration-with-test-extension","title":"JUnit 5 Integration with Test Extension","text":"<pre><code>package com.example.junit;\n\nimport com.example.config.EnvironmentConfig;\nimport com.example.wrapper.AutoHealSeleniumWrapper;\nimport org.junit.jupiter.api.extension.*;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * JUnit 5 extension for AutoHeal test setup\n */\npublic class AutoHealTestExtension implements BeforeEachCallback, AfterEachCallback, \n                                            BeforeAllCallback, AfterAllCallback {\n\n    private static final Logger logger = LoggerFactory.getLogger(AutoHealTestExtension.class);\n\n    @Override\n    public void beforeAll(ExtensionContext context) throws Exception {\n        logger.info(\"=== AutoHeal Test Suite Starting ===\");\n    }\n\n    @Override\n    public void beforeEach(ExtensionContext context) throws Exception {\n        logger.info(\"Setting up test: {}\", context.getDisplayName());\n\n        // Create WebDriver\n        WebDriver driver = createWebDriver();\n\n        // Create AutoHeal wrapper\n        EnvironmentConfig config = new EnvironmentConfig();\n        AutoHealSeleniumWrapper autoHeal = new AutoHealSeleniumWrapper(driver);\n\n        // Store in context for test method access\n        getStore(context).put(\"driver\", driver);\n        getStore(context).put(\"autoHeal\", autoHeal);\n        getStore(context).put(\"config\", config);\n\n        logger.info(\"Test setup completed for: {}\", context.getDisplayName());\n    }\n\n    @Override\n    public void afterEach(ExtensionContext context) throws Exception {\n        logger.info(\"Cleaning up test: {}\", context.getDisplayName());\n\n        AutoHealSeleniumWrapper autoHeal = getStore(context).get(\"autoHeal\", AutoHealSeleniumWrapper.class);\n        WebDriver driver = getStore(context).get(\"driver\", WebDriver.class);\n\n        try {\n            // Log AutoHeal metrics\n            if (autoHeal != null) {\n                logger.info(\"Test metrics: {}\", autoHeal.getMetrics());\n                autoHeal.shutdown();\n            }\n\n            // Quit driver\n            if (driver != null) {\n                driver.quit();\n            }\n\n        } catch (Exception e) {\n            logger.error(\"Error during test cleanup: {}\", e.getMessage());\n        }\n\n        logger.info(\"Test cleanup completed for: {}\", context.getDisplayName());\n    }\n\n    @Override\n    public void afterAll(ExtensionContext context) throws Exception {\n        logger.info(\"=== AutoHeal Test Suite Completed ===\");\n    }\n\n    private WebDriver createWebDriver() {\n        ChromeOptions options = new ChromeOptions();\n        options.addArguments(\"--headless\");\n        options.addArguments(\"--no-sandbox\");\n        options.addArguments(\"--disable-dev-shm-usage\");\n        options.addArguments(\"--disable-gpu\");\n        options.addArguments(\"--window-size=1920,1080\");\n\n        return new ChromeDriver(options);\n    }\n\n    private ExtensionContext.Store getStore(ExtensionContext context) {\n        return context.getStore(ExtensionContext.Namespace.create(getClass(), context.getRequiredTestMethod()));\n    }\n}\n\n// Base test class using the extension\npackage com.example.base;\n\nimport com.example.junit.AutoHealTestExtension;\nimport com.example.wrapper.AutoHealSeleniumWrapper;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.openqa.selenium.WebDriver;\nimport org.junit.jupiter.api.TestInfo;\n\n@ExtendWith(AutoHealTestExtension.class)\npublic abstract class BaseAutoHealTest {\n\n    protected WebDriver getDriver(TestInfo testInfo) {\n        return getStore(testInfo).get(\"driver\", WebDriver.class);\n    }\n\n    protected AutoHealSeleniumWrapper getAutoHeal(TestInfo testInfo) {\n        return getStore(testInfo).get(\"autoHeal\", AutoHealSeleniumWrapper.class);\n    }\n\n    private org.junit.jupiter.api.extension.ExtensionContext.Store getStore(TestInfo testInfo) {\n        // This is a simplified version - actual implementation would need proper context access\n        return null; // Implementation depends on how you structure your test framework\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#complete-test-example","title":"Complete Test Example","text":"<pre><code>package com.example.tests;\n\nimport com.example.base.BaseAutoHealTest;\nimport com.example.pages.LoginPage;\nimport com.example.pages.InventoryPage;\nimport org.junit.jupiter.api.*;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n@DisplayName(\"Complete AutoHeal Login Test Suite\")\npublic class CompleteLoginTest extends BaseAutoHealTest {\n    private static final Logger logger = LoggerFactory.getLogger(CompleteLoginTest.class);\n\n    private static final String BASE_URL = \"https://www.saucedemo.com\";\n    private static final String VALID_USERNAME = \"standard_user\";\n    private static final String VALID_PASSWORD = \"secret_sauce\";\n\n    private LoginPage loginPage;\n    private InventoryPage inventoryPage;\n\n    @BeforeEach\n    void setupPages(TestInfo testInfo) {\n        loginPage = new LoginPage(getDriver(testInfo));\n        inventoryPage = new InventoryPage(getDriver(testInfo));\n\n        logger.info(\"Test setup completed for: {}\", testInfo.getDisplayName());\n    }\n\n    @Test\n    @Order(1)\n    @DisplayName(\"Verify Login Page Elements are Present\")\n    void testLoginPageElementsPresent() {\n        logger.info(\"=== Testing Login Page Elements ===\");\n\n        loginPage.goToLoginPage(BASE_URL);\n\n        // Validate all elements are present\n        assertTrue(loginPage.isPageLoaded(), \"Login page should be fully loaded\");\n        assertTrue(loginPage.validateLoginFormInteractivity(), \"Login form should be interactive\");\n\n        // Check specific elements\n        assertEquals(\"Swag Labs\", loginPage.getLogoText(), \"Logo should display correct text\");\n\n        logger.info(\"All login page elements are present and functional\");\n    }\n\n    @Test\n    @Order(2) \n    @DisplayName(\"Successful Login Flow\")\n    void testSuccessfulLogin() {\n        logger.info(\"=== Testing Successful Login ===\");\n\n        loginPage.goToLoginPage(BASE_URL);\n\n        // Perform login with validation\n        LoginPage.LoginResult result = loginPage.performValidatedLogin(VALID_USERNAME, VALID_PASSWORD);\n\n        // Verify login success\n        assertTrue(result.isSuccessful(), \"Login should succeed: \" + result.getMessage());\n        logger.info(\"Login completed in {}ms\", result.getExecutionTime());\n\n        // Verify navigation to inventory page\n        assertTrue(inventoryPage.isPageLoaded(), \"Should be redirected to inventory page\");\n        assertEquals(\"Products\", inventoryPage.getPageTitle(), \"Page title should be 'Products'\");\n\n        // Verify inventory functionality\n        int itemCount = inventoryPage.getInventoryItemCount();\n        assertTrue(itemCount &gt; 0, \"Should have inventory items: \" + itemCount);\n\n        logger.info(\"Successful login test completed with {} items found\", itemCount);\n    }\n\n    @Test\n    @Order(3)\n    @DisplayName(\"Login with Invalid Credentials\")\n    void testInvalidLogin() {\n        logger.info(\"=== Testing Invalid Login ===\");\n\n        loginPage.goToLoginPage(BASE_URL);\n\n        // Attempt login with invalid credentials\n        LoginPage.LoginResult result = loginPage.performValidatedLogin(\"invalid_user\", \"invalid_pass\");\n\n        // Verify login failure\n        assertFalse(result.isSuccessful(), \"Login should fail with invalid credentials\");\n        assertTrue(result.getMessage().contains(\"failed\"), \"Should contain failure message\");\n\n        // Verify error message display\n        assertTrue(loginPage.isErrorMessageDisplayed(), \"Error message should be displayed\");\n        String errorMsg = loginPage.getErrorMessage();\n        assertNotNull(errorMsg, \"Error message should not be null\");\n        assertTrue(errorMsg.contains(\"do not match\"), \"Should show credentials mismatch error\");\n\n        // Verify still on login page\n        assertTrue(loginPage.isOnLoginPage(), \"Should remain on login page\");\n\n        logger.info(\"Invalid login test completed - error properly displayed\");\n    }\n\n    @Test\n    @Order(4)\n    @DisplayName(\"AutoHeal Health and Performance Monitoring\")\n    void testAutoHealMonitoring() {\n        logger.info(\"=== Testing AutoHeal Health Monitoring ===\");\n\n        loginPage.goToLoginPage(BASE_URL);\n\n        // Check initial health\n        boolean initialHealth = loginPage.isAutoHealHealthy();\n        logger.info(\"Initial AutoHeal health: {}\", initialHealth);\n\n        // Perform operations to generate metrics\n        loginPage.performValidatedLogin(VALID_USERNAME, VALID_PASSWORD);\n\n        // Check metrics\n        String metrics = loginPage.getPageMetrics();\n        assertNotNull(metrics, \"Metrics should be available\");\n        assertTrue(metrics.contains(\"Success Rate\"), \"Metrics should contain success rate\");\n\n        logger.info(\"AutoHeal metrics: {}\", metrics);\n\n        // Check final health\n        boolean finalHealth = loginPage.isAutoHealHealthy();\n        logger.info(\"Final AutoHeal health: {}\", finalHealth);\n\n        logger.info(\"AutoHeal monitoring test completed successfully\");\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#monitoring-metrics","title":"Monitoring &amp; Metrics","text":""},{"location":"user-guide/selenium-integration/#metrics-collection-example","title":"Metrics Collection Example","text":"<pre><code>package com.example.monitoring;\n\nimport com.autoheal.monitoring.AutoHealMetrics;\nimport com.example.wrapper.AutoHealSeleniumWrapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.time.Duration;\nimport java.time.LocalDateTime;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * AutoHeal metrics collector and reporter\n */\npublic class AutoHealMetricsCollector {\n    private static final Logger logger = LoggerFactory.getLogger(AutoHealMetricsCollector.class);\n\n    private final AutoHealSeleniumWrapper autoHeal;\n    private final ScheduledExecutorService scheduler;\n    private boolean isCollecting = false;\n\n    public AutoHealMetricsCollector(AutoHealSeleniumWrapper autoHeal) {\n        this.autoHeal = autoHeal;\n        this.scheduler = Executors.newScheduledThreadPool(1);\n    }\n\n    /**\n     * Start collecting metrics at regular intervals\n     */\n    public void startMetricsCollection(Duration interval) {\n        if (isCollecting) {\n            logger.warn(\"Metrics collection already started\");\n            return;\n        }\n\n        isCollecting = true;\n        logger.info(\"Starting metrics collection every {} seconds\", interval.getSeconds());\n\n        scheduler.scheduleAtFixedRate(this::collectAndLogMetrics, \n                                    0, interval.getSeconds(), TimeUnit.SECONDS);\n    }\n\n    /**\n     * Collect and log current metrics\n     */\n    public void collectAndLogMetrics() {\n        try {\n            String metrics = autoHeal.getMetrics();\n            boolean healthy = autoHeal.isAutoHealHealthy();\n\n            logger.info(\"=== AutoHeal Metrics at {} ===\", LocalDateTime.now());\n            logger.info(\"Health Status: {}\", healthy ? \"HEALTHY\" : \"DEGRADED\");\n            logger.info(\"Metrics: {}\", metrics);\n\n            // You could send metrics to monitoring systems here\n            // sendToPrometheus(metrics);\n            // sendToCloudWatch(metrics);\n\n        } catch (Exception e) {\n            logger.error(\"Failed to collect metrics: {}\", e.getMessage());\n        }\n    }\n\n    /**\n     * Get current metrics as structured data\n     */\n    public MetricsSnapshot getCurrentMetrics() {\n        try {\n            String metricsText = autoHeal.getMetrics();\n            boolean healthy = autoHeal.isAutoHealHealthy();\n\n            return new MetricsSnapshot(\n                LocalDateTime.now(),\n                healthy,\n                metricsText,\n                parseSuccessRate(metricsText),\n                parseCacheHitRate(metricsText)\n            );\n\n        } catch (Exception e) {\n            logger.error(\"Failed to get current metrics: {}\", e.getMessage());\n            return null;\n        }\n    }\n\n    /**\n     * Stop metrics collection\n     */\n    public void stopMetricsCollection() {\n        if (!isCollecting) {\n            return;\n        }\n\n        isCollecting = false;\n        scheduler.shutdown();\n        logger.info(\"Metrics collection stopped\");\n    }\n\n    // Helper methods to parse metrics\n    private double parseSuccessRate(String metrics) {\n        try {\n            if (metrics.contains(\"Success Rate: \")) {\n                String[] parts = metrics.split(\"Success Rate: \")[1].split(\"%\")[0].split(\" \");\n                return Double.parseDouble(parts[0]);\n            }\n        } catch (Exception e) {\n            logger.warn(\"Failed to parse success rate from metrics: {}\", e.getMessage());\n        }\n        return 0.0;\n    }\n\n    private double parseCacheHitRate(String metrics) {\n        try {\n            if (metrics.contains(\"Cache Hit Rate: \")) {\n                String[] parts = metrics.split(\"Cache Hit Rate: \")[1].split(\"%\")[0].split(\" \");\n                return Double.parseDouble(parts[0]);\n            }\n        } catch (Exception e) {\n            logger.warn(\"Failed to parse cache hit rate from metrics: {}\", e.getMessage());\n        }\n        return 0.0;\n    }\n\n    /**\n     * Metrics snapshot data class\n     */\n    public static class MetricsSnapshot {\n        private final LocalDateTime timestamp;\n        private final boolean healthy;\n        private final String rawMetrics;\n        private final double successRate;\n        private final double cacheHitRate;\n\n        public MetricsSnapshot(LocalDateTime timestamp, boolean healthy, String rawMetrics, \n                             double successRate, double cacheHitRate) {\n            this.timestamp = timestamp;\n            this.healthy = healthy;\n            this.rawMetrics = rawMetrics;\n            this.successRate = successRate;\n            this.cacheHitRate = cacheHitRate;\n        }\n\n        // Getters\n        public LocalDateTime getTimestamp() { return timestamp; }\n        public boolean isHealthy() { return healthy; }\n        public String getRawMetrics() { return rawMetrics; }\n        public double getSuccessRate() { return successRate; }\n        public double getCacheHitRate() { return cacheHitRate; }\n\n        @Override\n        public String toString() {\n            return String.format(\"MetricsSnapshot{timestamp=%s, healthy=%s, successRate=%.2f%%, cacheHitRate=%.2f%%}\", \n                               timestamp, healthy, successRate, cacheHitRate);\n        }\n    }\n}\n\n// Usage example in tests\npublic class MetricsExample {\n    public void demonstrateMetricsCollection() {\n        WebDriver driver = new ChromeDriver();\n        AutoHealSeleniumWrapper autoHeal = new AutoHealSeleniumWrapper(driver);\n        AutoHealMetricsCollector collector = new AutoHealMetricsCollector(autoHeal);\n\n        try {\n            // Start collecting metrics every 30 seconds\n            collector.startMetricsCollection(Duration.ofSeconds(30));\n\n            // Run your tests here...\n            autoHeal.navigateTo(\"https://example.com\");\n            autoHeal.click(\"#button\", \"Test button\");\n\n            // Get current metrics snapshot\n            AutoHealMetricsCollector.MetricsSnapshot snapshot = collector.getCurrentMetrics();\n            System.out.println(\"Current metrics: \" + snapshot);\n\n            // Stop collection when done\n            collector.stopMetricsCollection();\n\n        } finally {\n            autoHeal.shutdown();\n            driver.quit();\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/selenium-integration/#1-element-description-guidelines","title":"1. Element Description Guidelines","text":"<pre><code>// \u274c Poor descriptions\nautoHeal.findElement(\"#btn\", \"button\");\nautoHeal.findElement(\".field\", \"input\");\n\n// \u2705 Good descriptions\nautoHeal.findElement(\"#submit-btn\", \"Submit payment button\");\nautoHeal.findElement(\"#email-field\", \"User email input field\");\nautoHeal.findElement(\"[data-test='confirm-dialog']\", \"Order confirmation dialog\");\n</code></pre>"},{"location":"user-guide/selenium-integration/#2-selector-strategy-best-practices","title":"2. Selector Strategy Best Practices","text":"<pre><code>public class SelectorBestPractices {\n\n    // \u2705 Prefer stable attributes\n    private static final String LOGIN_BUTTON = \"[data-testid='login-button']\";\n    private static final String USERNAME_FIELD = \"[data-cy='username']\";\n\n    // \u2705 Use semantic selectors when possible\n    private static final String MAIN_NAVIGATION = \"nav[role='navigation']\";\n    private static final String ERROR_ALERT = \"[role='alert']\";\n\n    // \u2705 Combine selectors for specificity\n    private static final String PRICE_CELL = \"tr[data-product='laptop'] td.price\";\n\n    // \u274c Avoid fragile selectors\n    // private static final String BAD_SELECTOR = \"body &gt; div:nth-child(3) &gt; form &gt; button\";\n    // private static final String CLASS_ONLY = \".btn\";\n\n    public void demonstrateBestPractices(AutoHealSeleniumWrapper autoHeal) {\n        // Use meaningful descriptions that help AI understand context\n        autoHeal.click(LOGIN_BUTTON, \"Main login button on authentication form\");\n\n        // Provide context when elements might be ambiguous\n        autoHeal.type(USERNAME_FIELD, \"testuser\", \"Username field in login form (not search box)\");\n\n        // Use consistent naming patterns\n        autoHeal.click(\"[data-test='submit-order']\", \"Submit order button in checkout process\");\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#3-error-handling-and-fallbacks","title":"3. Error Handling and Fallbacks","text":"<pre><code>public class ErrorHandlingBestPractices {\n\n    public void robustElementInteraction(AutoHealSeleniumWrapper autoHeal, \n                                       String selector, String description) {\n        try {\n            // Primary approach with AutoHeal\n            autoHeal.click(selector, description);\n\n        } catch (Exception e) {\n            logger.warn(\"AutoHeal failed for '{}', attempting fallback: {}\", description, e.getMessage());\n\n            try {\n                // Fallback approach\n                WebElement element = autoHeal.getDriver().findElement(By.cssSelector(selector));\n                element.click();\n\n            } catch (Exception fallbackError) {\n                logger.error(\"Both AutoHeal and fallback failed for '{}': {}\", description, fallbackError.getMessage());\n\n                // Take screenshot for debugging\n                byte[] screenshot = ((TakesScreenshot) autoHeal.getDriver())\n                        .getScreenshotAs(OutputType.BYTES);\n\n                // Save or log screenshot\n                saveScreenshotForDebugging(screenshot, description);\n\n                throw new RuntimeException(\"Element interaction failed completely: \" + description, fallbackError);\n            }\n        }\n    }\n\n    private void saveScreenshotForDebugging(byte[] screenshot, String description) {\n        // Implementation to save screenshot with meaningful name\n        String filename = \"failure_\" + description.replaceAll(\"[^a-zA-Z0-9]\", \"_\") + \n                         \"_\" + System.currentTimeMillis() + \".png\";\n        // Save screenshot logic here\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#4-configuration-management","title":"4. Configuration Management","text":"<pre><code>public class ConfigurationBestPractices {\n\n    /**\n     * Environment-aware configuration\n     */\n    public static AutoHealConfiguration createEnvironmentConfig() {\n        String environment = System.getProperty(\"test.environment\", \"development\");\n\n        return switch (environment.toLowerCase()) {\n            case \"production\" -&gt; createProductionConfig();\n            case \"staging\" -&gt; createStagingConfig();\n            case \"ci\" -&gt; createCIConfig();\n            default -&gt; createDevelopmentConfig();\n        };\n    }\n\n    private static AutoHealConfiguration createProductionConfig() {\n        return AutoHealConfiguration.builder()\n            .cache(CacheConfig.builder()\n                .maximumSize(10000)\n                .expireAfterWrite(Duration.ofHours(24))\n                .build())\n            .ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n                .timeout(Duration.ofSeconds(30))\n                .build())\n            .performance(PerformanceConfig.builder()\n                .threadPoolSize(16)\n                .elementTimeout(Duration.ofSeconds(15))\n                .build())\n            .build();\n    }\n\n    private static AutoHealConfiguration createDevelopmentConfig() {\n        return AutoHealConfiguration.builder()\n            .cache(CacheConfig.builder()\n                .maximumSize(1000)\n                .expireAfterWrite(Duration.ofHours(1))\n                .build())\n            .ai(AIConfig.builder()\n                .provider(AIProvider.MOCK) // Fast for development\n                .build())\n            .performance(PerformanceConfig.builder()\n                .threadPoolSize(4)\n                .elementTimeout(Duration.ofSeconds(5))\n                .build())\n            .build();\n    }\n\n    private static AutoHealConfiguration createCIConfig() {\n        return AutoHealConfiguration.builder()\n            .cache(CacheConfig.builder()\n                .maximumSize(5000)\n                .expireAfterWrite(Duration.ofHours(6))\n                .build())\n            .ai(AIConfig.builder()\n                .provider(AIProvider.MOCK) // Reliable for CI\n                .build())\n            .performance(PerformanceConfig.builder()\n                .threadPoolSize(8)\n                .elementTimeout(Duration.ofSeconds(10))\n                .build())\n            .build();\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/selenium-integration/#common-issues-and-solutions_1","title":"Common Issues and Solutions","text":""},{"location":"user-guide/selenium-integration/#1-autoheal-not-finding-elements","title":"1. AutoHeal Not Finding Elements","text":"<p>Problem: AutoHeal fails to locate elements even with healing enabled.</p> <p>Solutions: <pre><code>// \u2705 Solution 1: Improve element descriptions\n// Instead of:\nautoHeal.findElement(\"#btn\", \"button\");\n\n// Use:\nautoHeal.findElement(\"#btn\", \"Submit order button in checkout form\");\n\n// \u2705 Solution 2: Check element timing\n// Add explicit waits before AutoHeal operations\nWebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\nwait.until(ExpectedConditions.presenceOfElementLocated(By.id(\"dynamic-content\")));\nautoHeal.findElement(\"#dynamic-element\", \"Dynamically loaded content element\");\n\n// \u2705 Solution 3: Verify configuration\nAutoHealConfiguration config = AutoHealConfiguration.builder()\n    .ai(AIConfig.builder()\n        .provider(AIProvider.OPENAI)\n        .apiKey(\"your-valid-api-key\") // Ensure API key is valid\n        .timeout(Duration.ofSeconds(30)) // Increase timeout if needed\n        .build())\n    .build();\n</code></pre></p>"},{"location":"user-guide/selenium-integration/#2-performance-issues","title":"2. Performance Issues","text":"<p>Problem: AutoHeal operations are slow.</p> <p>Solutions: <pre><code>// \u2705 Solution 1: Optimize thread pool size\nAutoHealConfiguration config = AutoHealConfiguration.builder()\n    .performance(PerformanceConfig.builder()\n        .threadPoolSize(16) // Increase for parallel operations\n        .elementTimeout(Duration.ofSeconds(5)) // Reduce if elements load quickly\n        .build())\n    .build();\n\n// \u2705 Solution 2: Use async operations\nCompletableFuture&lt;WebElement&gt; element1 = autoHeal.findElementAsync(\"#el1\", \"First element\");\nCompletableFuture&lt;WebElement&gt; element2 = autoHeal.findElementAsync(\"#el2\", \"Second element\");\n\nCompletableFuture.allOf(element1, element2).thenRun(() -&gt; {\n    // Both elements found in parallel\n});\n\n// \u2705 Solution 3: Optimize cache settings\nCacheConfig cacheConfig = CacheConfig.builder()\n    .maximumSize(10000) // Increase cache size\n    .expireAfterWrite(Duration.ofHours(24)) // Increase cache TTL\n    .build();\n</code></pre></p>"},{"location":"user-guide/selenium-integration/#3-ai-service-connection-issues","title":"3. AI Service Connection Issues","text":"<p>Problem: AI service timeouts or connection failures.</p> <p>Solutions: <pre><code>// \u2705 Solution 1: Configure resilience\nResilienceConfig resilienceConfig = ResilienceConfig.builder()\n    .circuitBreakerFailureThreshold(3) // Allow some failures\n    .circuitBreakerTimeout(Duration.ofMinutes(2)) // Shorter circuit breaker timeout\n    .retryMaxAttempts(5) // Increase retry attempts\n    .retryDelay(Duration.ofSeconds(2)) // Add delay between retries\n    .build();\n\n// \u2705 Solution 2: Use fallback AI provider\nAIConfig aiConfig = AIConfig.builder()\n    .provider(AIProvider.OPENAI)\n    .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n    .timeout(Duration.ofSeconds(45)) // Increase timeout\n    .maxRetries(5)\n    .build();\n\n// \u2705 Solution 3: Add health checks\npublic void monitorAIHealth(AutoHealSeleniumWrapper autoHeal) {\n    if (!autoHeal.isAutoHealHealthy()) {\n        logger.warn(\"AutoHeal health degraded - consider using fallback strategies\");\n        // Implement fallback logic\n    }\n}\n</code></pre></p>"},{"location":"user-guide/selenium-integration/#4-memory-issues","title":"4. Memory Issues","text":"<p>Problem: Memory usage grows over time with AutoHeal.</p> <p>Solutions: <pre><code>// \u2705 Solution 1: Configure cache eviction\nCacheConfig cacheConfig = CacheConfig.builder()\n    .maximumSize(5000) // Limit cache size\n    .expireAfterAccess(Duration.ofHours(1)) // Evict unused entries\n    .expireAfterWrite(Duration.ofHours(6)) // Evict old entries\n    .build();\n\n// \u2705 Solution 2: Regular cleanup\npublic void performRegularCleanup(AutoHealSeleniumWrapper autoHeal) {\n    // Clear cache periodically\n    autoHeal.clearCache();\n\n    // Monitor metrics\n    String metrics = autoHeal.getMetrics();\n    logger.info(\"Memory cleanup performed. Current metrics: {}\", metrics);\n}\n\n// \u2705 Solution 3: Proper shutdown\npublic void cleanupResources(AutoHealSeleniumWrapper autoHeal, WebDriver driver) {\n    try {\n        autoHeal.shutdown(); // Shutdown AutoHeal first\n    } finally {\n        driver.quit(); // Then quit driver\n    }\n}\n</code></pre></p>"},{"location":"user-guide/selenium-integration/#debug-mode-configuration","title":"Debug Mode Configuration","text":"<pre><code>public class DebugConfiguration {\n\n    public static AutoHealSeleniumWrapper createDebugWrapper(WebDriver driver) {\n        // Enable debug logging\n        System.setProperty(\"org.slf4j.simpleLogger.log.com.autoheal\", \"DEBUG\");\n\n        AutoHealConfiguration config = AutoHealConfiguration.builder()\n            .performance(PerformanceConfig.builder()\n                .enableMetrics(true) // Enable detailed metrics\n                .elementTimeout(Duration.ofSeconds(30)) // Longer timeouts for debugging\n                .build())\n            .cache(CacheConfig.builder()\n                .recordStats(true) // Enable cache statistics\n                .build())\n            .build();\n\n        return new AutoHealSeleniumWrapper(driver);\n    }\n\n    public static void enableVerboseLogging() {\n        System.setProperty(\"org.slf4j.simpleLogger.log.com.autoheal\", \"TRACE\");\n        System.setProperty(\"org.slf4j.simpleLogger.showDateTime\", \"true\");\n        System.setProperty(\"org.slf4j.simpleLogger.dateTimeFormat\", \"yyyy-MM-dd HH:mm:ss\");\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#testing-autoheal-configuration","title":"Testing AutoHeal Configuration","text":"<pre><code>@Test\npublic void validateAutoHealConfiguration() {\n    WebDriver driver = new ChromeDriver();\n    AutoHealSeleniumWrapper autoHeal = new AutoHealSeleniumWrapper(driver);\n\n    try {\n        // Test basic functionality\n        autoHeal.navigateTo(\"https://example.com\");\n        assertTrue(autoHeal.isElementPresent(\"body\", \"Page body\"), \n                  \"Basic element finding should work\");\n\n        // Test health status\n        assertTrue(autoHeal.isAutoHealHealthy(), \"AutoHeal should be healthy\");\n\n        // Test metrics collection\n        String metrics = autoHeal.getMetrics();\n        assertNotNull(metrics, \"Metrics should be available\");\n        assertTrue(metrics.contains(\"Success Rate\"), \"Metrics should contain success rate\");\n\n        // Test cache functionality\n        autoHeal.clearCache(); // Should not throw exception\n\n        logger.info(\"AutoHeal configuration validation successful\");\n\n    } finally {\n        autoHeal.shutdown();\n        driver.quit();\n    }\n}\n</code></pre>"},{"location":"user-guide/selenium-integration/#summary","title":"Summary","text":"<p>This guide provides comprehensive coverage of using AutoHeal Locator with Selenium WebDriver, including:</p> <ul> <li>\u2705 Quick Setup: Simple installation and basic usage</li> <li>\u2705 Wrapper Creation: Custom Selenium wrappers with AutoHeal</li> <li>\u2705 Advanced Configuration: Production-ready configurations</li> <li>\u2705 Page Object Integration: Enhanced page object models</li> <li>\u2705 Test Framework Integration: JUnit 5 extensions and base classes</li> <li>\u2705 Monitoring: Metrics collection and health monitoring</li> <li>\u2705 Best Practices: Proven patterns for reliable automation</li> <li>\u2705 Troubleshooting: Common issues and solutions</li> </ul> <p>The AutoHeal Locator provides enterprise-grade reliability for Selenium test automation by adding AI-powered self-healing capabilities that automatically adapt to UI changes, reducing test maintenance overhead and improving overall test stability.</p> <p>For additional support and examples, refer to the main project documentation and example test suites included in the repository.</p>"},{"location":"user-guide/spring-boot-integration/","title":"Spring Boot Integration","text":""},{"location":"user-guide/spring-boot-integration/#overview","title":"Overview","text":"<p>AutoHeal provides seamless integration with Spring Boot applications, offering auto-configuration, dependency injection, and Spring Test support for easy setup and management.</p>"},{"location":"user-guide/spring-boot-integration/#quick-setup","title":"Quick Setup","text":""},{"location":"user-guide/spring-boot-integration/#1-dependencies","title":"1. Dependencies","text":"<p>AutoHeal includes optional Spring Boot support. Add to your <code>pom.xml</code>:</p> <pre><code>&lt;dependencies&gt;\n    &lt;!-- AutoHeal with Spring Boot support --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.example&lt;/groupId&gt;\n        &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Spring Boot Test --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Selenium --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n        &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n        &lt;version&gt;4.15.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#2-auto-configuration","title":"2. Auto-Configuration","text":"<p>AutoHeal automatically configures itself in Spring Boot applications:</p> <pre><code>@SpringBootTest\n@TestMethodOrder(OrderAnnotation.class)\npublic class AutoHealSpringBootTest {\n\n    @Autowired\n    private AutoHealLocator autoHeal;  // Automatically injected!\n\n    @Autowired\n    private WebDriver webDriver;       // Auto-configured WebDriver\n\n    @Test\n    @Order(1)\n    void testLoginWithAutoHeal() {\n        webDriver.get(\"https://example.com/login\");\n\n        // Use AutoHeal directly - fully configured via Spring\n        WebElement usernameField = autoHeal.findElement(\"#username\", \"username input field\");\n        usernameField.sendKeys(\"testuser\");\n\n        WebElement loginButton = autoHeal.findElement(\"Sign In\", \"login submit button\");\n        loginButton.click();\n\n        WebElement dashboard = autoHeal.findElement(\".dashboard\", \"user dashboard\");\n        assertTrue(dashboard.isDisplayed());\n    }\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#configuration-properties","title":"Configuration Properties","text":"<p>Configure AutoHeal through Spring Boot <code>application.properties</code>:</p>"},{"location":"user-guide/spring-boot-integration/#applicationproperties","title":"application.properties","text":"<pre><code># AutoHeal AI Configuration\nautoheal.ai.provider=OPENAI\nautoheal.ai.api-key=${OPENAI_API_KEY}\nautoheal.ai.model=gpt-4o-mini\nautoheal.ai.timeout=30s\nautoheal.ai.max-retries=3\nautoheal.ai.visual-analysis-enabled=true\n\n# AutoHeal Cache Configuration\nautoheal.cache.enabled=true\nautoheal.cache.max-size=5000\nautoheal.cache.expire-after-write=1h\nautoheal.cache.expire-after-access=30m\n\n# AutoHeal Performance Configuration\nautoheal.performance.thread-pool-size=4\nautoheal.performance.element-timeout=30s\nautoheal.performance.execution-strategy=HYBRID\n\n# AutoHeal Reporting Configuration\nautoheal.reporting.enabled=true\nautoheal.reporting.output-directory=./test-reports/autoheal\nautoheal.reporting.generate-html=true\nautoheal.reporting.generate-json=true\nautoheal.reporting.report-name-prefix=${spring.application.name:MyApp}_AutoHeal\n\n# WebDriver Configuration\nautoheal.webdriver.type=CHROME\nautoheal.webdriver.headless=false\nautoheal.webdriver.window-size=1920x1080\nautoheal.webdriver.implicit-wait=10s\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#application-testyml-yaml-format","title":"application-test.yml (YAML format)","text":"<pre><code>autoheal:\n  ai:\n    provider: OPENAI\n    api-key: ${OPENAI_API_KEY}\n    model: gpt-4o-mini\n    timeout: 30s\n    max-retries: 3\n    visual-analysis-enabled: true\n\n  cache:\n    enabled: true\n    max-size: 5000\n    expire-after-write: 1h\n\n  performance:\n    thread-pool-size: 4\n    execution-strategy: HYBRID\n\n  reporting:\n    enabled: true\n    output-directory: ./test-reports/autoheal\n    generate-html: true\n    report-name-prefix: ${spring.application.name}_AutoHeal\n\n  webdriver:\n    type: CHROME\n    headless: true  # Headless for CI/CD\n    window-size: 1920x1080\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#spring-boot-test-integration","title":"Spring Boot Test Integration","text":""},{"location":"user-guide/spring-boot-integration/#1-basic-spring-boot-test","title":"1. Basic Spring Boot Test","text":"<pre><code>@SpringBootTest\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class UserManagementTest {\n\n    @Autowired\n    private AutoHealLocator autoHeal;\n\n    @Autowired\n    private WebDriver webDriver;\n\n    @Value(\"${app.base-url:http://localhost:8080}\")\n    private String baseUrl;\n\n    @Test\n    void shouldCreateNewUser() {\n        webDriver.get(baseUrl + \"/admin/users\");\n\n        // Using AutoHeal with Spring Boot auto-configuration\n        WebElement createButton = autoHeal.findElement(\"Create User\", \"create new user button\");\n        createButton.click();\n\n        WebElement nameField = autoHeal.findElement(\"#user-name\", \"user name input field\");\n        nameField.sendKeys(\"John Doe\");\n\n        WebElement emailField = autoHeal.findElement(\"#user-email\", \"user email input field\");\n        emailField.sendKeys(\"john@example.com\");\n\n        WebElement saveButton = autoHeal.findElement(\"Save User\", \"save user button\");\n        saveButton.click();\n\n        // Verify user creation\n        WebElement successMessage = autoHeal.findElement(\".success-alert\", \"user creation success message\");\n        assertThat(successMessage.getText()).contains(\"User created successfully\");\n    }\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#2-page-object-with-spring-dependency-injection","title":"2. Page Object with Spring Dependency Injection","text":"<pre><code>@Component\npublic class LoginPage {\n\n    @Autowired\n    private AutoHealLocator autoHeal;\n\n    @Autowired\n    private WebDriver webDriver;\n\n    // Locator constants\n    private static final String USERNAME_FIELD = \"#username\";\n    private static final String PASSWORD_FIELD = \"#password\";\n    private static final String LOGIN_BUTTON = \"Sign In\";\n    private static final String ERROR_MESSAGE = \".error-message\";\n\n    // Descriptions\n    private static final String USERNAME_DESC = \"username input on login page\";\n    private static final String PASSWORD_DESC = \"password input on login page\";\n    private static final String LOGIN_BTN_DESC = \"login submit button\";\n    private static final String ERROR_DESC = \"login error message\";\n\n    public void navigate(String baseUrl) {\n        webDriver.get(baseUrl + \"/login\");\n    }\n\n    public void enterCredentials(String username, String password) {\n        WebElement usernameField = autoHeal.findElement(USERNAME_FIELD, USERNAME_DESC);\n        usernameField.clear();\n        usernameField.sendKeys(username);\n\n        WebElement passwordField = autoHeal.findElement(PASSWORD_FIELD, PASSWORD_DESC);\n        passwordField.clear();\n        passwordField.sendKeys(password);\n    }\n\n    public void clickLogin() {\n        WebElement loginButton = autoHeal.findElement(LOGIN_BUTTON, LOGIN_BTN_DESC);\n        loginButton.click();\n    }\n\n    public String getErrorMessage() {\n        try {\n            return autoHeal.findElement(ERROR_MESSAGE, ERROR_DESC).getText();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}\n\n// Using the Page Object in tests\n@SpringBootTest\npublic class LoginIntegrationTest {\n\n    @Autowired\n    private LoginPage loginPage;  // Spring-managed Page Object\n\n    @Value(\"${app.base-url}\")\n    private String baseUrl;\n\n    @Test\n    void shouldLoginSuccessfully() {\n        loginPage.navigate(baseUrl);\n        loginPage.enterCredentials(\"validuser\", \"validpass\");\n        loginPage.clickLogin();\n\n        // Verify login success\n        assertThat(webDriver.getCurrentUrl()).contains(\"/dashboard\");\n    }\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#3-test-configuration-class","title":"3. Test Configuration Class","text":"<pre><code>@TestConfiguration\n@EnableConfigurationProperties({AutoHealProperties.class, WebDriverProperties.class})\npublic class TestConfig {\n\n    @Bean\n    @Primary\n    public WebDriver testWebDriver(WebDriverProperties properties) {\n        ChromeOptions options = new ChromeOptions();\n\n        if (properties.isHeadless()) {\n            options.addArguments(\"--headless\");\n        }\n\n        options.addArguments(\"--window-size=\" + properties.getWindowSize());\n        options.addArguments(\"--no-sandbox\");\n        options.addArguments(\"--disable-dev-shm-usage\");\n\n        WebDriver driver = new ChromeDriver(options);\n        driver.manage().timeouts().implicitlyWait(properties.getImplicitWait());\n\n        return driver;\n    }\n\n    @Bean\n    public AutoHealLocator autoHealLocator(WebDriver webDriver, AutoHealProperties properties) {\n        AutoHealConfiguration config = AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(properties.getAi().getProvider())\n                .apiKey(properties.getAi().getApiKey())\n                .model(properties.getAi().getModel())\n                .timeout(properties.getAi().getTimeout())\n                .maxRetries(properties.getAi().getMaxRetries())\n                .visualAnalysisEnabled(properties.getAi().isVisualAnalysisEnabled())\n                .build())\n            .cache(CacheConfig.builder()\n                .enabled(properties.getCache().isEnabled())\n                .maxSize(properties.getCache().getMaxSize())\n                .expireAfterWrite(properties.getCache().getExpireAfterWrite())\n                .build())\n            .reporting(ReportingConfig.builder()\n                .enabled(properties.getReporting().isEnabled())\n                .outputDirectory(properties.getReporting().getOutputDirectory())\n                .generateHTML(properties.getReporting().isGenerateHtml())\n                .generateJSON(properties.getReporting().isGenerateJson())\n                .reportNamePrefix(properties.getReporting().getReportNamePrefix())\n                .build())\n            .build();\n\n        return AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(webDriver))\n            .withConfiguration(config)\n            .build();\n    }\n\n    @PreDestroy\n    public void cleanup() {\n        // Spring will handle AutoHeal shutdown automatically\n    }\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#profile-based-configuration","title":"Profile-Based Configuration","text":""},{"location":"user-guide/spring-boot-integration/#different-profiles-for-different-environments","title":"Different Profiles for Different Environments","text":""},{"location":"user-guide/spring-boot-integration/#application-devproperties","title":"application-dev.properties","text":"<pre><code># Development - Fast feedback\nautoheal.ai.model=gpt-4o-mini\nautoheal.ai.visual-analysis-enabled=false\nautoheal.webdriver.headless=false\nautoheal.performance.execution-strategy=DOM_ONLY\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#application-ciproperties","title":"application-ci.properties","text":"<pre><code># CI/CD - Reliable and fast\nautoheal.ai.model=gpt-4o-mini\nautoheal.ai.max-retries=2\nautoheal.webdriver.headless=true\nautoheal.performance.thread-pool-size=2\nautoheal.cache.enabled=true\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#application-prodproperties","title":"application-prod.properties","text":"<pre><code># Production Testing - Full accuracy\nautoheal.ai.model=gpt-4o\nautoheal.ai.visual-analysis-enabled=true\nautoheal.performance.execution-strategy=HYBRID\nautoheal.reporting.enabled=true\nautoheal.cache.enabled=true\nautoheal.cache.max-size=10000\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#spring-boot-actuator-integration","title":"Spring Boot Actuator Integration","text":"<p>Monitor AutoHeal health and metrics:</p>"},{"location":"user-guide/spring-boot-integration/#dependencies","title":"Dependencies","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#custom-health-indicator","title":"Custom Health Indicator","text":"<pre><code>@Component\npublic class AutoHealHealthIndicator implements HealthIndicator {\n\n    @Autowired\n    private AutoHealLocator autoHeal;\n\n    @Override\n    public Health health() {\n        try {\n            HealthStatus status = autoHeal.getHealthStatus();\n\n            return Health.up()\n                .withDetail(\"cacheHitRate\", status.getCacheHitRate())\n                .withDetail(\"aiServiceStatus\", status.getAiServiceStatus())\n                .withDetail(\"averageHealingTime\", status.getAverageHealingTime())\n                .withDetail(\"totalElementsHealed\", status.getTotalElementsHealed())\n                .build();\n\n        } catch (Exception e) {\n            return Health.down()\n                .withDetail(\"error\", e.getMessage())\n                .build();\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#metrics-endpoint","title":"Metrics Endpoint","text":"<pre><code>@RestController\n@RequestMapping(\"/api/autoheal\")\npublic class AutoHealMetricsController {\n\n    @Autowired\n    private AutoHealLocator autoHeal;\n\n    @GetMapping(\"/metrics\")\n    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; getMetrics() {\n        AutoHealMetrics metrics = autoHeal.getMetrics();\n\n        Map&lt;String, Object&gt; response = Map.of(\n            \"successRate\", metrics.getSuccessRate(),\n            \"cacheHitRate\", metrics.getCacheHitRate(),\n            \"avgHealingTime\", metrics.getAverageHealingTime(),\n            \"totalCost\", metrics.getTotalCost(),\n            \"savedCost\", metrics.getSavedCost()\n        );\n\n        return ResponseEntity.ok(response);\n    }\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#access-metrics","title":"Access Metrics","text":"<pre><code># Health check\ncurl http://localhost:8080/actuator/health/autoHeal\n\n# Custom metrics\ncurl http://localhost:8080/api/autoheal/metrics\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#integration-testing-with-testcontainers","title":"Integration Testing with TestContainers","text":""},{"location":"user-guide/spring-boot-integration/#full-integration-test-with-real-browser","title":"Full Integration Test with Real Browser","text":"<pre><code>@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@Testcontainers\npublic class FullIntegrationTest {\n\n    @Container\n    static BrowserWebDriverContainer&lt;?&gt; chrome = new BrowserWebDriverContainer&lt;&gt;()\n            .withCapabilities(new ChromeOptions());\n\n    @Autowired\n    private AutoHealLocator autoHeal;\n\n    @LocalServerPort\n    private int port;\n\n    private WebDriver driver;\n\n    @BeforeEach\n    void setUp() {\n        driver = chrome.getWebDriver();\n        // Configure AutoHeal with TestContainers WebDriver\n        autoHeal.reconfigure(new SeleniumWebAutomationAdapter(driver));\n    }\n\n    @Test\n    void shouldTestRealBrowserIntegration() {\n        driver.get(\"http://host.testcontainers.internal:\" + port + \"/\");\n\n        // Test with real browser in container\n        WebElement welcomeMessage = autoHeal.findElement(\"h1\", \"welcome message on homepage\");\n        assertThat(welcomeMessage.getText()).contains(\"Welcome\");\n    }\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/spring-boot-integration/#1-configuration-management","title":"1. Configuration Management","text":"<pre><code>// Use Spring profiles for different environments\n@Value(\"${autoheal.ai.api-key}\")\nprivate String apiKey;\n\n// Validate configuration at startup\n@EventListener(ApplicationReadyEvent.class)\npublic void validateConfiguration() {\n    if (StringUtils.isEmpty(apiKey)) {\n        throw new IllegalStateException(\"AutoHeal AI API key not configured\");\n    }\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#2-bean-lifecycle-management","title":"2. Bean Lifecycle Management","text":"<pre><code>@Component\npublic class AutoHealLifecycleManager {\n\n    @Autowired\n    private AutoHealLocator autoHeal;\n\n    @EventListener(ContextClosedEvent.class)\n    public void onShutdown() {\n        // Ensure reports are generated\n        autoHeal.shutdown();\n    }\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#3-test-slices","title":"3. Test Slices","text":"<pre><code>// Custom test slice for AutoHeal tests\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@SpringBootTest\n@Import(AutoHealTestConfiguration.class)\npublic @interface AutoHealTest {\n}\n\n// Usage\n@AutoHealTest\npublic class UserFlowTest {\n    // Test implementation\n}\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#spring-boot-devtools-integration","title":"Spring Boot DevTools Integration","text":"<p>Enable hot reloading during test development:</p> <pre><code># application-dev.properties\nspring.devtools.restart.enabled=true\nspring.devtools.restart.additional-paths=src/test/java\nautoheal.cache.enabled=false  # Disable cache during development\n</code></pre>"},{"location":"user-guide/spring-boot-integration/#next-steps","title":"Next Steps","text":"<ol> <li>Page Object Examples - Spring-managed Page Objects</li> <li>Reporting Guide - Spring Boot Actuator integration</li> <li>Performance Optimization - Production Spring Boot settings</li> </ol>"},{"location":"user-guide/examples/cucumber-examples/","title":"Cucumber Integration Examples","text":"<p>This guide demonstrates how to integrate AutoHeal with Cucumber for behavior-driven testing, combining natural language test scenarios with intelligent element location.</p>"},{"location":"user-guide/examples/cucumber-examples/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic Setup</li> <li>Feature Files</li> <li>Step Definitions</li> <li>Hooks and Configuration</li> <li>Data Tables</li> <li>Scenario Outlines</li> <li>Best Practices</li> </ul>"},{"location":"user-guide/examples/cucumber-examples/#basic-setup","title":"Basic Setup","text":""},{"location":"user-guide/examples/cucumber-examples/#dependencies","title":"Dependencies","text":"<pre><code>&lt;dependencies&gt;\n    &lt;!-- AutoHeal --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.autoheal&lt;/groupId&gt;\n        &lt;artifactId&gt;autoheal-locator&lt;/artifactId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Cucumber --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.cucumber&lt;/groupId&gt;\n        &lt;artifactId&gt;cucumber-java&lt;/artifactId&gt;\n        &lt;version&gt;7.15.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.cucumber&lt;/groupId&gt;\n        &lt;artifactId&gt;cucumber-junit-platform-engine&lt;/artifactId&gt;\n        &lt;version&gt;7.15.0&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- Selenium --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n        &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n        &lt;version&gt;4.15.0&lt;/version&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- JUnit 5 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.junit.platform&lt;/groupId&gt;\n        &lt;artifactId&gt;junit-platform-suite&lt;/artifactId&gt;\n        &lt;version&gt;1.10.0&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#test-runner","title":"Test Runner","text":"<pre><code>import org.junit.platform.suite.api.*;\n\n@Suite\n@IncludeEngines(\"cucumber\")\n@SelectClasspathResource(\"features\")\n@ConfigurationParameter(key = \"cucumber.plugin\", value = \"pretty,html:target/cucumber-reports,json:target/cucumber-reports/Cucumber.json\")\n@ConfigurationParameter(key = \"cucumber.glue\", value = \"com.yourcompany.stepdefinitions\")\n@ConfigurationParameter(key = \"cucumber.features\", value = \"src/test/resources/features\")\npublic class CucumberTestRunner {\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#feature-files","title":"Feature Files","text":""},{"location":"user-guide/examples/cucumber-examples/#login-feature","title":"Login Feature","text":"<pre><code>@login\nFeature: User Authentication\n  As a user\n  I want to log into the application\n  So that I can access my account\n\n  Background:\n    Given I am on the login page\n\n  @smoke @positive\n  Scenario: Successful login with valid credentials\n    When I enter username \"john.doe@example.com\"\n    And I enter password \"validpassword\"\n    And I click the login button\n    Then I should be logged in successfully\n    And I should see the welcome message \"Welcome, John\"\n\n  @negative\n  Scenario: Failed login with invalid credentials\n    When I enter username \"john.doe@example.com\"\n    And I enter password \"wrongpassword\"\n    And I click the login button\n    Then I should see an error message \"Invalid credentials\"\n    And I should remain on the login page\n\n  @negative\n  Scenario: Login with empty credentials\n    When I click the login button\n    Then I should see validation errors\n      | field    | message                |\n      | username | Username is required   |\n      | password | Password is required   |\n\n  @security\n  Scenario: Account lockout after multiple failed attempts\n    Given I have made 2 failed login attempts\n    When I enter username \"john.doe@example.com\"\n    And I enter password \"wrongpassword\"\n    And I click the login button\n    Then I should see an error message \"Account locked due to multiple failed attempts\"\n    And the login button should be disabled\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#e-commerce-feature","title":"E-commerce Feature","text":"<pre><code>@ecommerce\nFeature: Product Purchase Flow\n  As a customer\n  I want to purchase products\n  So that I can buy items I need\n\n  Background:\n    Given I am logged in as a customer\n    And I am on the products page\n\n  @smoke @positive\n  Scenario: Complete purchase flow\n    When I search for \"laptop\"\n    And I select the first product from search results\n    And I add the product to cart\n    And I go to checkout\n    And I fill in shipping information:\n      | field     | value           |\n      | firstName | John            |\n      | lastName  | Doe             |\n      | address   | 123 Main St     |\n      | city      | New York        |\n      | zipCode   | 10001           |\n    And I select payment method \"Credit Card\"\n    And I enter payment details:\n      | cardNumber | 4532015112830366 |\n      | expiryDate | 12/25            |\n      | cvv        | 123              |\n    And I place the order\n    Then I should see order confirmation\n    And I should receive an order number\n    And the order should appear in my order history\n\n  @negative\n  Scenario: Checkout with invalid payment information\n    Given I have items in my cart\n    When I go to checkout\n    And I fill in valid shipping information\n    And I enter invalid payment details:\n      | cardNumber | 1234567890123456 |\n      | expiryDate | 01/20            |\n      | cvv        | 999              |\n    And I place the order\n    Then I should see payment error \"Invalid card details\"\n    And I should remain on the checkout page\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#admin-dashboard-feature","title":"Admin Dashboard Feature","text":"<pre><code>@admin\nFeature: User Management\n  As an administrator\n  I want to manage user accounts\n  So that I can maintain system security\n\n  Background:\n    Given I am logged in as an administrator\n    And I am on the user management page\n\n  @crud\n  Scenario: Create a new user account\n    When I click the \"Add User\" button\n    And I fill in the user creation form:\n      | firstName | Jane               |\n      | lastName  | Smith              |\n      | email     | jane.smith@example.com |\n      | role      | User               |\n    And I save the user\n    Then I should see success message \"User created successfully\"\n    And the user \"jane.smith@example.com\" should appear in the users list\n    And the user should have role \"User\"\n\n  @crud\n  Scenario: Edit existing user details\n    Given a user \"john.doe@example.com\" exists\n    When I search for user \"john.doe@example.com\"\n    And I click the edit button for that user\n    And I update the user information:\n      | firstName | Jonathan    |\n      | role      | Admin       |\n    And I save the changes\n    Then I should see success message \"User updated successfully\"\n    And the user details should be updated in the system\n\n  @crud @confirmation\n  Scenario: Delete user with confirmation\n    Given a user \"test.user@example.com\" exists\n    When I search for user \"test.user@example.com\"\n    And I click the delete button for that user\n    And I confirm the deletion\n    Then I should see success message \"User deleted successfully\"\n    And the user \"test.user@example.com\" should not appear in the users list\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#step-definitions","title":"Step Definitions","text":""},{"location":"user-guide/examples/cucumber-examples/#login-step-definitions","title":"Login Step Definitions","text":"<pre><code>package com.yourcompany.stepdefinitions;\n\nimport com.autoheal.AutoHealLocator;\nimport com.yourcompany.pages.LoginPage;\nimport com.yourcompany.pages.HomePage;\nimport io.cucumber.java.en.*;\nimport io.cucumber.datatable.DataTable;\nimport org.openqa.selenium.WebDriver;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class LoginSteps {\n\n    private WebDriver driver;\n    private AutoHealLocator autoHeal;\n    private LoginPage loginPage;\n    private HomePage homePage;\n\n    // Constructor injection from hooks\n    public LoginSteps(TestContext context) {\n        this.driver = context.getDriver();\n        this.autoHeal = context.getAutoHeal();\n    }\n\n    @Given(\"I am on the login page\")\n    public void i_am_on_the_login_page() {\n        driver.get(\"https://example.com/login\");\n        loginPage = new LoginPage(driver, autoHeal);\n        assertTrue(loginPage.isLoaded(), \"Login page should be loaded\");\n    }\n\n    @When(\"I enter username {string}\")\n    public void i_enter_username(String username) {\n        loginPage.enterUsername(username);\n    }\n\n    @When(\"I enter password {string}\")\n    public void i_enter_password(String password) {\n        loginPage.enterPassword(password);\n    }\n\n    @When(\"I click the login button\")\n    public void i_click_the_login_button() {\n        loginPage.clickLoginButton();\n    }\n\n    @Then(\"I should be logged in successfully\")\n    public void i_should_be_logged_in_successfully() {\n        homePage = new HomePage(driver, autoHeal);\n        assertTrue(homePage.isLoaded(), \"Home page should be loaded after successful login\");\n    }\n\n    @Then(\"I should see the welcome message {string}\")\n    public void i_should_see_the_welcome_message(String expectedMessage) {\n        String actualMessage = homePage.getWelcomeMessage();\n        assertTrue(actualMessage.contains(expectedMessage),\n            \"Expected welcome message: \" + expectedMessage + \", but got: \" + actualMessage);\n    }\n\n    @Then(\"I should see an error message {string}\")\n    public void i_should_see_an_error_message(String expectedError) {\n        String actualError = loginPage.getErrorMessage();\n        assertEquals(expectedError, actualError, \"Error message mismatch\");\n    }\n\n    @Then(\"I should remain on the login page\")\n    public void i_should_remain_on_the_login_page() {\n        assertTrue(loginPage.isLoaded(), \"Should remain on login page after failed login\");\n    }\n\n    @Then(\"I should see validation errors\")\n    public void i_should_see_validation_errors(DataTable dataTable) {\n        List&lt;Map&lt;String, String&gt;&gt; validationErrors = dataTable.asMaps();\n\n        for (Map&lt;String, String&gt; error : validationErrors) {\n            String field = error.get(\"field\");\n            String expectedMessage = error.get(\"message\");\n\n            String actualMessage = loginPage.getFieldValidationError(field);\n            assertEquals(expectedMessage, actualMessage,\n                \"Validation error mismatch for field: \" + field);\n        }\n    }\n\n    @Given(\"I have made {int} failed login attempts\")\n    public void i_have_made_failed_login_attempts(int attempts) {\n        for (int i = 0; i &lt; attempts; i++) {\n            loginPage.enterUsername(\"john.doe@example.com\");\n            loginPage.enterPassword(\"wrongpassword\");\n            loginPage.clickLoginButton();\n            loginPage.waitForErrorMessage();\n        }\n    }\n\n    @Then(\"the login button should be disabled\")\n    public void the_login_button_should_be_disabled() {\n        assertFalse(loginPage.isLoginButtonEnabled(), \"Login button should be disabled after account lockout\");\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#e-commerce-step-definitions","title":"E-commerce Step Definitions","text":"<pre><code>package com.yourcompany.stepdefinitions;\n\nimport com.autoheal.AutoHealLocator;\nimport com.yourcompany.pages.*;\nimport io.cucumber.java.en.*;\nimport io.cucumber.datatable.DataTable;\nimport org.openqa.selenium.WebDriver;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class EcommerceSteps {\n\n    private WebDriver driver;\n    private AutoHealLocator autoHeal;\n    private ProductsPage productsPage;\n    private ProductDetailPage productDetailPage;\n    private CartPage cartPage;\n    private CheckoutPage checkoutPage;\n    private OrderConfirmationPage confirmationPage;\n\n    public EcommerceSteps(TestContext context) {\n        this.driver = context.getDriver();\n        this.autoHeal = context.getAutoHeal();\n    }\n\n    @Given(\"I am logged in as a customer\")\n    public void i_am_logged_in_as_a_customer() {\n        // Login with customer credentials\n        driver.get(\"https://example.com/login\");\n        LoginPage loginPage = new LoginPage(driver, autoHeal);\n        loginPage.loginWithCredentials(\"customer@example.com\", \"password123\");\n    }\n\n    @Given(\"I am on the products page\")\n    public void i_am_on_the_products_page() {\n        driver.get(\"https://example.com/products\");\n        productsPage = new ProductsPage(driver, autoHeal);\n        assertTrue(productsPage.isLoaded(), \"Products page should be loaded\");\n    }\n\n    @When(\"I search for {string}\")\n    public void i_search_for(String searchTerm) {\n        productsPage.searchForProduct(searchTerm);\n    }\n\n    @When(\"I select the first product from search results\")\n    public void i_select_the_first_product_from_search_results() {\n        productDetailPage = productsPage.clickFirstProduct();\n        assertTrue(productDetailPage.isLoaded(), \"Product detail page should be loaded\");\n    }\n\n    @When(\"I add the product to cart\")\n    public void i_add_the_product_to_cart() {\n        productDetailPage.addToCart();\n    }\n\n    @When(\"I go to checkout\")\n    public void i_go_to_checkout() {\n        cartPage = productDetailPage.goToCart();\n        checkoutPage = cartPage.proceedToCheckout();\n        assertTrue(checkoutPage.isLoaded(), \"Checkout page should be loaded\");\n    }\n\n    @When(\"I fill in shipping information:\")\n    public void i_fill_in_shipping_information(DataTable dataTable) {\n        Map&lt;String, String&gt; shippingInfo = dataTable.asMap();\n        checkoutPage.fillShippingInformation(shippingInfo);\n    }\n\n    @When(\"I select payment method {string}\")\n    public void i_select_payment_method(String paymentMethod) {\n        checkoutPage.selectPaymentMethod(paymentMethod);\n    }\n\n    @When(\"I enter payment details:\")\n    public void i_enter_payment_details(DataTable dataTable) {\n        Map&lt;String, String&gt; paymentDetails = dataTable.asMap();\n        checkoutPage.fillPaymentDetails(paymentDetails);\n    }\n\n    @When(\"I place the order\")\n    public void i_place_the_order() {\n        checkoutPage.placeOrder();\n    }\n\n    @Then(\"I should see order confirmation\")\n    public void i_should_see_order_confirmation() {\n        confirmationPage = new OrderConfirmationPage(driver, autoHeal);\n        assertTrue(confirmationPage.isLoaded(), \"Order confirmation page should be loaded\");\n    }\n\n    @Then(\"I should receive an order number\")\n    public void i_should_receive_an_order_number() {\n        String orderNumber = confirmationPage.getOrderNumber();\n        assertNotNull(orderNumber, \"Order number should be present\");\n        assertFalse(orderNumber.isEmpty(), \"Order number should not be empty\");\n    }\n\n    @Then(\"the order should appear in my order history\")\n    public void the_order_should_appear_in_my_order_history() {\n        String orderNumber = confirmationPage.getOrderNumber();\n        OrderHistoryPage orderHistoryPage = confirmationPage.goToOrderHistory();\n\n        assertTrue(orderHistoryPage.isOrderPresent(orderNumber),\n            \"Order \" + orderNumber + \" should appear in order history\");\n    }\n\n    @Given(\"I have items in my cart\")\n    public void i_have_items_in_my_cart() {\n        // Add a sample item to cart\n        i_am_on_the_products_page();\n        i_search_for(\"test product\");\n        i_select_the_first_product_from_search_results();\n        i_add_the_product_to_cart();\n    }\n\n    @When(\"I fill in valid shipping information\")\n    public void i_fill_in_valid_shipping_information() {\n        Map&lt;String, String&gt; validShippingInfo = Map.of(\n            \"firstName\", \"John\",\n            \"lastName\", \"Doe\",\n            \"address\", \"123 Main St\",\n            \"city\", \"New York\",\n            \"zipCode\", \"10001\"\n        );\n        checkoutPage.fillShippingInformation(validShippingInfo);\n    }\n\n    @When(\"I enter invalid payment details:\")\n    public void i_enter_invalid_payment_details(DataTable dataTable) {\n        Map&lt;String, String&gt; invalidPaymentDetails = dataTable.asMap();\n        checkoutPage.fillPaymentDetails(invalidPaymentDetails);\n    }\n\n    @Then(\"I should see payment error {string}\")\n    public void i_should_see_payment_error(String expectedError) {\n        String actualError = checkoutPage.getPaymentError();\n        assertEquals(expectedError, actualError, \"Payment error message mismatch\");\n    }\n\n    @Then(\"I should remain on the checkout page\")\n    public void i_should_remain_on_the_checkout_page() {\n        assertTrue(checkoutPage.isLoaded(), \"Should remain on checkout page after payment error\");\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#admin-step-definitions","title":"Admin Step Definitions","text":"<pre><code>package com.yourcompany.stepdefinitions;\n\nimport com.autoheal.AutoHealLocator;\nimport com.yourcompany.pages.UserManagementPage;\nimport com.yourcompany.pages.CreateUserPage;\nimport com.yourcompany.pages.EditUserPage;\nimport io.cucumber.java.en.*;\nimport io.cucumber.datatable.DataTable;\nimport org.openqa.selenium.WebDriver;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class AdminSteps {\n\n    private WebDriver driver;\n    private AutoHealLocator autoHeal;\n    private UserManagementPage userManagementPage;\n    private CreateUserPage createUserPage;\n    private EditUserPage editUserPage;\n\n    public AdminSteps(TestContext context) {\n        this.driver = context.getDriver();\n        this.autoHeal = context.getAutoHeal();\n    }\n\n    @Given(\"I am logged in as an administrator\")\n    public void i_am_logged_in_as_an_administrator() {\n        driver.get(\"https://example.com/login\");\n        LoginPage loginPage = new LoginPage(driver, autoHeal);\n        loginPage.loginWithCredentials(\"admin@example.com\", \"adminpassword\");\n    }\n\n    @Given(\"I am on the user management page\")\n    public void i_am_on_the_user_management_page() {\n        driver.get(\"https://example.com/admin/users\");\n        userManagementPage = new UserManagementPage(driver, autoHeal);\n        assertTrue(userManagementPage.isLoaded(), \"User management page should be loaded\");\n    }\n\n    @When(\"I click the {string} button\")\n    public void i_click_the_button(String buttonText) {\n        if (\"Add User\".equals(buttonText)) {\n            createUserPage = userManagementPage.clickAddUser();\n            assertTrue(createUserPage.isLoaded(), \"Create user page should be loaded\");\n        }\n    }\n\n    @When(\"I fill in the user creation form:\")\n    public void i_fill_in_the_user_creation_form(DataTable dataTable) {\n        Map&lt;String, String&gt; userDetails = dataTable.asMap();\n        createUserPage.fillUserForm(userDetails);\n    }\n\n    @When(\"I save the user\")\n    public void i_save_the_user() {\n        userManagementPage = createUserPage.saveUser();\n    }\n\n    @Then(\"I should see success message {string}\")\n    public void i_should_see_success_message(String expectedMessage) {\n        String actualMessage = userManagementPage.getSuccessMessage();\n        assertEquals(expectedMessage, actualMessage, \"Success message mismatch\");\n    }\n\n    @Then(\"the user {string} should appear in the users list\")\n    public void the_user_should_appear_in_the_users_list(String userEmail) {\n        assertTrue(userManagementPage.isUserPresent(userEmail),\n            \"User \" + userEmail + \" should appear in the users list\");\n    }\n\n    @Then(\"the user should have role {string}\")\n    public void the_user_should_have_role(String expectedRole) {\n        // This would need to be implemented to check user role in the table\n        String actualRole = userManagementPage.getUserRole(\"jane.smith@example.com\");\n        assertEquals(expectedRole, actualRole, \"User role mismatch\");\n    }\n\n    @Given(\"a user {string} exists\")\n    public void a_user_exists(String userEmail) {\n        // Create user if not exists, or verify user exists\n        if (!userManagementPage.isUserPresent(userEmail)) {\n            createTestUser(userEmail);\n        }\n    }\n\n    @When(\"I search for user {string}\")\n    public void i_search_for_user(String userEmail) {\n        userManagementPage.searchUser(userEmail);\n    }\n\n    @When(\"I click the edit button for that user\")\n    public void i_click_the_edit_button_for_that_user() {\n        editUserPage = userManagementPage.clickEditButton();\n        assertTrue(editUserPage.isLoaded(), \"Edit user page should be loaded\");\n    }\n\n    @When(\"I update the user information:\")\n    public void i_update_the_user_information(DataTable dataTable) {\n        Map&lt;String, String&gt; updatedInfo = dataTable.asMap();\n        editUserPage.updateUserInfo(updatedInfo);\n    }\n\n    @When(\"I save the changes\")\n    public void i_save_the_changes() {\n        userManagementPage = editUserPage.saveChanges();\n    }\n\n    @Then(\"the user details should be updated in the system\")\n    public void the_user_details_should_be_updated_in_the_system() {\n        // Verify the changes are reflected in the user list\n        String updatedName = userManagementPage.getUserName(\"john.doe@example.com\");\n        assertEquals(\"Jonathan\", updatedName, \"User name should be updated\");\n    }\n\n    @When(\"I click the delete button for that user\")\n    public void i_click_the_delete_button_for_that_user() {\n        userManagementPage.clickDeleteButton();\n    }\n\n    @When(\"I confirm the deletion\")\n    public void i_confirm_the_deletion() {\n        userManagementPage.confirmDeletion();\n    }\n\n    @Then(\"the user {string} should not appear in the users list\")\n    public void the_user_should_not_appear_in_the_users_list(String userEmail) {\n        assertFalse(userManagementPage.isUserPresent(userEmail),\n            \"User \" + userEmail + \" should not appear in the users list after deletion\");\n    }\n\n    // Helper method to create test user\n    private void createTestUser(String email) {\n        CreateUserPage createPage = userManagementPage.clickAddUser();\n        Map&lt;String, String&gt; testUser = Map.of(\n            \"firstName\", \"Test\",\n            \"lastName\", \"User\",\n            \"email\", email,\n            \"role\", \"User\"\n        );\n        createPage.fillUserForm(testUser);\n        createPage.saveUser();\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#hooks-and-configuration","title":"Hooks and Configuration","text":""},{"location":"user-guide/examples/cucumber-examples/#test-context","title":"Test Context","text":"<pre><code>package com.yourcompany.context;\n\nimport com.autoheal.AutoHealLocator;\nimport com.autoheal.config.AutoHealConfiguration;\nimport com.autoheal.config.AIConfig;\nimport com.autoheal.config.ReportingConfig;\nimport com.autoheal.impl.adapter.SeleniumWebAutomationAdapter;\nimport com.autoheal.model.AIProvider;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\n\npublic class TestContext {\n    private WebDriver driver;\n    private AutoHealLocator autoHeal;\n    private String scenarioName;\n\n    public void initialize(String scenarioName) {\n        this.scenarioName = scenarioName;\n        setupWebDriver();\n        setupAutoHeal();\n    }\n\n    private void setupWebDriver() {\n        ChromeOptions options = new ChromeOptions();\n\n        // Configure based on environment\n        if (\"true\".equals(System.getProperty(\"headless\"))) {\n            options.addArguments(\"--headless\");\n        }\n\n        options.addArguments(\"--disable-web-security\");\n        options.addArguments(\"--no-sandbox\");\n        options.addArguments(\"--disable-dev-shm-usage\");\n\n        driver = new ChromeDriver(options);\n        driver.manage().window().maximize();\n    }\n\n    private void setupAutoHeal() {\n        AutoHealConfiguration config = AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n                .build())\n            .reporting(ReportingConfig.builder()\n                .enabled(true)\n                .generateHTML(true)\n                .generateJSON(true)\n                .consoleLogging(true)\n                .reportNamePrefix(\"Cucumber_\" + scenarioName.replaceAll(\" \", \"_\"))\n                .build())\n            .build();\n\n        autoHeal = AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(config)\n            .build();\n    }\n\n    public void cleanup() {\n        if (autoHeal != null) {\n            autoHeal.shutdown(); // Generate AutoHeal reports\n        }\n        if (driver != null) {\n            driver.quit();\n        }\n    }\n\n    // Getters\n    public WebDriver getDriver() { return driver; }\n    public AutoHealLocator getAutoHeal() { return autoHeal; }\n    public String getScenarioName() { return scenarioName; }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#cucumber-hooks","title":"Cucumber Hooks","text":"<pre><code>package com.yourcompany.hooks;\n\nimport com.yourcompany.context.TestContext;\nimport io.cucumber.java.After;\nimport io.cucumber.java.Before;\nimport io.cucumber.java.Scenario;\nimport org.openqa.selenium.OutputType;\nimport org.openqa.selenium.TakesScreenshot;\n\npublic class CucumberHooks {\n    private TestContext testContext;\n\n    public CucumberHooks(TestContext testContext) {\n        this.testContext = testContext;\n    }\n\n    @Before\n    public void setUp(Scenario scenario) {\n        System.out.println(\"Starting scenario: \" + scenario.getName());\n        testContext.initialize(scenario.getName());\n    }\n\n    @After\n    public void tearDown(Scenario scenario) {\n        // Take screenshot if scenario failed\n        if (scenario.isFailed() &amp;&amp; testContext.getDriver() != null) {\n            try {\n                byte[] screenshot = ((TakesScreenshot) testContext.getDriver())\n                    .getScreenshotAs(OutputType.BYTES);\n                scenario.attach(screenshot, \"image/png\", \"Screenshot\");\n            } catch (Exception e) {\n                System.err.println(\"Failed to capture screenshot: \" + e.getMessage());\n            }\n        }\n\n        // Log scenario completion\n        String status = scenario.isFailed() ? \"FAILED\" : \"PASSED\";\n        System.out.println(\"Scenario \" + scenario.getName() + \" \" + status);\n\n        // Cleanup resources\n        testContext.cleanup();\n    }\n\n    @Before(\"@smoke\")\n    public void beforeSmokeTest() {\n        System.out.println(\"Running smoke test - ensuring critical functionality\");\n    }\n\n    @Before(\"@admin\")\n    public void beforeAdminTest() {\n        System.out.println(\"Running admin test - additional security checks may apply\");\n    }\n\n    @After(\"@report\")\n    public void afterReportTest(Scenario scenario) {\n        // Generate additional reports for scenarios tagged with @report\n        System.out.println(\"Generating detailed report for: \" + scenario.getName());\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#configuration-properties","title":"Configuration Properties","text":"<pre><code>package com.yourcompany.config;\n\npublic class TestConfig {\n    public static final String BASE_URL = System.getProperty(\"base.url\", \"https://example.com\");\n    public static final String BROWSER = System.getProperty(\"browser\", \"chrome\");\n    public static final boolean HEADLESS = Boolean.parseBoolean(System.getProperty(\"headless\", \"false\"));\n    public static final int IMPLICIT_WAIT = Integer.parseInt(System.getProperty(\"implicit.wait\", \"10\"));\n\n    // AI Configuration\n    public static final String AI_PROVIDER = System.getProperty(\"ai.provider\", \"OPENAI\");\n    public static final String OPENAI_API_KEY = System.getenv(\"OPENAI_API_KEY\");\n\n    // Environment-specific configurations\n    public static String getLoginUrl() {\n        return BASE_URL + \"/login\";\n    }\n\n    public static String getProductsUrl() {\n        return BASE_URL + \"/products\";\n    }\n\n    public static String getAdminUrl() {\n        return BASE_URL + \"/admin\";\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#data-tables","title":"Data Tables","text":""},{"location":"user-guide/examples/cucumber-examples/#using-data-tables-effectively","title":"Using Data Tables Effectively","text":"<pre><code>Feature: User Registration with Data Tables\n\n  @registration\n  Scenario: Register multiple users with different roles\n    Given I am on the registration page\n    When I create users with the following details:\n      | firstName | lastName | email              | role  | department |\n      | John      | Doe      | john@example.com   | Admin | IT         |\n      | Jane      | Smith    | jane@example.com   | User  | Sales      |\n      | Bob       | Johnson  | bob@example.com    | User  | Marketing  |\n    Then all users should be created successfully\n    And each user should have the correct role assigned\n\n  @validation\n  Scenario: Form validation with multiple field errors\n    Given I am on the registration page\n    When I submit the form with invalid data:\n      | field     | value          | expectedError              |\n      | email     | invalid-email  | Please enter a valid email |\n      | password  | 123            | Password too short         |\n      | phone     | abc123         | Invalid phone number       |\n      | age       | 150            | Age must be realistic      |\n    Then I should see all validation errors displayed\n    And the form should not be submitted\n</code></pre> <pre><code>// Step definition for data tables\n@When(\"I create users with the following details:\")\npublic void i_create_users_with_the_following_details(DataTable dataTable) {\n    List&lt;Map&lt;String, String&gt;&gt; users = dataTable.asMaps();\n\n    for (Map&lt;String, String&gt; user : users) {\n        // Navigate to add user page\n        CreateUserPage createUserPage = userManagementPage.clickAddUser();\n\n        // Fill form with user data\n        createUserPage.fillUserForm(user);\n\n        // Save user\n        userManagementPage = createUserPage.saveUser();\n\n        // Verify success message\n        assertTrue(userManagementPage.getSuccessMessage().contains(\"created successfully\"));\n    }\n}\n\n@When(\"I submit the form with invalid data:\")\npublic void i_submit_the_form_with_invalid_data(DataTable dataTable) {\n    List&lt;Map&lt;String, String&gt;&gt; validationTests = dataTable.asMaps();\n\n    for (Map&lt;String, String&gt; test : validationTests) {\n        String field = test.get(\"field\");\n        String value = test.get(\"value\");\n        String expectedError = test.get(\"expectedError\");\n\n        // Clear form and enter invalid value\n        registrationPage.clearForm();\n        registrationPage.enterFieldValue(field, value);\n        registrationPage.submitForm();\n\n        // Verify error message\n        String actualError = registrationPage.getFieldError(field);\n        assertEquals(expectedError, actualError,\n            \"Validation error mismatch for field: \" + field);\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#scenario-outlines","title":"Scenario Outlines","text":""},{"location":"user-guide/examples/cucumber-examples/#parameterized-testing","title":"Parameterized Testing","text":"<pre><code>Feature: Login with Multiple Credentials\n\n  @parameterized\n  Scenario Outline: Login attempts with different credentials\n    Given I am on the login page\n    When I enter username \"&lt;username&gt;\"\n    And I enter password \"&lt;password&gt;\"\n    And I click the login button\n    Then I should see the result \"&lt;result&gt;\"\n    And the page should be \"&lt;expectedPage&gt;\"\n\n    Examples:\n      | username           | password      | result                    | expectedPage |\n      | admin@example.com  | validpass     | Welcome, Admin           | home         |\n      | user@example.com   | validpass     | Welcome, User            | home         |\n      | admin@example.com  | wrongpass     | Invalid credentials      | login        |\n      | invalid@email      | validpass     | Invalid email format     | login        |\n      |                    | validpass     | Username is required     | login        |\n      | user@example.com   |               | Password is required     | login        |\n\n  @boundary\n  Scenario Outline: Password strength validation\n    Given I am on the registration page\n    When I enter password \"&lt;password&gt;\"\n    Then the password strength should be \"&lt;strength&gt;\"\n    And the registration button should be \"&lt;buttonState&gt;\"\n\n    Examples:\n      | password           | strength | buttonState |\n      | 123                | Weak     | disabled    |\n      | password123        | Fair     | disabled    |\n      | Password123        | Good     | enabled     |\n      | Password123!       | Strong   | enabled     |\n      | P@ssw0rd123!       | Strong   | enabled     |\n\n  @ecommerce\n  Scenario Outline: Product search with different terms\n    Given I am on the products page\n    When I search for \"&lt;searchTerm&gt;\"\n    Then I should see \"&lt;resultCount&gt;\" products\n    And the first product should contain \"&lt;expectedText&gt;\"\n\n    Examples:\n      | searchTerm | resultCount | expectedText |\n      | laptop     | 5           | Laptop       |\n      | phone      | 8           | Phone        |\n      | tablet     | 3           | Tablet       |\n      | mouse      | 12          | Mouse        |\n      | keyboard   | 6           | Keyboard     |\n</code></pre> <pre><code>// Step definitions for scenario outlines\n@Then(\"I should see the result {string}\")\npublic void i_should_see_the_result(String expectedResult) {\n    if (expectedResult.startsWith(\"Welcome\")) {\n        // Success case\n        HomePage homePage = new HomePage(driver, autoHeal);\n        String welcomeMessage = homePage.getWelcomeMessage();\n        assertTrue(welcomeMessage.contains(expectedResult.substring(0, 7)),\n            \"Welcome message should contain: \" + expectedResult);\n    } else {\n        // Error case\n        String actualError = loginPage.getErrorMessage();\n        assertEquals(expectedResult, actualError, \"Error message mismatch\");\n    }\n}\n\n@Then(\"the page should be {string}\")\npublic void the_page_should_be(String expectedPage) {\n    if (\"home\".equals(expectedPage)) {\n        HomePage homePage = new HomePage(driver, autoHeal);\n        assertTrue(homePage.isLoaded(), \"Should be on home page\");\n    } else if (\"login\".equals(expectedPage)) {\n        assertTrue(loginPage.isLoaded(), \"Should remain on login page\");\n    }\n}\n\n@Then(\"the password strength should be {string}\")\npublic void the_password_strength_should_be(String expectedStrength) {\n    String actualStrength = registrationPage.getPasswordStrength();\n    assertEquals(expectedStrength, actualStrength, \"Password strength mismatch\");\n}\n\n@Then(\"the registration button should be {string}\")\npublic void the_registration_button_should_be(String expectedState) {\n    boolean isEnabled = registrationPage.isRegistrationButtonEnabled();\n\n    if (\"enabled\".equals(expectedState)) {\n        assertTrue(isEnabled, \"Registration button should be enabled\");\n    } else if (\"disabled\".equals(expectedState)) {\n        assertFalse(isEnabled, \"Registration button should be disabled\");\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/examples/cucumber-examples/#1-feature-organization","title":"1. Feature Organization","text":"<pre><code>src/test/resources/features/\n\u251c\u2500\u2500 authentication/\n\u2502   \u251c\u2500\u2500 login.feature\n\u2502   \u251c\u2500\u2500 logout.feature\n\u2502   \u2514\u2500\u2500 password-reset.feature\n\u251c\u2500\u2500 user-management/\n\u2502   \u251c\u2500\u2500 create-user.feature\n\u2502   \u251c\u2500\u2500 edit-user.feature\n\u2502   \u2514\u2500\u2500 delete-user.feature\n\u251c\u2500\u2500 ecommerce/\n\u2502   \u251c\u2500\u2500 product-search.feature\n\u2502   \u251c\u2500\u2500 shopping-cart.feature\n\u2502   \u2514\u2500\u2500 checkout.feature\n\u2514\u2500\u2500 admin/\n    \u251c\u2500\u2500 dashboard.feature\n    \u2514\u2500\u2500 reports.feature\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#2-meaningful-tags","title":"2. Meaningful Tags","text":"<pre><code>@smoke @login @positive\nScenario: Successful login\n\n@regression @user-management @negative\nScenario: Create user with duplicate email\n\n@integration @ecommerce @payment\nScenario: Complete purchase flow\n\n@security @admin @authorization\nScenario: Access control validation\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#3-step-definition-organization","title":"3. Step Definition Organization","text":"<pre><code>// Organize by domain, not by page\npackage com.yourcompany.stepdefinitions;\n\n// AuthenticationSteps.java - handles all auth-related steps\n// UserManagementSteps.java - handles user CRUD operations\n// EcommerceSteps.java - handles shopping and purchasing\n// CommonSteps.java - handles shared/generic steps\n\npublic class CommonSteps {\n    @Given(\"I wait for {int} seconds\")\n    public void i_wait_for_seconds(int seconds) {\n        try { Thread.sleep(seconds * 1000); }\n        catch (InterruptedException e) { /* handle */ }\n    }\n\n    @Then(\"the page title should contain {string}\")\n    public void the_page_title_should_contain(String expectedTitle) {\n        assertTrue(driver.getTitle().contains(expectedTitle));\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#4-error-handling-in-steps","title":"4. Error Handling in Steps","text":"<pre><code>@When(\"I perform an action that might fail\")\npublic void i_perform_an_action_that_might_fail() {\n    try {\n        // Primary action with AutoHeal\n        WebElement element = autoHeal.findElement(\".dynamic-selector\", \"target element\");\n        element.click();\n    } catch (Exception e) {\n        // Log the failure for debugging\n        System.err.println(\"Primary action failed: \" + e.getMessage());\n\n        // Try fallback approach\n        WebElement fallbackElement = autoHeal.findElement(\"#fallback-selector\", \"fallback element\");\n        fallbackElement.click();\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#5-reporting-integration","title":"5. Reporting Integration","text":"<pre><code>// Enhanced hooks with AutoHeal reporting\n@After\npublic void tearDown(Scenario scenario) {\n    // Capture AutoHeal metrics\n    if (testContext.getAutoHeal() != null) {\n        AutoHealMetrics metrics = testContext.getAutoHeal().getMetrics();\n\n        // Attach metrics to Cucumber report\n        scenario.attach(\n            metrics.toJson().getBytes(),\n            \"application/json\",\n            \"AutoHeal Metrics\"\n        );\n\n        // Log healing activities\n        if (metrics.getHealingCount() &gt; 0) {\n            scenario.log(\"AutoHeal performed \" + metrics.getHealingCount() + \" healing operations\");\n        }\n    }\n\n    // Generate reports\n    testContext.cleanup();\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#6-environment-configuration","title":"6. Environment Configuration","text":"<pre><code># Run specific environments\n@dev\nScenario: Development environment test\n\n@staging\nScenario: Staging environment test\n\n@prod\nScenario: Production environment test\n</code></pre> <pre><code>// Environment-specific configuration\n@Before\npublic void configureEnvironment(Scenario scenario) {\n    String environment = System.getProperty(\"test.env\", \"dev\");\n\n    switch (environment) {\n        case \"dev\":\n            TestConfig.setBaseUrl(\"https://dev.example.com\");\n            break;\n        case \"staging\":\n            TestConfig.setBaseUrl(\"https://staging.example.com\");\n            break;\n        case \"prod\":\n            TestConfig.setBaseUrl(\"https://example.com\");\n            break;\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/cucumber-examples/#7-parallel-execution","title":"7. Parallel Execution","text":"<pre><code>&lt;!-- Maven Surefire Plugin Configuration --&gt;\n&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n    &lt;version&gt;3.0.0-M9&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;parallel&gt;methods&lt;/parallel&gt;\n        &lt;threadCount&gt;3&lt;/threadCount&gt;\n        &lt;properties&gt;\n            &lt;configurationParameters&gt;\n                cucumber.execution.parallel.enabled=true\n                cucumber.execution.parallel.config.strategy=dynamic\n            &lt;/configurationParameters&gt;\n        &lt;/properties&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> <p>This comprehensive Cucumber integration guide demonstrates how AutoHeal enhances BDD testing by providing reliable element location even when application selectors change, ensuring your behavior-driven tests remain stable and maintainable.</p>"},{"location":"user-guide/examples/page-object-examples/","title":"Page Object Model Examples","text":"<p>This guide demonstrates how to implement the Page Object Model (POM) pattern with AutoHeal for maintainable and robust test automation.</p>"},{"location":"user-guide/examples/page-object-examples/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic Page Object Setup</li> <li>Advanced Page Object Features</li> <li>Page Factory Integration</li> <li>Component-Based Architecture</li> <li>Data-Driven Testing</li> <li>Best Practices</li> </ul>"},{"location":"user-guide/examples/page-object-examples/#basic-page-object-setup","title":"Basic Page Object Setup","text":""},{"location":"user-guide/examples/page-object-examples/#base-page-class","title":"Base Page Class","text":"<pre><code>import com.autoheal.AutoHealLocator;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\npublic abstract class BasePage {\n    protected WebDriver driver;\n    protected AutoHealLocator autoHeal;\n    protected WebDriverWait wait;\n\n    public BasePage(WebDriver driver, AutoHealLocator autoHeal) {\n        this.driver = driver;\n        this.autoHeal = autoHeal;\n        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    }\n\n    // Common utility methods\n    protected WebElement findElement(String selector, String description) {\n        return autoHeal.findElement(selector, description);\n    }\n\n    protected List&lt;WebElement&gt; findElements(String selector, String description) {\n        return autoHeal.findElementsAsync(selector, description).join();\n    }\n\n    protected void waitForPageToLoad() {\n        wait.until(webDriver -&gt; ((JavascriptExecutor) webDriver)\n            .executeScript(\"return document.readyState\").equals(\"complete\"));\n    }\n\n    protected void scrollToElement(WebElement element) {\n        ((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", element);\n    }\n\n    // Abstract method to verify page loaded correctly\n    public abstract boolean isLoaded();\n\n    // Abstract method to get page URL pattern\n    public abstract String getExpectedUrlPattern();\n\n    // Verify we're on the correct page\n    public void verifyPageLoaded() {\n        assertTrue(\"Page not loaded correctly\", isLoaded());\n        if (getExpectedUrlPattern() != null) {\n            assertTrue(\"Wrong URL: \" + driver.getCurrentUrl(),\n                driver.getCurrentUrl().matches(getExpectedUrlPattern()));\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#login-page-example","title":"Login Page Example","text":"<pre><code>public class LoginPage extends BasePage {\n\n    public LoginPage(WebDriver driver, AutoHealLocator autoHeal) {\n        super(driver, autoHeal);\n    }\n\n    // Page elements with AutoHeal\n    private WebElement getUsernameField() {\n        return findElement(\"#username\", \"username input field on login page\");\n    }\n\n    private WebElement getPasswordField() {\n        return findElement(\"#password\", \"password input field on login page\");\n    }\n\n    private WebElement getLoginButton() {\n        return findElement(\"//button[@type='submit']\", \"login submit button\");\n    }\n\n    private WebElement getRememberMeCheckbox() {\n        return findElement(\"#remember-me\", \"remember me checkbox\");\n    }\n\n    private WebElement getForgotPasswordLink() {\n        return findElement(\"Forgot Password?\", \"forgot password link\");\n    }\n\n    private WebElement getErrorMessage() {\n        return findElement(\".error-message\", \"login error message\");\n    }\n\n    // Page actions\n    public LoginPage enterUsername(String username) {\n        WebElement usernameField = getUsernameField();\n        usernameField.clear();\n        usernameField.sendKeys(username);\n        return this;\n    }\n\n    public LoginPage enterPassword(String password) {\n        WebElement passwordField = getPasswordField();\n        passwordField.clear();\n        passwordField.sendKeys(password);\n        return this;\n    }\n\n    public LoginPage toggleRememberMe() {\n        getRememberMeCheckbox().click();\n        return this;\n    }\n\n    public HomePage loginWithValidCredentials(String username, String password) {\n        enterUsername(username);\n        enterPassword(password);\n        getLoginButton().click();\n        return new HomePage(driver, autoHeal);\n    }\n\n    public LoginPage loginWithInvalidCredentials(String username, String password) {\n        enterUsername(username);\n        enterPassword(password);\n        getLoginButton().click();\n        // Wait for error message to appear\n        wait.until(ExpectedConditions.visibilityOf(getErrorMessage()));\n        return this;\n    }\n\n    public ForgotPasswordPage clickForgotPassword() {\n        getForgotPasswordLink().click();\n        return new ForgotPasswordPage(driver, autoHeal);\n    }\n\n    // Validations\n    public boolean isLoginErrorDisplayed() {\n        try {\n            return getErrorMessage().isDisplayed();\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public String getLoginError() {\n        return isLoginErrorDisplayed() ? getErrorMessage().getText() : null;\n    }\n\n    public boolean isRememberMeChecked() {\n        return getRememberMeCheckbox().isSelected();\n    }\n\n    // BasePage implementations\n    @Override\n    public boolean isLoaded() {\n        try {\n            return getUsernameField().isDisplayed() &amp;&amp;\n                   getPasswordField().isDisplayed() &amp;&amp;\n                   getLoginButton().isDisplayed();\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public String getExpectedUrlPattern() {\n        return \".*/(login|signin).*\";\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#home-page-example","title":"Home Page Example","text":"<pre><code>public class HomePage extends BasePage {\n\n    public HomePage(WebDriver driver, AutoHealLocator autoHeal) {\n        super(driver, autoHeal);\n    }\n\n    // Header elements\n    private WebElement getUserProfileDropdown() {\n        return findElement(\".user-profile-dropdown\", \"user profile dropdown in header\");\n    }\n\n    private WebElement getLogoutLink() {\n        return findElement(\"//a[text()='Logout']\", \"logout link in profile dropdown\");\n    }\n\n    private WebElement getWelcomeMessage() {\n        return findElement(\".welcome-message\", \"welcome message on homepage\");\n    }\n\n    // Navigation elements\n    private WebElement getDashboardLink() {\n        return findElement(\"Dashboard\", \"dashboard navigation link\");\n    }\n\n    private WebElement getProductsLink() {\n        return findElement(\"Products\", \"products navigation link\");\n    }\n\n    private WebElement getOrdersLink() {\n        return findElement(\"Orders\", \"orders navigation link\");\n    }\n\n    private WebElement getSettingsLink() {\n        return findElement(\"Settings\", \"settings navigation link\");\n    }\n\n    // Main content elements\n    private List&lt;WebElement&gt; getDashboardWidgets() {\n        return findElements(\".dashboard-widget\", \"dashboard widgets on homepage\");\n    }\n\n    private WebElement getQuickActionsPanel() {\n        return findElement(\"#quick-actions\", \"quick actions panel\");\n    }\n\n    // Actions\n    public String getWelcomeText() {\n        return getWelcomeMessage().getText();\n    }\n\n    public LoginPage logout() {\n        getUserProfileDropdown().click();\n        wait.until(ExpectedConditions.elementToBeClickable(getLogoutLink()));\n        getLogoutLink().click();\n        return new LoginPage(driver, autoHeal);\n    }\n\n    public DashboardPage navigateToDashboard() {\n        getDashboardLink().click();\n        return new DashboardPage(driver, autoHeal);\n    }\n\n    public ProductsPage navigateToProducts() {\n        getProductsLink().click();\n        return new ProductsPage(driver, autoHeal);\n    }\n\n    public OrdersPage navigateToOrders() {\n        getOrdersLink().click();\n        return new OrdersPage(driver, autoHeal);\n    }\n\n    public SettingsPage navigateToSettings() {\n        getSettingsLink().click();\n        return new SettingsPage(driver, autoHeal);\n    }\n\n    public int getWidgetCount() {\n        return getDashboardWidgets().size();\n    }\n\n    public List&lt;String&gt; getWidgetTitles() {\n        return getDashboardWidgets().stream()\n            .map(widget -&gt; {\n                try {\n                    return widget.findElement(By.className(\"widget-title\")).getText();\n                } catch (Exception e) {\n                    return \"Unknown\";\n                }\n            })\n            .collect(Collectors.toList());\n    }\n\n    // Quick actions\n    public CreateOrderPage clickCreateOrder() {\n        WebElement createOrderButton = findElement(\n            \"#quick-actions .create-order-btn\",\n            \"create order button in quick actions\"\n        );\n        createOrderButton.click();\n        return new CreateOrderPage(driver, autoHeal);\n    }\n\n    public AddProductPage clickAddProduct() {\n        WebElement addProductButton = findElement(\n            \"#quick-actions .add-product-btn\",\n            \"add product button in quick actions\"\n        );\n        addProductButton.click();\n        return new AddProductPage(driver, autoHeal);\n    }\n\n    // BasePage implementations\n    @Override\n    public boolean isLoaded() {\n        try {\n            return getWelcomeMessage().isDisplayed() &amp;&amp;\n                   getDashboardLink().isDisplayed() &amp;&amp;\n                   getUserProfileDropdown().isDisplayed();\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public String getExpectedUrlPattern() {\n        return \".*/home.*|.*/dashboard.*\";\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#advanced-page-object-features","title":"Advanced Page Object Features","text":""},{"location":"user-guide/examples/page-object-examples/#form-page-with-validation","title":"Form Page with Validation","text":"<pre><code>public class RegistrationPage extends BasePage {\n\n    public RegistrationPage(WebDriver driver, AutoHealLocator autoHeal) {\n        super(driver, autoHeal);\n    }\n\n    // Form field elements\n    private WebElement getFirstNameField() {\n        return findElement(\"#firstName\", \"first name input field\");\n    }\n\n    private WebElement getLastNameField() {\n        return findElement(\"#lastName\", \"last name input field\");\n    }\n\n    private WebElement getEmailField() {\n        return findElement(\"//input[@type='email']\", \"email address input field\");\n    }\n\n    private WebElement getPhoneField() {\n        return findElement(\"input[name='phone']\", \"phone number input field\");\n    }\n\n    private WebElement getPasswordField() {\n        return findElement(\"#password\", \"password input field\");\n    }\n\n    private WebElement getConfirmPasswordField() {\n        return findElement(\"#confirmPassword\", \"confirm password input field\");\n    }\n\n    // Dropdown elements\n    private WebElement getCountryDropdown() {\n        return findElement(\"select[name='country']\", \"country selection dropdown\");\n    }\n\n    private WebElement getGenderDropdown() {\n        return findElement(\"#gender\", \"gender selection dropdown\");\n    }\n\n    // Checkbox elements\n    private WebElement getTermsCheckbox() {\n        return findElement(\"#terms\", \"terms and conditions checkbox\");\n    }\n\n    private WebElement getNewsletterCheckbox() {\n        return findElement(\"#newsletter\", \"newsletter subscription checkbox\");\n    }\n\n    // Button elements\n    private WebElement getRegisterButton() {\n        return findElement(\"//button[@type='submit']\", \"register button\");\n    }\n\n    private WebElement getClearButton() {\n        return findElement(\"Clear Form\", \"clear form button\");\n    }\n\n    // Validation elements\n    private WebElement getFieldError(String fieldName) {\n        return findElement(\n            String.format(\".field-error[data-field='%s']\", fieldName),\n            String.format(\"%s field validation error\", fieldName)\n        );\n    }\n\n    private WebElement getPasswordStrengthIndicator() {\n        return findElement(\".password-strength\", \"password strength indicator\");\n    }\n\n    // Form filling methods\n    public RegistrationPage fillPersonalInfo(String firstName, String lastName, String email, String phone) {\n        getFirstNameField().sendKeys(firstName);\n        getLastNameField().sendKeys(lastName);\n        getEmailField().sendKeys(email);\n        getPhoneField().sendKeys(phone);\n        return this;\n    }\n\n    public RegistrationPage fillPassword(String password, String confirmPassword) {\n        getPasswordField().sendKeys(password);\n        getConfirmPasswordField().sendKeys(confirmPassword);\n        return this;\n    }\n\n    public RegistrationPage selectCountry(String country) {\n        Select countrySelect = new Select(getCountryDropdown());\n        countrySelect.selectByVisibleText(country);\n        return this;\n    }\n\n    public RegistrationPage selectGender(String gender) {\n        Select genderSelect = new Select(getGenderDropdown());\n        genderSelect.selectByValue(gender.toLowerCase());\n        return this;\n    }\n\n    public RegistrationPage acceptTerms() {\n        WebElement termsCheckbox = getTermsCheckbox();\n        if (!termsCheckbox.isSelected()) {\n            termsCheckbox.click();\n        }\n        return this;\n    }\n\n    public RegistrationPage subscribeToNewsletter() {\n        WebElement newsletterCheckbox = getNewsletterCheckbox();\n        if (!newsletterCheckbox.isSelected()) {\n            newsletterCheckbox.click();\n        }\n        return this;\n    }\n\n    // Complete registration flow\n    public class RegistrationData {\n        public String firstName, lastName, email, phone, password, confirmPassword, country, gender;\n        public boolean acceptTerms, subscribeNewsletter;\n    }\n\n    public HomePage registerUser(RegistrationData data) {\n        fillPersonalInfo(data.firstName, data.lastName, data.email, data.phone);\n        fillPassword(data.password, data.confirmPassword);\n        selectCountry(data.country);\n        selectGender(data.gender);\n\n        if (data.acceptTerms) acceptTerms();\n        if (data.subscribeNewsletter) subscribeToNewsletter();\n\n        getRegisterButton().click();\n\n        // Wait for registration to complete and redirect\n        wait.until(ExpectedConditions.urlContains(\"/home\"));\n        return new HomePage(driver, autoHeal);\n    }\n\n    // Validation methods\n    public boolean hasFieldError(String fieldName) {\n        try {\n            return getFieldError(fieldName).isDisplayed();\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public String getFieldErrorMessage(String fieldName) {\n        return hasFieldError(fieldName) ? getFieldError(fieldName).getText() : null;\n    }\n\n    public String getPasswordStrength() {\n        try {\n            return getPasswordStrengthIndicator().getText();\n        } catch (Exception e) {\n            return \"Unknown\";\n        }\n    }\n\n    public boolean isFormValid() {\n        // Check if register button is enabled (indicates form validation passed)\n        return getRegisterButton().isEnabled();\n    }\n\n    public RegistrationPage clearForm() {\n        getClearButton().click();\n        // Wait for form to clear\n        wait.until(driver -&gt; getFirstNameField().getAttribute(\"value\").isEmpty());\n        return this;\n    }\n\n    @Override\n    public boolean isLoaded() {\n        try {\n            return getFirstNameField().isDisplayed() &amp;&amp;\n                   getRegisterButton().isDisplayed();\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public String getExpectedUrlPattern() {\n        return \".*/register.*|.*/signup.*\";\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#data-table-page","title":"Data Table Page","text":"<pre><code>public class UsersManagementPage extends BasePage {\n\n    public UsersManagementPage(WebDriver driver, AutoHealLocator autoHeal) {\n        super(driver, autoHeal);\n    }\n\n    // Table elements\n    private WebElement getUsersTable() {\n        return findElement(\"#users-table\", \"users data table\");\n    }\n\n    private WebElement getSearchBox() {\n        return findElement(\"#users-search\", \"users search input\");\n    }\n\n    private WebElement getAddUserButton() {\n        return findElement(\"Add User\", \"add new user button\");\n    }\n\n    private WebElement getPaginationNext() {\n        return findElement(\".pagination .next\", \"next page button\");\n    }\n\n    private WebElement getPaginationPrevious() {\n        return findElement(\".pagination .previous\", \"previous page button\");\n    }\n\n    // Row-specific elements\n    private List&lt;WebElement&gt; getAllUserRows() {\n        return getUsersTable().findElements(By.cssSelector(\"tbody tr\"));\n    }\n\n    private WebElement getUserRow(String username) {\n        return findElement(\n            String.format(\"//tr[td[text()='%s']]\", username),\n            String.format(\"table row for user %s\", username)\n        );\n    }\n\n    private WebElement getEditButton(String username) {\n        return findElement(\n            String.format(\"//tr[td[text()='%s']]//button[contains(@class,'edit')]\", username),\n            String.format(\"edit button for user %s\", username)\n        );\n    }\n\n    private WebElement getDeleteButton(String username) {\n        return findElement(\n            String.format(\"//tr[td[text()='%s']]//button[contains(@class,'delete')]\", username),\n            String.format(\"delete button for user %s\", username)\n        );\n    }\n\n    // Table operations\n    public List&lt;String&gt; getAllUsernames() {\n        return getAllUserRows().stream()\n            .map(row -&gt; row.findElements(By.tagName(\"td\")).get(1).getText()) // Assuming username is 2nd column\n            .collect(Collectors.toList());\n    }\n\n    public boolean isUserPresent(String username) {\n        try {\n            getUserRow(username);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public UsersManagementPage searchUsers(String searchTerm) {\n        WebElement searchBox = getSearchBox();\n        searchBox.clear();\n        searchBox.sendKeys(searchTerm);\n\n        // Wait for search results to update\n        wait.until(driver -&gt; {\n            List&lt;String&gt; usernames = getAllUsernames();\n            return usernames.stream().anyMatch(name -&gt;\n                name.toLowerCase().contains(searchTerm.toLowerCase()));\n        });\n\n        return this;\n    }\n\n    public CreateUserPage clickAddUser() {\n        getAddUserButton().click();\n        return new CreateUserPage(driver, autoHeal);\n    }\n\n    public EditUserPage editUser(String username) {\n        getEditButton(username).click();\n        return new EditUserPage(driver, autoHeal);\n    }\n\n    public UsersManagementPage deleteUser(String username) {\n        getDeleteButton(username).click();\n\n        // Handle confirmation dialog\n        WebElement confirmButton = wait.until(ExpectedConditions.elementToBeClickable(\n            findElement(\"//button[text()='Confirm']\", \"delete confirmation button\")\n        ));\n        confirmButton.click();\n\n        // Wait for user to be removed from table\n        wait.until(driver -&gt; !isUserPresent(username));\n\n        return this;\n    }\n\n    public int getUserCount() {\n        return getAllUserRows().size();\n    }\n\n    // Pagination\n    public boolean hasNextPage() {\n        try {\n            return getPaginationNext().isEnabled();\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public boolean hasPreviousPage() {\n        try {\n            return getPaginationPrevious().isEnabled();\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public UsersManagementPage goToNextPage() {\n        if (hasNextPage()) {\n            getPaginationNext().click();\n            waitForPageToLoad();\n        }\n        return this;\n    }\n\n    public UsersManagementPage goToPreviousPage() {\n        if (hasPreviousPage()) {\n            getPaginationPrevious().click();\n            waitForPageToLoad();\n        }\n        return this;\n    }\n\n    // Table sorting\n    public UsersManagementPage sortByColumn(String columnName) {\n        WebElement columnHeader = findElement(\n            String.format(\"//th[text()='%s']\", columnName),\n            String.format(\"%s column header\", columnName)\n        );\n        columnHeader.click();\n\n        // Wait for sort to complete\n        Thread.sleep(1000);\n        return this;\n    }\n\n    @Override\n    public boolean isLoaded() {\n        try {\n            return getUsersTable().isDisplayed() &amp;&amp;\n                   getAddUserButton().isDisplayed();\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    @Override\n    public String getExpectedUrlPattern() {\n        return \".*/users.*|.*/user-management.*\";\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#page-factory-integration","title":"Page Factory Integration","text":""},{"location":"user-guide/examples/page-object-examples/#comparison-page-factory-vs-autoheal-patterns","title":"Comparison: Page Factory vs AutoHeal Patterns","text":"Aspect Traditional Page Factory AutoHeal Recommended Page Factory + AutoHeal Hybrid Locator Definition <code>@FindBy</code> annotations Constants or inline Mixed approach Healing Support \u274c No healing \u2705 Full healing \u26a0\ufe0f Limited healing Runtime Flexibility \u274c Fixed at init \u2705 Dynamic \u26a0\ufe0f Partial Complexity \u2b50 Simple \u2b50\u2b50 Medium \u2b50\u2b50\u2b50 Complex Best For Stable apps Dynamic apps Legacy migration"},{"location":"user-guide/examples/page-object-examples/#option-1-pure-autoheal-pattern-recommended","title":"Option 1: Pure AutoHeal Pattern (Recommended)","text":"<pre><code>// Clean, healing-enabled approach\npublic class LoginPage extends BasePage {\n\n    // Locator constants for maintainability\n    private static final String USERNAME_FIELD = \"#username\";\n    private static final String PASSWORD_FIELD = \"#password\";\n    private static final String LOGIN_BUTTON = \"Sign In\";\n    private static final String ERROR_MESSAGE = \".error-message\";\n\n    // Description constants\n    private static final String USERNAME_DESC = \"username input on login page\";\n    private static final String PASSWORD_DESC = \"password input on login page\";\n    private static final String LOGIN_BTN_DESC = \"login submit button\";\n    private static final String ERROR_DESC = \"login error message\";\n\n    public LoginPage(WebDriver driver, AutoHealLocator autoHeal) {\n        super(driver, autoHeal);\n    }\n\n    // Actions using AutoHeal healing\n    public void enterUsername(String username) {\n        WebElement field = findElement(USERNAME_FIELD, USERNAME_DESC);\n        field.clear();\n        field.sendKeys(username);\n    }\n\n    public void enterPassword(String password) {\n        WebElement field = findElement(PASSWORD_FIELD, PASSWORD_DESC);\n        field.clear();\n        field.sendKeys(password);\n    }\n\n    public HomePage clickLogin() {\n        WebElement button = findElement(LOGIN_BUTTON, LOGIN_BTN_DESC);\n        button.click();\n        return new HomePage(driver, autoHeal);\n    }\n\n    public String getErrorMessage() {\n        try {\n            return findElement(ERROR_MESSAGE, ERROR_DESC).getText();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#option-2-centralized-locator-registry","title":"Option 2: Centralized Locator Registry","text":"<pre><code>// Separate locator management for larger teams\npublic class LoginPageLocators {\n\n    public static class Selectors {\n        public static final String USERNAME = \"#username\";\n        public static final String PASSWORD = \"#password\";\n        public static final String LOGIN_BTN = \"Sign In\";\n        public static final String ERROR_MSG = \".error-message\";\n        public static final String FORGOT_PWD = \"Forgot Password?\";\n    }\n\n    public static class Descriptions {\n        public static final String USERNAME = \"username input field on login page\";\n        public static final String PASSWORD = \"password input field on login page\";\n        public static final String LOGIN_BTN = \"login submit button on login page\";\n        public static final String ERROR_MSG = \"error message display on login page\";\n        public static final String FORGOT_PWD = \"forgot password link on login page\";\n    }\n}\n\n// Page Object using centralized locators\npublic class LoginPageWithRegistry extends BasePage {\n\n    public LoginPageWithRegistry(WebDriver driver, AutoHealLocator autoHeal) {\n        super(driver, autoHeal);\n    }\n\n    public void enterCredentials(String username, String password) {\n        enterUsername(username);\n        enterPassword(password);\n    }\n\n    public void enterUsername(String username) {\n        WebElement field = findElement(\n            LoginPageLocators.Selectors.USERNAME,\n            LoginPageLocators.Descriptions.USERNAME\n        );\n        field.clear();\n        field.sendKeys(username);\n    }\n\n    public void enterPassword(String password) {\n        WebElement field = findElement(\n            LoginPageLocators.Selectors.PASSWORD,\n            LoginPageLocators.Descriptions.PASSWORD\n        );\n        field.clear();\n        field.sendKeys(password);\n    }\n\n    public HomePage submitLogin() {\n        WebElement button = findElement(\n            LoginPageLocators.Selectors.LOGIN_BTN,\n            LoginPageLocators.Descriptions.LOGIN_BTN\n        );\n        button.click();\n        return new HomePage(driver, autoHeal);\n    }\n\n    public void clickForgotPassword() {\n        WebElement link = findElement(\n            LoginPageLocators.Selectors.FORGOT_PWD,\n            LoginPageLocators.Descriptions.FORGOT_PWD\n        );\n        link.click();\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#option-3-hybrid-page-factory-autoheal","title":"Option 3: Hybrid Page Factory + AutoHeal","text":"<pre><code>import org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\n// Use for legacy migration or when mixing stable/unstable elements\npublic class HybridLoginPage extends BasePage {\n\n    // Page Factory for stable elements (no healing)\n    @FindBy(id = \"username\")\n    private WebElement usernameField;\n\n    @FindBy(id = \"password\")\n    private WebElement passwordField;\n\n    public HybridLoginPage(WebDriver driver, AutoHealLocator autoHeal) {\n        super(driver, autoHeal);\n        PageFactory.initElements(driver, this);\n    }\n\n    // Use Page Factory elements when they work\n    public void enterUsername(String username) {\n        try {\n            usernameField.clear();\n            usernameField.sendKeys(username);\n        } catch (Exception e) {\n            // Fallback to AutoHeal when Page Factory fails\n            WebElement field = findElement(\"#username\", \"username input field\");\n            field.clear();\n            field.sendKeys(username);\n        }\n    }\n\n    // Use AutoHeal for unstable/dynamic elements\n    public HomePage clickLogin() {\n        // Dynamic button text - use AutoHeal\n        WebElement button = findElement(\"Sign In\", \"login submit button\");\n        button.click();\n        return new HomePage(driver, autoHeal);\n    }\n\n    public String getErrorMessage() {\n        // Dynamic error messages - use AutoHeal\n        try {\n            return findElement(\".error-message\", \"login error message\").getText();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#recommendation-summary","title":"Recommendation Summary","text":"<p>\u2705 Recommended: Option 1 (Pure AutoHeal Pattern) - Benefits: Full healing capability, clean code, consistent pattern - Best for: New projects, dynamic applications, teams wanting self-healing tests</p> <p>\u26a0\ufe0f Consider: Option 2 (Centralized Registry) - Benefits: Enterprise-scale locator management, team collaboration - Best for: Large teams, multiple projects, strict governance requirements</p> <p>\ud83d\udd04 Migration: Option 3 (Hybrid) - Benefits: Gradual migration path, mixed stability requirements - Best for: Legacy codebases, phased adoption, mixed element stability</p>"},{"location":"user-guide/examples/page-object-examples/#autoheal-page-factory-legacy-support","title":"AutoHeal Page Factory (Legacy Support)","text":"<pre><code>}\n\n// Hybrid approach: Use @FindBy for stable elements, AutoHeal for dynamic ones\npublic PageFactoryLoginPage enterCredentials(String username, String password) {\n    usernameField.sendKeys(username);\n    passwordField.sendKeys(password);\n    return this;\n}\n\npublic HomePage login() {\n    loginButton.click();\n\n    // Use AutoHeal for dynamic success message that might change\n    WebElement successMessage = findElement(\n        \".success-notification\",\n        \"login success notification message\"\n    );\n\n    wait.until(ExpectedConditions.visibilityOf(successMessage));\n    return new HomePage(driver, autoHeal);\n}\n\n// Use AutoHeal for error elements that might have unstable selectors\npublic String getLoginError() {\n    try {\n        WebElement errorMessage = findElement(\n            \".error-message\",\n            \"login error message display\"\n        );\n        return errorMessage.getText();\n    } catch (Exception e) {\n        return null;\n    }\n}\n\n@Override\npublic boolean isLoaded() {\n    return usernameField.isDisplayed() &amp;&amp;\n           passwordField.isDisplayed() &amp;&amp;\n           loginButton.isDisplayed();\n}\n\n@Override\npublic String getExpectedUrlPattern() {\n    return \".*/(login|signin).*\";\n}\n</code></pre> <p>} ```</p>"},{"location":"user-guide/examples/page-object-examples/#component-based-architecture","title":"Component-Based Architecture","text":"<p>Create reusable components that can be shared across multiple pages, improving maintainability and reducing code duplication. </p>"},{"location":"user-guide/examples/page-object-examples/#reusable-components","title":"Reusable Components","text":"<p><code>java // Header component that appears on multiple pages public class HeaderComponent {     private WebDriver driver;     private AutoHealLocator autoHeal;      public HeaderComponent(WebDriver driver, AutoHealLocator autoHeal) {         this.driver = driver;         this.autoHeal = autoHeal;     }      private WebElement getLogo() {         return autoHeal.findElement(\".company-logo\", \"company logo in header\");     }      private WebElement getUserMenu() {         return autoHeal.findElement(\".user-menu\", \"user menu dropdown in header\");     }      private WebElement getNotificationsBell() {         return autoHeal.findElement(\".notifications-bell\", \"notifications bell icon\");     }      private WebElement getSearchBox() {         return autoHeal.findElement(\"#global-search\", \"global search input in header\");     }      // Component actions     public HomePage clickLogo() {         getLogo().click();         return new HomePage(driver, autoHeal);     }      public HeaderComponent openUserMenu() {         getUserMenu().click();         return this;     }      public LoginPage logout() {         openUserMenu();         WebElement logoutLink = autoHeal.findElement(             \"//a[text()='Logout']\",             \"logout link in user menu\"         );         logoutLink.click();         return new LoginPage(driver, autoHeal);     }      public NotificationsPage openNotifications() {         getNotificationsBell().click();         return new NotificationsPage(driver, autoHeal);     }      public SearchResultsPage search(String searchTerm) {         WebElement searchBox = getSearchBox();         searchBox.clear();         searchBox.sendKeys(searchTerm);         searchBox.sendKeys(Keys.ENTER);         return new SearchResultsPage(driver, autoHeal);     }      public int getNotificationCount() {         try {             WebElement notificationBadge = autoHeal.findElement(                 \".notifications-bell .badge\",                 \"notification count badge\"             );             return Integer.parseInt(notificationBadge.getText());         } catch (Exception e) {             return 0;         }     } }  // Navigation component public class NavigationComponent {     private WebDriver driver;     private AutoHealLocator autoHeal;      public NavigationComponent(WebDriver driver, AutoHealLocator autoHeal) {         this.driver = driver;         this.autoHeal = autoHeal;     }      private WebElement getNavItem(String itemName) {         return autoHeal.findElement(             String.format(\"//nav//a[text()='%s']\", itemName),             String.format(\"%s navigation item\", itemName)         );     }      public DashboardPage navigateToDashboard() {         getNavItem(\"Dashboard\").click();         return new DashboardPage(driver, autoHeal);     }      public ProductsPage navigateToProducts() {         getNavItem(\"Products\").click();         return new ProductsPage(driver, autoHeal);     }      public OrdersPage navigateToOrders() {         getNavItem(\"Orders\").click();         return new OrdersPage(driver, autoHeal);     }      public boolean isNavItemActive(String itemName) {         try {             WebElement navItem = getNavItem(itemName);             return navItem.getAttribute(\"class\").contains(\"active\");         } catch (Exception e) {             return false;         }     } }  // Enhanced page with components public class DashboardPage extends BasePage {     private HeaderComponent header;     private NavigationComponent navigation;      public DashboardPage(WebDriver driver, AutoHealLocator autoHeal) {         super(driver, autoHeal);         this.header = new HeaderComponent(driver, autoHeal);         this.navigation = new NavigationComponent(driver, autoHeal);     }      // Expose components     public HeaderComponent getHeader() {         return header;     }      public NavigationComponent getNavigation() {         return navigation;     }      // Page-specific elements     private WebElement getDashboardTitle() {         return findElement(\"h1.dashboard-title\", \"dashboard page title\");     }      private List&lt;WebElement&gt; getDashboardWidgets() {         return autoHeal.findElementsAsync(\".widget\", \"dashboard widgets\").join();     }      // Page actions     public String getTitle() {         return getDashboardTitle().getText();     }      public int getWidgetCount() {         return getDashboardWidgets().size();     }      @Override     public boolean isLoaded() {         try {             return getDashboardTitle().isDisplayed() &amp;&amp;                    navigation.isNavItemActive(\"Dashboard\");         } catch (Exception e) {             return false;         }     }      @Override     public String getExpectedUrlPattern() {         return \".*/dashboard.*\";     } }</code></p>"},{"location":"user-guide/examples/page-object-examples/#data-driven-testing","title":"Data-Driven Testing","text":""},{"location":"user-guide/examples/page-object-examples/#test-data-models","title":"Test Data Models","text":"<pre><code>// User data model\npublic class UserTestData {\n    private String firstName;\n    private String lastName;\n    private String email;\n    private String password;\n    private String country;\n    private String role;\n\n    // Constructors, getters, setters\n    public UserTestData(String firstName, String lastName, String email,\n                       String password, String country, String role) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.email = email;\n        this.password = password;\n        this.country = country;\n        this.role = role;\n    }\n\n    // Getters and setters...\n\n    // Factory methods for common test scenarios\n    public static UserTestData validUser() {\n        return new UserTestData(\"John\", \"Doe\", \"john.doe@example.com\",\n                               \"Password123!\", \"United States\", \"User\");\n    }\n\n    public static UserTestData adminUser() {\n        return new UserTestData(\"Admin\", \"User\", \"admin@example.com\",\n                               \"AdminPass123!\", \"United States\", \"Admin\");\n    }\n\n    public static UserTestData invalidEmailUser() {\n        return new UserTestData(\"Invalid\", \"User\", \"invalid-email\",\n                               \"Password123!\", \"United States\", \"User\");\n    }\n}\n\n// Enhanced registration page with data-driven methods\npublic class DataDrivenRegistrationPage extends BasePage {\n\n    public DataDrivenRegistrationPage(WebDriver driver, AutoHealLocator autoHeal) {\n        super(driver, autoHeal);\n    }\n\n    // Bulk fill form using test data object\n    public DataDrivenRegistrationPage fillRegistrationForm(UserTestData userData) {\n        findElement(\"#firstName\", \"first name field\").sendKeys(userData.getFirstName());\n        findElement(\"#lastName\", \"last name field\").sendKeys(userData.getLastName());\n        findElement(\"#email\", \"email field\").sendKeys(userData.getEmail());\n        findElement(\"#password\", \"password field\").sendKeys(userData.getPassword());\n\n        // Select country from dropdown\n        Select countrySelect = new Select(findElement(\"select[name='country']\", \"country dropdown\"));\n        countrySelect.selectByVisibleText(userData.getCountry());\n\n        return this;\n    }\n\n    // Validation with expected results\n    public Map&lt;String, String&gt; validateForm(UserTestData userData) {\n        fillRegistrationForm(userData);\n\n        // Trigger validation by clicking register\n        findElement(\"//button[@type='submit']\", \"register button\").click();\n\n        Map&lt;String, String&gt; validationErrors = new HashMap&lt;&gt;();\n\n        // Check for field-specific errors\n        String[] fields = {\"firstName\", \"lastName\", \"email\", \"password\"};\n        for (String field : fields) {\n            try {\n                WebElement errorElement = findElement(\n                    String.format(\".error[data-field='%s']\", field),\n                    String.format(\"%s validation error\", field)\n                );\n                if (errorElement.isDisplayed()) {\n                    validationErrors.put(field, errorElement.getText());\n                }\n            } catch (Exception e) {\n                // No error for this field\n            }\n        }\n\n        return validationErrors;\n    }\n\n    @Override\n    public boolean isLoaded() {\n        return findElement(\"#firstName\", \"first name field\").isDisplayed();\n    }\n\n    @Override\n    public String getExpectedUrlPattern() {\n        return \".*/register.*\";\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#parameterized-test-example","title":"Parameterized Test Example","text":"<pre><code>@ParameterizedTest\n@MethodSource(\"provideUserTestData\")\nvoid testUserRegistrationWithVariousData(UserTestData userData, boolean shouldSucceed,\n                                         Map&lt;String, String&gt; expectedErrors) {\n\n    DataDrivenRegistrationPage registrationPage = new DataDrivenRegistrationPage(driver, autoHeal);\n    driver.get(\"https://example.com/register\");\n\n    if (shouldSucceed) {\n        // Test successful registration\n        HomePage homePage = registrationPage.fillRegistrationForm(userData)\n            .clickRegister();\n\n        assertTrue(homePage.isLoaded());\n        assertTrue(homePage.getWelcomeText().contains(userData.getFirstName()));\n\n    } else {\n        // Test validation errors\n        Map&lt;String, String&gt; actualErrors = registrationPage.validateForm(userData);\n\n        for (Map.Entry&lt;String, String&gt; expectedError : expectedErrors.entrySet()) {\n            assertTrue(\"Expected error for field: \" + expectedError.getKey(),\n                      actualErrors.containsKey(expectedError.getKey()));\n            assertTrue(\"Error message mismatch for field: \" + expectedError.getKey(),\n                      actualErrors.get(expectedError.getKey()).contains(expectedError.getValue()));\n        }\n    }\n}\n\nstatic Stream&lt;Arguments&gt; provideUserTestData() {\n    return Stream.of(\n        // Valid user - should succeed\n        Arguments.of(\n            UserTestData.validUser(),\n            true,\n            Collections.emptyMap()\n        ),\n\n        // Invalid email - should fail with email error\n        Arguments.of(\n            UserTestData.invalidEmailUser(),\n            false,\n            Map.of(\"email\", \"Please enter a valid email\")\n        ),\n\n        // Missing data - should fail with required field errors\n        Arguments.of(\n            new UserTestData(\"\", \"\", \"\", \"\", \"\", \"\"),\n            false,\n            Map.of(\n                \"firstName\", \"First name is required\",\n                \"lastName\", \"Last name is required\",\n                \"email\", \"Email is required\",\n                \"password\", \"Password is required\"\n            )\n        )\n    );\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/examples/page-object-examples/#1-consistent-element-location-strategy","title":"1. Consistent Element Location Strategy","text":"<pre><code>// \u274c Inconsistent approaches\npublic class InconsistentPage extends BasePage {\n    public WebElement getElement1() {\n        return driver.findElement(By.id(\"element1\")); // Direct Selenium\n    }\n\n    public WebElement getElement2() {\n        return autoHeal.findElement(\"#element2\", \"second element\"); // AutoHeal\n    }\n}\n\n// \u2705 Consistent AutoHeal usage\npublic class ConsistentPage extends BasePage {\n    public WebElement getElement1() {\n        return findElement(\"#element1\", \"first element with specific purpose\");\n    }\n\n    public WebElement getElement2() {\n        return findElement(\"#element2\", \"second element with clear description\");\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#2-meaningful-element-descriptions","title":"2. Meaningful Element Descriptions","text":"<pre><code>// \u274c Generic descriptions\nfindElement(\"#btn1\", \"button\");\nfindElement(\".input\", \"input field\");\n\n// \u2705 Specific, contextual descriptions\nfindElement(\"#btn1\", \"submit order button on checkout page\");\nfindElement(\".input\", \"customer email input in registration form\");\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#3-page-state-validation","title":"3. Page State Validation","text":"<pre><code>public class WellValidatedPage extends BasePage {\n\n    @Override\n    public boolean isLoaded() {\n        try {\n            // Check multiple indicators of page readiness\n            return isMainContentLoaded() &amp;&amp;\n                   isNavigationReady() &amp;&amp;\n                   areScriptsLoaded();\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    private boolean isMainContentLoaded() {\n        return findElement(\"h1.page-title\", \"page title\").isDisplayed();\n    }\n\n    private boolean isNavigationReady() {\n        return findElement(\".main-nav\", \"main navigation\").isDisplayed();\n    }\n\n    private boolean areScriptsLoaded() {\n        return (Boolean) ((JavascriptExecutor) driver)\n            .executeScript(\"return window.appReady === true\");\n    }\n\n    // Always verify page loaded in constructor or navigation methods\n    public SomePage navigateToOtherPage() {\n        findElement(\"Other Page\", \"other page link\").click();\n        SomePage otherPage = new SomePage(driver, autoHeal);\n        otherPage.verifyPageLoaded(); // Ensure page is ready\n        return otherPage;\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#4-error-handling-and-resilience","title":"4. Error Handling and Resilience","text":"<pre><code>public class ResilientPage extends BasePage {\n\n    public String getOptionalText(String selector, String description, String defaultValue) {\n        try {\n            WebElement element = findElement(selector, description);\n            return element.getText();\n        } catch (Exception e) {\n            logger.debug(\"Optional element not found: \" + description);\n            return defaultValue;\n        }\n    }\n\n    public boolean isElementPresent(String selector, String description) {\n        try {\n            findElement(selector, description);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public WebElement waitForElement(String selector, String description, Duration timeout) {\n        WebDriverWait customWait = new WebDriverWait(driver, timeout);\n        return customWait.until(driver -&gt; {\n            try {\n                return findElement(selector, description);\n            } catch (Exception e) {\n                return null;\n            }\n        });\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/page-object-examples/#5-fluent-interface-design","title":"5. Fluent Interface Design","text":"<pre><code>public class FluentPage extends BasePage {\n\n    // Return 'this' for method chaining on same page\n    public FluentPage enterData(String data) {\n        findElement(\"#input\", \"data input field\").sendKeys(data);\n        return this;\n    }\n\n    public FluentPage selectOption(String option) {\n        findElement(\"//option[text()='\" + option + \"']\", \"dropdown option\").click();\n        return this;\n    }\n\n    public FluentPage checkBox() {\n        findElement(\"#checkbox\", \"agreement checkbox\").click();\n        return this;\n    }\n\n    // Return different page object when navigation occurs\n    public NextPage submit() {\n        findElement(\"Submit\", \"submit button\").click();\n        return new NextPage(driver, autoHeal);\n    }\n\n    // Usage example:\n    // NextPage result = fluentPage\n    //     .enterData(\"test data\")\n    //     .selectOption(\"Option 1\")\n    //     .checkBox()\n    //     .submit();\n}\n</code></pre> <p>This comprehensive Page Object Model guide demonstrates how to leverage AutoHeal's self-healing capabilities within a well-structured, maintainable test automation framework. The combination of POM patterns with AutoHeal's intelligent element location creates robust, resilient test suites that adapt to application changes. </p>"},{"location":"user-guide/examples/selenium-examples/","title":"Selenium Integration Examples","text":"<p>This page provides comprehensive examples of using AutoHeal with Selenium WebDriver for various web automation scenarios.</p>"},{"location":"user-guide/examples/selenium-examples/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic Setup</li> <li>Form Interactions</li> <li>Navigation &amp; Links</li> <li>Dynamic Content</li> <li>File Operations</li> <li>Advanced Interactions</li> <li>Error Handling</li> </ul>"},{"location":"user-guide/examples/selenium-examples/#basic-setup","title":"Basic Setup","text":""},{"location":"user-guide/examples/selenium-examples/#simple-test-class","title":"Simple Test Class","text":"<pre><code>import com.autoheal.AutoHealLocator;\nimport com.autoheal.config.AutoHealConfiguration;\nimport com.autoheal.config.AIConfig;\nimport com.autoheal.impl.adapter.SeleniumWebAutomationAdapter;\nimport com.autoheal.model.AIProvider;\nimport org.junit.jupiter.api.*;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\n\npublic class BasicAutoHealTest {\n    private WebDriver driver;\n    private AutoHealLocator autoHeal;\n\n    @BeforeEach\n    void setUp() {\n        // Initialize WebDriver\n        driver = new ChromeDriver();\n\n        // Configure AutoHeal\n        AutoHealConfiguration config = AutoHealConfiguration.builder()\n            .ai(AIConfig.builder()\n                .provider(AIProvider.OPENAI)\n                .apiKey(System.getenv(\"OPENAI_API_KEY\"))\n                .build())\n            .build();\n\n        // Initialize AutoHeal\n        autoHeal = AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(config)\n            .build();\n    }\n\n    @Test\n    void testBasicInteraction() {\n        driver.get(\"https://example.com\");\n\n        // AutoHeal automatically detects selector types\n        WebElement heading = autoHeal.findElement(\"h1\", \"main page heading\");\n        assertEquals(\"Welcome\", heading.getText());\n\n        WebElement button = autoHeal.findElement(\".btn-primary\", \"primary action button\");\n        button.click();\n    }\n\n    @AfterEach\n    void tearDown() {\n        autoHeal.shutdown(); // Important: generates reports\n        driver.quit();\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#form-interactions","title":"Form Interactions","text":""},{"location":"user-guide/examples/selenium-examples/#text-inputs","title":"Text Inputs","text":"<pre><code>@Test\nvoid testTextInputs() {\n    driver.get(\"https://forms.example.com/registration\");\n\n    // Different selector types automatically detected\n    WebElement firstName = autoHeal.findElement(\"#firstName\", \"first name input field\");\n    firstName.sendKeys(\"John\");\n\n    WebElement lastName = autoHeal.findElement(\"//input[@name='lastName']\", \"last name input field\");\n    lastName.sendKeys(\"Doe\");\n\n    WebElement email = autoHeal.findElement(\"email\", \"email address input field\");\n    email.sendKeys(\"john.doe@example.com\");\n\n    // Clear and re-enter\n    WebElement phone = autoHeal.findElement(\"input[type='tel']\", \"phone number input\");\n    phone.clear();\n    phone.sendKeys(\"+1234567890\");\n\n    // Verify input values\n    assertEquals(\"John\", firstName.getAttribute(\"value\"));\n    assertEquals(\"john.doe@example.com\", email.getAttribute(\"value\"));\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#password-fields","title":"Password Fields","text":"<pre><code>@Test\nvoid testPasswordFields() {\n    driver.get(\"https://account.example.com/signup\");\n\n    // Password creation form\n    WebElement password = autoHeal.findElement(\"#new-password\", \"new password input field\");\n    password.sendKeys(\"SecurePassword123!\");\n\n    WebElement confirmPassword = autoHeal.findElement(\"#confirm-password\", \"confirm password input field\");\n    confirmPassword.sendKeys(\"SecurePassword123!\");\n\n    // Check password strength indicator\n    WebElement strengthIndicator = autoHeal.findElement(\".password-strength\", \"password strength indicator\");\n    assertTrue(strengthIndicator.getText().contains(\"Strong\"));\n\n    // Show/hide password toggle\n    WebElement toggleButton = autoHeal.findElement(\"//button[@aria-label='Show password']\", \"show password toggle\");\n    toggleButton.click();\n\n    assertEquals(\"text\", password.getAttribute(\"type\")); // Password now visible\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#checkboxes-and-radio-buttons","title":"Checkboxes and Radio Buttons","text":"<pre><code>@Test\nvoid testCheckboxesAndRadios() {\n    driver.get(\"https://survey.example.com\");\n\n    // Single checkbox\n    WebElement agreeTerms = autoHeal.findElement(\"#agree-terms\", \"terms and conditions checkbox\");\n    if (!agreeTerms.isSelected()) {\n        agreeTerms.click();\n    }\n    assertTrue(agreeTerms.isSelected());\n\n    // Multiple checkboxes - Using findElements for collections\n    List&lt;WebElement&gt; allCheckboxes = autoHeal.findElements(\"input[type='checkbox']\", \"all interest checkboxes\");\n    System.out.println(\"Found \" + allCheckboxes.size() + \" checkboxes\");\n\n    // Click first 3 checkboxes\n    for (int i = 0; i &lt; Math.min(3, allCheckboxes.size()); i++) {\n        WebElement checkbox = allCheckboxes.get(i);\n        if (!checkbox.isSelected()) {\n            checkbox.click();\n            assertTrue(checkbox.isSelected());\n        }\n    }\n\n    // Alternative: Individual checkbox selection\n    List&lt;String&gt; interests = Arrays.asList(\"Technology\", \"Sports\", \"Music\");\n    for (String interest : interests) {\n        WebElement checkbox = autoHeal.findElement(\n            \"//input[@type='checkbox' and @value='\" + interest.toLowerCase() + \"']\",\n            interest + \" interest checkbox\"\n        );\n        checkbox.click();\n        assertTrue(checkbox.isSelected());\n    }\n\n    // Radio buttons\n    WebElement genderMale = autoHeal.findElement(\"input[name='gender'][value='male']\", \"male gender radio button\");\n    genderMale.click();\n\n    // Verify only one radio is selected\n    WebElement genderFemale = autoHeal.findElement(\"input[name='gender'][value='female']\", \"female gender radio button\");\n    assertTrue(genderMale.isSelected());\n    assertFalse(genderFemale.isSelected());\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#dropdowns-and-select-elements","title":"Dropdowns and Select Elements","text":"<pre><code>@Test\nvoid testDropdowns() {\n    driver.get(\"https://checkout.example.com\");\n\n    // Standard HTML select\n    WebElement countrySelect = autoHeal.findElement(\"select[name='country']\", \"country selection dropdown\");\n    Select selectCountry = new Select(countrySelect);\n\n    // Different selection methods\n    selectCountry.selectByVisibleText(\"United States\");\n    assertEquals(\"US\", selectCountry.getFirstSelectedOption().getAttribute(\"value\"));\n\n    selectCountry.selectByValue(\"CA\");\n    assertEquals(\"Canada\", selectCountry.getFirstSelectedOption().getText());\n\n    selectCountry.selectByIndex(0);\n    assertTrue(selectCountry.getFirstSelectedOption().isSelected());\n\n    // Multi-select dropdown\n    WebElement skillsSelect = autoHeal.findElement(\"#skills\", \"skills multi-select dropdown\");\n    Select multiSelect = new Select(skillsSelect);\n    assertTrue(multiSelect.isMultiple());\n\n    multiSelect.selectByVisibleText(\"Java\");\n    multiSelect.selectByVisibleText(\"Python\");\n    multiSelect.selectByVisibleText(\"JavaScript\");\n\n    assertEquals(3, multiSelect.getAllSelectedOptions().size());\n\n    // Custom dropdown (div-based)\n    WebElement customDropdown = autoHeal.findElement(\".custom-dropdown-trigger\", \"custom dropdown menu\");\n    customDropdown.click();\n\n    WebElement option = autoHeal.findElement(\"//div[@data-value='premium']\", \"premium plan option\");\n    option.click();\n\n    // Verify selection\n    WebElement selectedValue = autoHeal.findElement(\".custom-dropdown-trigger .selected-text\", \"selected dropdown value\");\n    assertEquals(\"Premium Plan\", selectedValue.getText());\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#working-with-multiple-elements","title":"Working with Multiple Elements","text":"<pre><code>@Test\nvoid testMultipleElements() {\n    driver.get(\"https://catalog.example.com\");\n\n    // Find all product cards - Synchronous (simple and direct)\n    List&lt;WebElement&gt; products = autoHeal.findElements(\".product-card\", \"product cards on catalog page\");\n    System.out.println(\"Found \" + products.size() + \" products\");\n\n    // Process each product\n    for (int i = 0; i &lt; products.size(); i++) {\n        WebElement product = products.get(i);\n        WebElement title = product.findElement(By.className(\"product-title\"));\n        WebElement price = product.findElement(By.className(\"product-price\"));\n\n        System.out.println(\"Product \" + (i + 1) + \": \" + title.getText() + \" - \" + price.getText());\n    }\n\n    // Find all navigation menu items\n    List&lt;WebElement&gt; menuItems = autoHeal.findElements(\".nav-item\", \"navigation menu items\");\n    for (WebElement item : menuItems) {\n        System.out.println(\"Menu: \" + item.getText());\n    }\n\n    // Table rows processing\n    List&lt;WebElement&gt; tableRows = autoHeal.findElements(\"//table[@id='results']//tr\", \"result table rows\");\n    System.out.println(\"Processing \" + tableRows.size() + \" table rows\");\n\n    for (WebElement row : tableRows) {\n        List&lt;WebElement&gt; cells = row.findElements(By.tagName(\"td\"));\n        if (cells.size() &gt;= 3) {\n            String name = cells.get(0).getText();\n            String email = cells.get(1).getText();\n            String status = cells.get(2).getText();\n            System.out.println(name + \" | \" + email + \" | \" + status);\n        }\n    }\n\n    // Form inputs validation\n    List&lt;WebElement&gt; formInputs = autoHeal.findElements(\"input\", \"all form input fields\");\n    for (WebElement input : formInputs) {\n        if (input.getAttribute(\"required\") != null) {\n            System.out.println(\"Required field: \" + input.getAttribute(\"name\"));\n\n            // Highlight required fields\n            ((JavascriptExecutor) driver).executeScript(\n                \"arguments[0].style.border='2px solid red'\", input);\n        }\n    }\n\n    // Button collections\n    List&lt;WebElement&gt; actionButtons = autoHeal.findElements(\".action-btn\", \"action buttons in toolbar\");\n    System.out.println(\"Found \" + actionButtons.size() + \" action buttons\");\n\n    // Click buttons with confirmation\n    for (WebElement button : actionButtons) {\n        if (button.isEnabled() &amp;&amp; button.getText().equals(\"Preview\")) {\n            button.click();\n\n            // Wait for preview to load\n            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n            wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(\"preview-panel\")));\n            break;\n        }\n    }\n}\n\n@Test\nvoid testAsyncMultipleElements() {\n    driver.get(\"https://dashboard.example.com\");\n\n    // Asynchronous approach for better performance\n    CompletableFuture&lt;List&lt;WebElement&gt;&gt; cardsFuture =\n        autoHeal.findElementsAsync(\".dashboard-card\", \"dashboard summary cards\");\n\n    CompletableFuture&lt;List&lt;WebElement&gt;&gt; chartsFuture =\n        autoHeal.findElementsAsync(\".chart-container\", \"analytics charts\");\n\n    // Process both results when ready\n    CompletableFuture.allOf(cardsFuture, chartsFuture).thenRun(() -&gt; {\n        try {\n            List&lt;WebElement&gt; cards = cardsFuture.get();\n            List&lt;WebElement&gt; charts = chartsFuture.get();\n\n            System.out.println(\"Dashboard loaded with \" + cards.size() +\n                             \" cards and \" + charts.size() + \" charts\");\n\n            // Process dashboard elements\n            for (WebElement card : cards) {\n                String title = card.findElement(By.className(\"card-title\")).getText();\n                String value = card.findElement(By.className(\"card-value\")).getText();\n                System.out.println(title + \": \" + value);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }).join();\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#navigation-links","title":"Navigation &amp; Links","text":""},{"location":"user-guide/examples/selenium-examples/#link-navigation","title":"Link Navigation","text":"<pre><code>@Test\nvoid testLinkNavigation() {\n    driver.get(\"https://news.example.com\");\n\n    // Navigate by link text\n    WebElement homeLink = autoHeal.findElement(\"Home\", \"home navigation link\");\n    homeLink.click();\n    assertTrue(driver.getCurrentUrl().contains(\"/home\"));\n\n    // Partial link text\n    WebElement aboutLink = autoHeal.findElement(\"About Us\", \"about page link\");\n    aboutLink.click();\n    assertTrue(driver.getTitle().contains(\"About\"));\n\n    // Link with specific attributes\n    WebElement contactLink = autoHeal.findElement(\"//a[@href='/contact']\", \"contact page link\");\n    contactLink.click();\n\n    // External link (opens in new tab)\n    String originalWindow = driver.getWindowHandle();\n    WebElement externalLink = autoHeal.findElement(\"//a[@target='_blank']\", \"external link opening in new tab\");\n    externalLink.click();\n\n    // Switch to new tab\n    Set&lt;String&gt; windows = driver.getWindowHandles();\n    for (String window : windows) {\n        if (!window.equals(originalWindow)) {\n            driver.switchTo().window(window);\n            break;\n        }\n    }\n\n    // Verify new tab content\n    WebElement newTabContent = autoHeal.findElement(\"h1\", \"main heading in new tab\");\n    assertNotNull(newTabContent);\n\n    // Close new tab and return\n    driver.close();\n    driver.switchTo().window(originalWindow);\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#breadcrumb-navigation","title":"Breadcrumb Navigation","text":"<pre><code>@Test\nvoid testBreadcrumbNavigation() {\n    driver.get(\"https://shop.example.com/electronics/phones/smartphones\");\n\n    // Navigate through breadcrumbs\n    WebElement homecrumb = autoHeal.findElement(\"//nav[@aria-label='breadcrumb']//a[text()='Home']\", \"home breadcrumb\");\n    homecrumb.click();\n    assertEquals(\"https://shop.example.com/\", driver.getCurrentUrl());\n\n    // Go back to category\n    driver.navigate().back();\n    WebElement categorycrumb = autoHeal.findElement(\".breadcrumb-item a[href*='electronics']\", \"electronics category breadcrumb\");\n    categorycrumb.click();\n    assertTrue(driver.getCurrentUrl().contains(\"/electronics\"));\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#dynamic-content","title":"Dynamic Content","text":""},{"location":"user-guide/examples/selenium-examples/#ajax-and-loading-states","title":"AJAX and Loading States","text":"<pre><code>@Test\nvoid testDynamicContent() {\n    driver.get(\"https://app.example.com/dashboard\");\n\n    // Trigger AJAX request\n    WebElement loadDataButton = autoHeal.findElement(\"#load-data-btn\", \"load data button\");\n    loadDataButton.click();\n\n    // Wait for loading indicator to appear\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    WebElement loadingSpinner = autoHeal.findElement(\".loading-spinner\", \"data loading indicator\");\n    assertTrue(loadingSpinner.isDisplayed());\n\n    // Wait for loading to complete\n    wait.until(ExpectedConditions.invisibilityOf(loadingSpinner));\n\n    // Verify loaded content\n    WebElement dataTable = autoHeal.findElement(\"#data-table\", \"dynamically loaded data table\");\n    List&lt;WebElement&gt; rows = dataTable.findElements(By.tagName(\"tr\"));\n    assertTrue(rows.size() &gt; 1); // Header + data rows\n\n    // Test infinite scroll\n    WebElement lastItem = autoHeal.findElement(\".data-item:last-child\", \"last item in scrollable list\");\n    ((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView();\", lastItem);\n\n    // Wait for new items to load\n    wait.until(ExpectedConditions.numberOfElementsToBeMoreThan(\n        LocatorTypeDetector.autoCreateBy(\".data-item\"),\n        rows.size()\n    ));\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#real-time-updates","title":"Real-time Updates","text":"<pre><code>@Test\nvoid testRealTimeUpdates() {\n    driver.get(\"https://live.example.com/stock-ticker\");\n\n    // Initial stock price\n    WebElement stockPrice = autoHeal.findElement(\"#AAPL-price\", \"Apple stock price\");\n    String initialPrice = stockPrice.getText();\n\n    // Wait for price update (real-time data)\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));\n    wait.until(driver -&gt; {\n        WebElement currentPrice = autoHeal.findElement(\"#AAPL-price\", \"Apple stock price\");\n        return !initialPrice.equals(currentPrice.getText());\n    });\n\n    // Verify price changed\n    String updatedPrice = stockPrice.getText();\n    assertNotEquals(initialPrice, updatedPrice);\n\n    // Test live notifications\n    WebElement notificationArea = autoHeal.findElement(\".notifications\", \"live notification area\");\n    wait.until(ExpectedConditions.textToBePresentInElement(notificationArea, \"Price Alert\"));\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#modal-dialogs","title":"Modal Dialogs","text":"<pre><code>@Test\nvoid testModalDialogs() {\n    driver.get(\"https://admin.example.com/users\");\n\n    // Open modal dialog\n    WebElement addUserButton = autoHeal.findElement(\"Add User\", \"add new user button\");\n    addUserButton.click();\n\n    // Wait for modal to appear\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));\n    WebElement modal = wait.until(ExpectedConditions.visibilityOfElementLocated(\n        LocatorTypeDetector.autoCreateBy(\"#user-modal\", \"user creation modal dialog\")\n    ));\n\n    // Fill modal form\n    WebElement modalUsername = autoHeal.findElement(\"#modal-username\", \"username field in modal\");\n    modalUsername.sendKeys(\"newuser\");\n\n    WebElement modalEmail = autoHeal.findElement(\"#modal-email\", \"email field in modal\");\n    modalEmail.sendKeys(\"newuser@example.com\");\n\n    // Submit modal\n    WebElement saveButton = autoHeal.findElement(\"//div[@id='user-modal']//button[text()='Save']\", \"save button in modal\");\n    saveButton.click();\n\n    // Wait for modal to close\n    wait.until(ExpectedConditions.invisibilityOf(modal));\n\n    // Verify user was added\n    WebElement userList = autoHeal.findElement(\"#users-table\", \"users table\");\n    assertTrue(userList.getText().contains(\"newuser\"));\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#file-operations","title":"File Operations","text":""},{"location":"user-guide/examples/selenium-examples/#file-upload","title":"File Upload","text":"<pre><code>@Test\nvoid testFileUpload() {\n    driver.get(\"https://upload.example.com\");\n\n    // Simple file input\n    WebElement fileInput = autoHeal.findElement(\"input[type='file']\", \"file upload input\");\n    String filePath = System.getProperty(\"user.dir\") + \"/testfiles/sample.pdf\";\n    fileInput.sendKeys(filePath);\n\n    // Verify file selected\n    String fileName = fileInput.getAttribute(\"value\");\n    assertTrue(fileName.contains(\"sample.pdf\"));\n\n    // Upload button\n    WebElement uploadButton = autoHeal.findElement(\"#upload-btn\", \"start upload button\");\n    uploadButton.click();\n\n    // Wait for upload progress\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));\n    WebElement progressBar = autoHeal.findElement(\".upload-progress\", \"upload progress bar\");\n\n    // Wait for upload completion\n    wait.until(ExpectedConditions.textToBePresentInElement(progressBar, \"100%\"));\n\n    // Verify success message\n    WebElement successMessage = autoHeal.findElement(\".upload-success\", \"upload success notification\");\n    assertTrue(successMessage.getText().contains(\"Upload completed\"));\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#multiple-file-upload","title":"Multiple File Upload","text":"<pre><code>@Test\nvoid testMultipleFileUpload() {\n    driver.get(\"https://gallery.example.com/upload\");\n\n    // Multiple file input\n    WebElement multiFileInput = autoHeal.findElement(\"input[type='file'][multiple]\", \"multiple files upload input\");\n\n    String file1 = System.getProperty(\"user.dir\") + \"/testfiles/image1.jpg\";\n    String file2 = System.getProperty(\"user.dir\") + \"/testfiles/image2.png\";\n    String files = file1 + \"\\n\" + file2; // Newline-separated for multiple files\n\n    multiFileInput.sendKeys(files);\n\n    // Verify both files selected\n    WebElement fileList = autoHeal.findElement(\".selected-files\", \"list of selected files\");\n    assertTrue(fileList.getText().contains(\"image1.jpg\"));\n    assertTrue(fileList.getText().contains(\"image2.png\"));\n\n    // Upload all files\n    WebElement uploadAllButton = autoHeal.findElement(\"Upload All\", \"upload all files button\");\n    uploadAllButton.click();\n\n    // Monitor upload progress for each file\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(60));\n    List&lt;WebElement&gt; progressBars = wait.until(ExpectedConditions.numberOfElementsToBeMoreThan(\n        LocatorTypeDetector.autoCreateBy(\".file-progress\"), 0\n    ));\n\n    assertEquals(2, progressBars.size());\n\n    // Wait for all uploads to complete\n    wait.until(driver -&gt; {\n        List&lt;WebElement&gt; completedUploads = driver.findElements(\n            LocatorTypeDetector.autoCreateBy(\".file-progress.completed\")\n        );\n        return completedUploads.size() == 2;\n    });\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#download-files","title":"Download Files","text":"<pre><code>@Test\nvoid testFileDownload() {\n    // Set download directory\n    String downloadDir = System.getProperty(\"user.dir\") + \"/downloads\";\n    new File(downloadDir).mkdirs();\n\n    ChromeOptions options = new ChromeOptions();\n    Map&lt;String, Object&gt; prefs = new HashMap&lt;&gt;();\n    prefs.put(\"download.default_directory\", downloadDir);\n    options.setExperimentalOption(\"prefs\", prefs);\n\n    WebDriver downloadDriver = new ChromeDriver(options);\n    AutoHealLocator downloadAutoHeal = AutoHealLocator.builder()\n        .withWebAdapter(new SeleniumWebAutomationAdapter(downloadDriver))\n        .build();\n\n    try {\n        downloadDriver.get(\"https://files.example.com\");\n\n        // Click download link\n        WebElement downloadLink = downloadAutoHeal.findElement(\n            \"//a[contains(@href, '.pdf')]\",\n            \"PDF file download link\"\n        );\n        downloadLink.click();\n\n        // Wait for download to complete\n        File downloadedFile = new File(downloadDir, \"sample.pdf\");\n        WebDriverWait wait = new WebDriverWait(downloadDriver, Duration.ofSeconds(30));\n        wait.until(driver -&gt; downloadedFile.exists() &amp;&amp; downloadedFile.length() &gt; 0);\n\n        assertTrue(downloadedFile.exists());\n        assertTrue(downloadedFile.length() &gt; 1000); // File has content\n\n    } finally {\n        downloadAutoHeal.shutdown();\n        downloadDriver.quit();\n    }\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#advanced-interactions","title":"Advanced Interactions","text":""},{"location":"user-guide/examples/selenium-examples/#drag-and-drop","title":"Drag and Drop","text":"<pre><code>@Test\nvoid testDragAndDrop() {\n    driver.get(\"https://dragdrop.example.com\");\n\n    Actions actions = new Actions(driver);\n\n    // Simple drag and drop\n    WebElement sourceElement = autoHeal.findElement(\"#draggable-1\", \"first draggable element\");\n    WebElement targetElement = autoHeal.findElement(\"#drop-zone\", \"drop target area\");\n\n    actions.dragAndDrop(sourceElement, targetElement).perform();\n\n    // Verify drop success\n    WebElement dropZoneContent = autoHeal.findElement(\"#drop-zone .dropped-item\", \"dropped item in target zone\");\n    assertTrue(dropZoneContent.isDisplayed());\n\n    // Complex drag and drop with offset\n    WebElement complexSource = autoHeal.findElement(\".complex-draggable\", \"complex draggable element\");\n    WebElement complexTarget = autoHeal.findElement(\".complex-target\", \"complex target with specific position\");\n\n    actions.clickAndHold(complexSource)\n           .moveToElement(complexTarget, 50, 25) // Offset within target\n           .release()\n           .perform();\n\n    // File drag and drop simulation\n    WebElement fileDropZone = autoHeal.findElement(\".file-drop-zone\", \"file drop zone area\");\n\n    // JavaScript-based file drop (for testing file drag-drop interfaces)\n    String jsDropFile = \"\"\"\n        var dt = new DataTransfer();\n        dt.items.add(new File(['file content'], 'test.txt', {type: 'text/plain'}));\n        var event = new DragEvent('drop', {dataTransfer: dt});\n        arguments[0].dispatchEvent(event);\n        \"\"\";\n\n    ((JavascriptExecutor) driver).executeScript(jsDropFile, fileDropZone);\n\n    // Verify file drop success\n    WebElement droppedFile = autoHeal.findElement(\".dropped-file-info\", \"information about dropped file\");\n    assertTrue(droppedFile.getText().contains(\"test.txt\"));\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#mouse-actions","title":"Mouse Actions","text":"<pre><code>@Test\nvoid testMouseActions() {\n    driver.get(\"https://interactive.example.com\");\n\n    Actions actions = new Actions(driver);\n\n    // Hover to reveal submenu\n    WebElement mainMenu = autoHeal.findElement(\".main-menu-item\", \"main navigation menu item\");\n    actions.moveToElement(mainMenu).perform();\n\n    WebElement submenu = autoHeal.findElement(\".submenu\", \"submenu appearing on hover\");\n    assertTrue(submenu.isDisplayed());\n\n    WebElement submenuItem = autoHeal.findElement(\".submenu-item\", \"item in submenu\");\n    submenuItem.click();\n\n    // Right-click context menu\n    WebElement contextArea = autoHeal.findElement(\"#context-area\", \"area with right-click context menu\");\n    actions.contextClick(contextArea).perform();\n\n    WebElement contextMenu = autoHeal.findElement(\".context-menu\", \"right-click context menu\");\n    assertTrue(contextMenu.isDisplayed());\n\n    WebElement contextOption = autoHeal.findElement(\".context-menu-option\", \"option in context menu\");\n    contextOption.click();\n\n    // Double-click action\n    WebElement doubleClickTarget = autoHeal.findElement(\".double-click-target\", \"element requiring double-click\");\n    actions.doubleClick(doubleClickTarget).perform();\n\n    WebElement doubleClickResult = autoHeal.findElement(\".double-click-result\", \"result of double-click action\");\n    assertTrue(doubleClickResult.getText().contains(\"Double-clicked\"));\n\n    // Click and hold\n    WebElement holdTarget = autoHeal.findElement(\".hold-target\", \"element for click and hold\");\n    actions.clickAndHold(holdTarget).perform();\n\n    // Wait for hold effect\n    Thread.sleep(2000);\n\n    WebElement holdEffect = autoHeal.findElement(\".hold-effect\", \"effect triggered by holding\");\n    assertTrue(holdEffect.isDisplayed());\n\n    actions.release().perform();\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#keyboard-actions","title":"Keyboard Actions","text":"<pre><code>@Test\nvoid testKeyboardActions() {\n    driver.get(\"https://editor.example.com\");\n\n    Actions actions = new Actions(driver);\n\n    // Text editor interactions\n    WebElement textEditor = autoHeal.findElement(\"#editor\", \"text editor area\");\n    textEditor.click();\n\n    // Type text\n    textEditor.sendKeys(\"Hello World!\");\n\n    // Select all and copy\n    actions.keyDown(Keys.CONTROL).sendKeys(\"a\").keyUp(Keys.CONTROL).perform();\n    actions.keyDown(Keys.CONTROL).sendKeys(\"c\").keyUp(Keys.CONTROL).perform();\n\n    // Move to new area and paste\n    WebElement pasteArea = autoHeal.findElement(\"#paste-area\", \"area for pasting text\");\n    pasteArea.click();\n    actions.keyDown(Keys.CONTROL).sendKeys(\"v\").keyUp(Keys.CONTROL).perform();\n\n    assertEquals(\"Hello World!\", pasteArea.getAttribute(\"value\"));\n\n    // Undo action\n    actions.keyDown(Keys.CONTROL).sendKeys(\"z\").keyUp(Keys.CONTROL).perform();\n    assertEquals(\"\", pasteArea.getAttribute(\"value\"));\n\n    // Redo action\n    actions.keyDown(Keys.CONTROL).keyDown(Keys.SHIFT).sendKeys(\"z\").keyUp(Keys.SHIFT).keyUp(Keys.CONTROL).perform();\n    assertEquals(\"Hello World!\", pasteArea.getAttribute(\"value\"));\n\n    // Navigation keys\n    textEditor.click();\n    textEditor.clear();\n    textEditor.sendKeys(\"Line 1\\nLine 2\\nLine 3\");\n\n    // Go to beginning\n    actions.keyDown(Keys.CONTROL).sendKeys(Keys.HOME).keyUp(Keys.CONTROL).perform();\n\n    // Select to end of line\n    actions.keyDown(Keys.SHIFT).sendKeys(Keys.END).keyUp(Keys.SHIFT).perform();\n\n    // Type over selection\n    actions.sendKeys(\"First Line\").perform();\n\n    String editorContent = textEditor.getAttribute(\"value\");\n    assertTrue(editorContent.startsWith(\"First Line\"));\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#error-handling","title":"Error Handling","text":""},{"location":"user-guide/examples/selenium-examples/#exception-handling","title":"Exception Handling","text":"<pre><code>@Test\nvoid testErrorHandling() {\n    driver.get(\"https://forms.example.com\");\n\n    // Handle element not found\n    try {\n        WebElement nonExistentElement = autoHeal.findElement(\"#does-not-exist\", \"non-existent element\");\n        fail(\"Should have thrown exception\");\n    } catch (AutoHealException e) {\n        assertTrue(e.getMessage().contains(\"All healing strategies failed\"));\n        assertTrue(e.getErrorCode() == ErrorCode.ELEMENT_NOT_FOUND);\n    }\n\n    // Handle timeout\n    try {\n        // Set very short timeout\n        AutoHealConfiguration quickTimeoutConfig = AutoHealConfiguration.builder()\n            .performance(PerformanceConfig.builder()\n                .elementTimeout(Duration.ofMillis(100))\n                .build())\n            .build();\n\n        AutoHealLocator quickAutoHeal = AutoHealLocator.builder()\n            .withWebAdapter(new SeleniumWebAutomationAdapter(driver))\n            .withConfiguration(quickTimeoutConfig)\n            .build();\n\n        WebElement timeoutElement = quickAutoHeal.findElement(\"#slow-loading-element\", \"very slow loading element\");\n        fail(\"Should have timed out\");\n\n    } catch (AutoHealException e) {\n        assertTrue(e.getErrorCode() == ErrorCode.TIMEOUT_EXCEEDED);\n    }\n\n    // Graceful degradation\n    WebElement fallbackElement = null;\n    try {\n        fallbackElement = autoHeal.findElement(\"#preferred-selector\", \"preferred element\");\n    } catch (AutoHealException e) {\n        // Fallback to manual selector\n        fallbackElement = driver.findElement(By.id(\"backup-selector\"));\n    }\n\n    assertNotNull(fallbackElement);\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#retry-logic","title":"Retry Logic","text":"<pre><code>@Test\nvoid testRetryLogic() {\n    driver.get(\"https://unstable.example.com\");\n\n    // Custom retry for flaky elements\n    WebElement flakyElement = retryFindElement(() -&gt;\n        autoHeal.findElement(\".sometimes-present\", \"element that sometimes loads\")\n    );\n\n    assertNotNull(flakyElement);\n}\n\nprivate WebElement retryFindElement(Supplier&lt;WebElement&gt; elementSupplier) {\n    int maxRetries = 3;\n    int attempt = 0;\n\n    while (attempt &lt; maxRetries) {\n        try {\n            return elementSupplier.get();\n        } catch (Exception e) {\n            attempt++;\n            if (attempt &gt;= maxRetries) {\n                throw e;\n            }\n\n            try {\n                Thread.sleep(1000); // Wait before retry\n            } catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(ie);\n            }\n        }\n    }\n\n    throw new RuntimeException(\"Element not found after \" + maxRetries + \" attempts\");\n}\n</code></pre>"},{"location":"user-guide/examples/selenium-examples/#validation-and-assertions","title":"Validation and Assertions","text":"<pre><code>@Test\nvoid testValidationAndAssertions() {\n    driver.get(\"https://form.example.com\");\n\n    // Validate form before submission\n    WebElement emailField = autoHeal.findElement(\"#email\", \"email input field\");\n    emailField.sendKeys(\"invalid-email\");\n\n    WebElement submitButton = autoHeal.findElement(\"Submit\", \"form submit button\");\n    submitButton.click();\n\n    // Check for validation errors\n    WebElement emailError = autoHeal.findElement(\".email-error\", \"email validation error message\");\n    assertTrue(emailError.isDisplayed());\n    assertTrue(emailError.getText().contains(\"valid email\"));\n\n    // Fix the email and resubmit\n    emailField.clear();\n    emailField.sendKeys(\"valid@example.com\");\n    submitButton.click();\n\n    // Verify error is gone\n    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));\n    wait.until(ExpectedConditions.invisibilityOf(emailError));\n\n    // Check success state\n    WebElement successMessage = autoHeal.findElement(\".success-message\", \"form submission success message\");\n    assertTrue(successMessage.isDisplayed());\n\n    // Validate form data was processed\n    assertTrue(driver.getCurrentUrl().contains(\"success\"));\n}\n</code></pre> <p>This comprehensive guide covers the major Selenium integration patterns with AutoHeal. The self-healing capabilities ensure your tests remain stable even when the underlying web application changes, while the universal selector support makes it easy to write maintainable test code.</p> <p>For more advanced topics, see: - Page Object Model Examples - Cucumber Integration - Performance Optimization</p>"}]}